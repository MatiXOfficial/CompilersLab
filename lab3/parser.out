Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> start
Rule 1     start -> struct
Rule 2     start -> start struct
Rule 3     start -> { start }
Rule 4     start -> start { start }
Rule 5     struct -> expr ;
Rule 6     struct -> cond_expr
Rule 7     struct -> instruction
Rule 8     loop_start -> loop_struct
Rule 9     loop_start -> loop_start loop_struct
Rule 10    loop_start -> { loop_start }
Rule 11    loop_start -> loop_start { loop_start }
Rule 12    loop_struct -> expr ;
Rule 13    loop_struct -> loop_cond_expr
Rule 14    loop_struct -> loop_instruction
Rule 15    expr -> INTNUM
Rule 16    expr -> FLOATNUM
Rule 17    expr -> STRING
Rule 18    expr -> lvalue
Rule 19    expr -> ( expr )
Rule 20    expr -> - expr
Rule 21    expr -> expr '
Rule 22    array_interior -> array_interior , expr
Rule 23    array_interior -> expr
Rule 24    expr -> [ array_interior ]
Rule 25    lvalue -> ID
Rule 26    lvalue -> ID [ expr ]
Rule 27    lvalue -> ID [ expr , expr ]
Rule 28    expr -> lvalue = expr
Rule 29    expr -> lvalue PLUSASSIGN expr
Rule 30    expr -> lvalue MINASSIGN expr
Rule 31    expr -> lvalue MULTASSIGN expr
Rule 32    expr -> lvalue DIVASSIGN expr
Rule 33    expr -> lvalue = ZEROS ( expr )
Rule 34    expr -> lvalue = ONES ( expr )
Rule 35    expr -> lvalue = EYE ( expr )
Rule 36    expr -> expr + expr
Rule 37    expr -> expr - expr
Rule 38    expr -> expr * expr
Rule 39    expr -> expr / expr
Rule 40    expr -> expr MPLUS expr
Rule 41    expr -> expr MMINUS expr
Rule 42    expr -> expr MMLTP expr
Rule 43    expr -> expr MDIV expr
Rule 44    expr -> expr EQ expr
Rule 45    expr -> expr NEQ expr
Rule 46    expr -> expr GTEQ expr
Rule 47    expr -> expr LTEQ expr
Rule 48    expr -> expr > expr
Rule 49    expr -> expr < expr
Rule 50    cond_expr -> cond_if
Rule 51    cond_expr -> cond_while
Rule 52    cond_expr -> cond_for
Rule 53    cond_block -> struct
Rule 54    cond_block -> { start }
Rule 55    cond_if -> IF ( expr ) cond_block
Rule 56    cond_if -> cond_if ELSE cond_block
Rule 57    loop_cond_expr -> loop_cond_if
Rule 58    loop_cond_expr -> cond_while
Rule 59    loop_cond_expr -> cond_for
Rule 60    loop_cond_block -> loop_struct
Rule 61    loop_cond_block -> { loop_start }
Rule 62    loop_cond_if -> IF ( expr ) loop_cond_block
Rule 63    loop_cond_if -> loop_cond_if ELSE loop_cond_block
Rule 64    cond_while -> WHILE ( expr ) loop_cond_block
Rule 65    cond_for -> FOR ID = expr : expr loop_cond_block
Rule 66    instruction -> RETURN expr ;
Rule 67    instruction -> PRINT array_interior ;
Rule 68    loop_instruction -> BREAK ;
Rule 69    loop_instruction -> CONTINUE ;
Rule 70    loop_instruction -> RETURN expr ;
Rule 71    loop_instruction -> PRINT array_interior ;

Terminals, with rules where they appear

'                    : 21
(                    : 19 33 34 35 55 62 64
)                    : 19 33 34 35 55 62 64
*                    : 38
+                    : 36
,                    : 22 27
-                    : 20 37
/                    : 39
:                    : 65
;                    : 5 12 66 67 68 69 70 71
<                    : 49
=                    : 28 33 34 35 65
>                    : 48
BREAK                : 68
CONTINUE             : 69
DIVASSIGN            : 32
ELSE                 : 56 63
EQ                   : 44
EYE                  : 35
FLOATNUM             : 16
FOR                  : 65
GTEQ                 : 46
ID                   : 25 26 27 65
IF                   : 55 62
INTNUM               : 15
LTEQ                 : 47
MDIV                 : 43
MINASSIGN            : 30
MMINUS               : 41
MMLTP                : 42
MPLUS                : 40
MULTASSIGN           : 31
NEQ                  : 45
ONES                 : 34
PLUSASSIGN           : 29
PRINT                : 67 71
RETURN               : 66 70
STRING               : 17
WHILE                : 64
ZEROS                : 33
[                    : 24 26 27
]                    : 24 26 27
error                : 
{                    : 3 4 10 11 54 61
}                    : 3 4 10 11 54 61

Nonterminals, with rules where they appear

array_interior       : 22 24 67 71
cond_block           : 55 56
cond_expr            : 6
cond_for             : 52 59
cond_if              : 50 56
cond_while           : 51 58
expr                 : 5 12 19 20 21 22 23 26 27 27 28 29 30 31 32 33 34 35 36 36 37 37 38 38 39 39 40 40 41 41 42 42 43 43 44 44 45 45 46 46 47 47 48 48 49 49 55 62 64 65 65 66 70
instruction          : 7
loop_cond_block      : 62 63 64 65
loop_cond_expr       : 13
loop_cond_if         : 57 63
loop_instruction     : 14
loop_start           : 9 10 11 11 61
loop_struct          : 8 9 60
lvalue               : 18 28 29 30 31 32 33 34 35
start                : 2 3 4 4 54 0
struct               : 1 2 53

Parsing method: LALR

state 0

    (0) S' -> . start
    (1) start -> . struct
    (2) start -> . start struct
    (3) start -> . { start }
    (4) start -> . start { start }
    (5) struct -> . expr ;
    (6) struct -> . cond_expr
    (7) struct -> . instruction
    (15) expr -> . INTNUM
    (16) expr -> . FLOATNUM
    (17) expr -> . STRING
    (18) expr -> . lvalue
    (19) expr -> . ( expr )
    (20) expr -> . - expr
    (21) expr -> . expr '
    (24) expr -> . [ array_interior ]
    (28) expr -> . lvalue = expr
    (29) expr -> . lvalue PLUSASSIGN expr
    (30) expr -> . lvalue MINASSIGN expr
    (31) expr -> . lvalue MULTASSIGN expr
    (32) expr -> . lvalue DIVASSIGN expr
    (33) expr -> . lvalue = ZEROS ( expr )
    (34) expr -> . lvalue = ONES ( expr )
    (35) expr -> . lvalue = EYE ( expr )
    (36) expr -> . expr + expr
    (37) expr -> . expr - expr
    (38) expr -> . expr * expr
    (39) expr -> . expr / expr
    (40) expr -> . expr MPLUS expr
    (41) expr -> . expr MMINUS expr
    (42) expr -> . expr MMLTP expr
    (43) expr -> . expr MDIV expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr > expr
    (49) expr -> . expr < expr
    (50) cond_expr -> . cond_if
    (51) cond_expr -> . cond_while
    (52) cond_expr -> . cond_for
    (66) instruction -> . RETURN expr ;
    (67) instruction -> . PRINT array_interior ;
    (25) lvalue -> . ID
    (26) lvalue -> . ID [ expr ]
    (27) lvalue -> . ID [ expr , expr ]
    (55) cond_if -> . IF ( expr ) cond_block
    (56) cond_if -> . cond_if ELSE cond_block
    (64) cond_while -> . WHILE ( expr ) loop_cond_block
    (65) cond_for -> . FOR ID = expr : expr loop_cond_block

    {               shift and go to state 3
    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13
    RETURN          shift and go to state 17
    PRINT           shift and go to state 18
    ID              shift and go to state 19
    IF              shift and go to state 20
    WHILE           shift and go to state 21
    FOR             shift and go to state 22

    start                          shift and go to state 1
    struct                         shift and go to state 2
    expr                           shift and go to state 4
    cond_expr                      shift and go to state 5
    instruction                    shift and go to state 6
    lvalue                         shift and go to state 10
    cond_if                        shift and go to state 14
    cond_while                     shift and go to state 15
    cond_for                       shift and go to state 16

state 1

    (0) S' -> start .
    (2) start -> start . struct
    (4) start -> start . { start }
    (5) struct -> . expr ;
    (6) struct -> . cond_expr
    (7) struct -> . instruction
    (15) expr -> . INTNUM
    (16) expr -> . FLOATNUM
    (17) expr -> . STRING
    (18) expr -> . lvalue
    (19) expr -> . ( expr )
    (20) expr -> . - expr
    (21) expr -> . expr '
    (24) expr -> . [ array_interior ]
    (28) expr -> . lvalue = expr
    (29) expr -> . lvalue PLUSASSIGN expr
    (30) expr -> . lvalue MINASSIGN expr
    (31) expr -> . lvalue MULTASSIGN expr
    (32) expr -> . lvalue DIVASSIGN expr
    (33) expr -> . lvalue = ZEROS ( expr )
    (34) expr -> . lvalue = ONES ( expr )
    (35) expr -> . lvalue = EYE ( expr )
    (36) expr -> . expr + expr
    (37) expr -> . expr - expr
    (38) expr -> . expr * expr
    (39) expr -> . expr / expr
    (40) expr -> . expr MPLUS expr
    (41) expr -> . expr MMINUS expr
    (42) expr -> . expr MMLTP expr
    (43) expr -> . expr MDIV expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr > expr
    (49) expr -> . expr < expr
    (50) cond_expr -> . cond_if
    (51) cond_expr -> . cond_while
    (52) cond_expr -> . cond_for
    (66) instruction -> . RETURN expr ;
    (67) instruction -> . PRINT array_interior ;
    (25) lvalue -> . ID
    (26) lvalue -> . ID [ expr ]
    (27) lvalue -> . ID [ expr , expr ]
    (55) cond_if -> . IF ( expr ) cond_block
    (56) cond_if -> . cond_if ELSE cond_block
    (64) cond_while -> . WHILE ( expr ) loop_cond_block
    (65) cond_for -> . FOR ID = expr : expr loop_cond_block

    {               shift and go to state 24
    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13
    RETURN          shift and go to state 17
    PRINT           shift and go to state 18
    ID              shift and go to state 19
    IF              shift and go to state 20
    WHILE           shift and go to state 21
    FOR             shift and go to state 22

    struct                         shift and go to state 23
    expr                           shift and go to state 4
    cond_expr                      shift and go to state 5
    instruction                    shift and go to state 6
    lvalue                         shift and go to state 10
    cond_if                        shift and go to state 14
    cond_while                     shift and go to state 15
    cond_for                       shift and go to state 16

state 2

    (1) start -> struct .

    {               reduce using rule 1 (start -> struct .)
    INTNUM          reduce using rule 1 (start -> struct .)
    FLOATNUM        reduce using rule 1 (start -> struct .)
    STRING          reduce using rule 1 (start -> struct .)
    (               reduce using rule 1 (start -> struct .)
    -               reduce using rule 1 (start -> struct .)
    [               reduce using rule 1 (start -> struct .)
    RETURN          reduce using rule 1 (start -> struct .)
    PRINT           reduce using rule 1 (start -> struct .)
    ID              reduce using rule 1 (start -> struct .)
    IF              reduce using rule 1 (start -> struct .)
    WHILE           reduce using rule 1 (start -> struct .)
    FOR             reduce using rule 1 (start -> struct .)
    $end            reduce using rule 1 (start -> struct .)
    }               reduce using rule 1 (start -> struct .)


state 3

    (3) start -> { . start }
    (1) start -> . struct
    (2) start -> . start struct
    (3) start -> . { start }
    (4) start -> . start { start }
    (5) struct -> . expr ;
    (6) struct -> . cond_expr
    (7) struct -> . instruction
    (15) expr -> . INTNUM
    (16) expr -> . FLOATNUM
    (17) expr -> . STRING
    (18) expr -> . lvalue
    (19) expr -> . ( expr )
    (20) expr -> . - expr
    (21) expr -> . expr '
    (24) expr -> . [ array_interior ]
    (28) expr -> . lvalue = expr
    (29) expr -> . lvalue PLUSASSIGN expr
    (30) expr -> . lvalue MINASSIGN expr
    (31) expr -> . lvalue MULTASSIGN expr
    (32) expr -> . lvalue DIVASSIGN expr
    (33) expr -> . lvalue = ZEROS ( expr )
    (34) expr -> . lvalue = ONES ( expr )
    (35) expr -> . lvalue = EYE ( expr )
    (36) expr -> . expr + expr
    (37) expr -> . expr - expr
    (38) expr -> . expr * expr
    (39) expr -> . expr / expr
    (40) expr -> . expr MPLUS expr
    (41) expr -> . expr MMINUS expr
    (42) expr -> . expr MMLTP expr
    (43) expr -> . expr MDIV expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr > expr
    (49) expr -> . expr < expr
    (50) cond_expr -> . cond_if
    (51) cond_expr -> . cond_while
    (52) cond_expr -> . cond_for
    (66) instruction -> . RETURN expr ;
    (67) instruction -> . PRINT array_interior ;
    (25) lvalue -> . ID
    (26) lvalue -> . ID [ expr ]
    (27) lvalue -> . ID [ expr , expr ]
    (55) cond_if -> . IF ( expr ) cond_block
    (56) cond_if -> . cond_if ELSE cond_block
    (64) cond_while -> . WHILE ( expr ) loop_cond_block
    (65) cond_for -> . FOR ID = expr : expr loop_cond_block

    {               shift and go to state 3
    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13
    RETURN          shift and go to state 17
    PRINT           shift and go to state 18
    ID              shift and go to state 19
    IF              shift and go to state 20
    WHILE           shift and go to state 21
    FOR             shift and go to state 22

    start                          shift and go to state 25
    struct                         shift and go to state 2
    expr                           shift and go to state 4
    cond_expr                      shift and go to state 5
    instruction                    shift and go to state 6
    lvalue                         shift and go to state 10
    cond_if                        shift and go to state 14
    cond_while                     shift and go to state 15
    cond_for                       shift and go to state 16

state 4

    (5) struct -> expr . ;
    (21) expr -> expr . '
    (36) expr -> expr . + expr
    (37) expr -> expr . - expr
    (38) expr -> expr . * expr
    (39) expr -> expr . / expr
    (40) expr -> expr . MPLUS expr
    (41) expr -> expr . MMINUS expr
    (42) expr -> expr . MMLTP expr
    (43) expr -> expr . MDIV expr
    (44) expr -> expr . EQ expr
    (45) expr -> expr . NEQ expr
    (46) expr -> expr . GTEQ expr
    (47) expr -> expr . LTEQ expr
    (48) expr -> expr . > expr
    (49) expr -> expr . < expr

    ;               shift and go to state 26
    '               shift and go to state 27
    +               shift and go to state 28
    -               shift and go to state 29
    *               shift and go to state 30
    /               shift and go to state 31
    MPLUS           shift and go to state 32
    MMINUS          shift and go to state 33
    MMLTP           shift and go to state 34
    MDIV            shift and go to state 35
    EQ              shift and go to state 36
    NEQ             shift and go to state 37
    GTEQ            shift and go to state 38
    LTEQ            shift and go to state 39
    >               shift and go to state 40
    <               shift and go to state 41


state 5

    (6) struct -> cond_expr .

    {               reduce using rule 6 (struct -> cond_expr .)
    INTNUM          reduce using rule 6 (struct -> cond_expr .)
    FLOATNUM        reduce using rule 6 (struct -> cond_expr .)
    STRING          reduce using rule 6 (struct -> cond_expr .)
    (               reduce using rule 6 (struct -> cond_expr .)
    -               reduce using rule 6 (struct -> cond_expr .)
    [               reduce using rule 6 (struct -> cond_expr .)
    RETURN          reduce using rule 6 (struct -> cond_expr .)
    PRINT           reduce using rule 6 (struct -> cond_expr .)
    ID              reduce using rule 6 (struct -> cond_expr .)
    IF              reduce using rule 6 (struct -> cond_expr .)
    WHILE           reduce using rule 6 (struct -> cond_expr .)
    FOR             reduce using rule 6 (struct -> cond_expr .)
    $end            reduce using rule 6 (struct -> cond_expr .)
    }               reduce using rule 6 (struct -> cond_expr .)
    ELSE            reduce using rule 6 (struct -> cond_expr .)


state 6

    (7) struct -> instruction .

    {               reduce using rule 7 (struct -> instruction .)
    INTNUM          reduce using rule 7 (struct -> instruction .)
    FLOATNUM        reduce using rule 7 (struct -> instruction .)
    STRING          reduce using rule 7 (struct -> instruction .)
    (               reduce using rule 7 (struct -> instruction .)
    -               reduce using rule 7 (struct -> instruction .)
    [               reduce using rule 7 (struct -> instruction .)
    RETURN          reduce using rule 7 (struct -> instruction .)
    PRINT           reduce using rule 7 (struct -> instruction .)
    ID              reduce using rule 7 (struct -> instruction .)
    IF              reduce using rule 7 (struct -> instruction .)
    WHILE           reduce using rule 7 (struct -> instruction .)
    FOR             reduce using rule 7 (struct -> instruction .)
    $end            reduce using rule 7 (struct -> instruction .)
    }               reduce using rule 7 (struct -> instruction .)
    ELSE            reduce using rule 7 (struct -> instruction .)


state 7

    (15) expr -> INTNUM .

    ;               reduce using rule 15 (expr -> INTNUM .)
    '               reduce using rule 15 (expr -> INTNUM .)
    +               reduce using rule 15 (expr -> INTNUM .)
    -               reduce using rule 15 (expr -> INTNUM .)
    *               reduce using rule 15 (expr -> INTNUM .)
    /               reduce using rule 15 (expr -> INTNUM .)
    MPLUS           reduce using rule 15 (expr -> INTNUM .)
    MMINUS          reduce using rule 15 (expr -> INTNUM .)
    MMLTP           reduce using rule 15 (expr -> INTNUM .)
    MDIV            reduce using rule 15 (expr -> INTNUM .)
    EQ              reduce using rule 15 (expr -> INTNUM .)
    NEQ             reduce using rule 15 (expr -> INTNUM .)
    GTEQ            reduce using rule 15 (expr -> INTNUM .)
    LTEQ            reduce using rule 15 (expr -> INTNUM .)
    >               reduce using rule 15 (expr -> INTNUM .)
    <               reduce using rule 15 (expr -> INTNUM .)
    )               reduce using rule 15 (expr -> INTNUM .)
    ]               reduce using rule 15 (expr -> INTNUM .)
    ,               reduce using rule 15 (expr -> INTNUM .)
    :               reduce using rule 15 (expr -> INTNUM .)
    {               reduce using rule 15 (expr -> INTNUM .)
    INTNUM          reduce using rule 15 (expr -> INTNUM .)
    FLOATNUM        reduce using rule 15 (expr -> INTNUM .)
    STRING          reduce using rule 15 (expr -> INTNUM .)
    (               reduce using rule 15 (expr -> INTNUM .)
    [               reduce using rule 15 (expr -> INTNUM .)
    BREAK           reduce using rule 15 (expr -> INTNUM .)
    CONTINUE        reduce using rule 15 (expr -> INTNUM .)
    RETURN          reduce using rule 15 (expr -> INTNUM .)
    PRINT           reduce using rule 15 (expr -> INTNUM .)
    ID              reduce using rule 15 (expr -> INTNUM .)
    IF              reduce using rule 15 (expr -> INTNUM .)
    WHILE           reduce using rule 15 (expr -> INTNUM .)
    FOR             reduce using rule 15 (expr -> INTNUM .)


state 8

    (16) expr -> FLOATNUM .

    ;               reduce using rule 16 (expr -> FLOATNUM .)
    '               reduce using rule 16 (expr -> FLOATNUM .)
    +               reduce using rule 16 (expr -> FLOATNUM .)
    -               reduce using rule 16 (expr -> FLOATNUM .)
    *               reduce using rule 16 (expr -> FLOATNUM .)
    /               reduce using rule 16 (expr -> FLOATNUM .)
    MPLUS           reduce using rule 16 (expr -> FLOATNUM .)
    MMINUS          reduce using rule 16 (expr -> FLOATNUM .)
    MMLTP           reduce using rule 16 (expr -> FLOATNUM .)
    MDIV            reduce using rule 16 (expr -> FLOATNUM .)
    EQ              reduce using rule 16 (expr -> FLOATNUM .)
    NEQ             reduce using rule 16 (expr -> FLOATNUM .)
    GTEQ            reduce using rule 16 (expr -> FLOATNUM .)
    LTEQ            reduce using rule 16 (expr -> FLOATNUM .)
    >               reduce using rule 16 (expr -> FLOATNUM .)
    <               reduce using rule 16 (expr -> FLOATNUM .)
    )               reduce using rule 16 (expr -> FLOATNUM .)
    ]               reduce using rule 16 (expr -> FLOATNUM .)
    ,               reduce using rule 16 (expr -> FLOATNUM .)
    :               reduce using rule 16 (expr -> FLOATNUM .)
    {               reduce using rule 16 (expr -> FLOATNUM .)
    INTNUM          reduce using rule 16 (expr -> FLOATNUM .)
    FLOATNUM        reduce using rule 16 (expr -> FLOATNUM .)
    STRING          reduce using rule 16 (expr -> FLOATNUM .)
    (               reduce using rule 16 (expr -> FLOATNUM .)
    [               reduce using rule 16 (expr -> FLOATNUM .)
    BREAK           reduce using rule 16 (expr -> FLOATNUM .)
    CONTINUE        reduce using rule 16 (expr -> FLOATNUM .)
    RETURN          reduce using rule 16 (expr -> FLOATNUM .)
    PRINT           reduce using rule 16 (expr -> FLOATNUM .)
    ID              reduce using rule 16 (expr -> FLOATNUM .)
    IF              reduce using rule 16 (expr -> FLOATNUM .)
    WHILE           reduce using rule 16 (expr -> FLOATNUM .)
    FOR             reduce using rule 16 (expr -> FLOATNUM .)


state 9

    (17) expr -> STRING .

    ;               reduce using rule 17 (expr -> STRING .)
    '               reduce using rule 17 (expr -> STRING .)
    +               reduce using rule 17 (expr -> STRING .)
    -               reduce using rule 17 (expr -> STRING .)
    *               reduce using rule 17 (expr -> STRING .)
    /               reduce using rule 17 (expr -> STRING .)
    MPLUS           reduce using rule 17 (expr -> STRING .)
    MMINUS          reduce using rule 17 (expr -> STRING .)
    MMLTP           reduce using rule 17 (expr -> STRING .)
    MDIV            reduce using rule 17 (expr -> STRING .)
    EQ              reduce using rule 17 (expr -> STRING .)
    NEQ             reduce using rule 17 (expr -> STRING .)
    GTEQ            reduce using rule 17 (expr -> STRING .)
    LTEQ            reduce using rule 17 (expr -> STRING .)
    >               reduce using rule 17 (expr -> STRING .)
    <               reduce using rule 17 (expr -> STRING .)
    )               reduce using rule 17 (expr -> STRING .)
    ]               reduce using rule 17 (expr -> STRING .)
    ,               reduce using rule 17 (expr -> STRING .)
    :               reduce using rule 17 (expr -> STRING .)
    {               reduce using rule 17 (expr -> STRING .)
    INTNUM          reduce using rule 17 (expr -> STRING .)
    FLOATNUM        reduce using rule 17 (expr -> STRING .)
    STRING          reduce using rule 17 (expr -> STRING .)
    (               reduce using rule 17 (expr -> STRING .)
    [               reduce using rule 17 (expr -> STRING .)
    BREAK           reduce using rule 17 (expr -> STRING .)
    CONTINUE        reduce using rule 17 (expr -> STRING .)
    RETURN          reduce using rule 17 (expr -> STRING .)
    PRINT           reduce using rule 17 (expr -> STRING .)
    ID              reduce using rule 17 (expr -> STRING .)
    IF              reduce using rule 17 (expr -> STRING .)
    WHILE           reduce using rule 17 (expr -> STRING .)
    FOR             reduce using rule 17 (expr -> STRING .)


state 10

    (18) expr -> lvalue .
    (28) expr -> lvalue . = expr
    (29) expr -> lvalue . PLUSASSIGN expr
    (30) expr -> lvalue . MINASSIGN expr
    (31) expr -> lvalue . MULTASSIGN expr
    (32) expr -> lvalue . DIVASSIGN expr
    (33) expr -> lvalue . = ZEROS ( expr )
    (34) expr -> lvalue . = ONES ( expr )
    (35) expr -> lvalue . = EYE ( expr )

    ;               reduce using rule 18 (expr -> lvalue .)
    '               reduce using rule 18 (expr -> lvalue .)
    +               reduce using rule 18 (expr -> lvalue .)
    -               reduce using rule 18 (expr -> lvalue .)
    *               reduce using rule 18 (expr -> lvalue .)
    /               reduce using rule 18 (expr -> lvalue .)
    MPLUS           reduce using rule 18 (expr -> lvalue .)
    MMINUS          reduce using rule 18 (expr -> lvalue .)
    MMLTP           reduce using rule 18 (expr -> lvalue .)
    MDIV            reduce using rule 18 (expr -> lvalue .)
    EQ              reduce using rule 18 (expr -> lvalue .)
    NEQ             reduce using rule 18 (expr -> lvalue .)
    GTEQ            reduce using rule 18 (expr -> lvalue .)
    LTEQ            reduce using rule 18 (expr -> lvalue .)
    >               reduce using rule 18 (expr -> lvalue .)
    <               reduce using rule 18 (expr -> lvalue .)
    )               reduce using rule 18 (expr -> lvalue .)
    ]               reduce using rule 18 (expr -> lvalue .)
    ,               reduce using rule 18 (expr -> lvalue .)
    :               reduce using rule 18 (expr -> lvalue .)
    {               reduce using rule 18 (expr -> lvalue .)
    INTNUM          reduce using rule 18 (expr -> lvalue .)
    FLOATNUM        reduce using rule 18 (expr -> lvalue .)
    STRING          reduce using rule 18 (expr -> lvalue .)
    (               reduce using rule 18 (expr -> lvalue .)
    [               reduce using rule 18 (expr -> lvalue .)
    BREAK           reduce using rule 18 (expr -> lvalue .)
    CONTINUE        reduce using rule 18 (expr -> lvalue .)
    RETURN          reduce using rule 18 (expr -> lvalue .)
    PRINT           reduce using rule 18 (expr -> lvalue .)
    ID              reduce using rule 18 (expr -> lvalue .)
    IF              reduce using rule 18 (expr -> lvalue .)
    WHILE           reduce using rule 18 (expr -> lvalue .)
    FOR             reduce using rule 18 (expr -> lvalue .)
    =               shift and go to state 42
    PLUSASSIGN      shift and go to state 43
    MINASSIGN       shift and go to state 44
    MULTASSIGN      shift and go to state 45
    DIVASSIGN       shift and go to state 46


state 11

    (19) expr -> ( . expr )
    (15) expr -> . INTNUM
    (16) expr -> . FLOATNUM
    (17) expr -> . STRING
    (18) expr -> . lvalue
    (19) expr -> . ( expr )
    (20) expr -> . - expr
    (21) expr -> . expr '
    (24) expr -> . [ array_interior ]
    (28) expr -> . lvalue = expr
    (29) expr -> . lvalue PLUSASSIGN expr
    (30) expr -> . lvalue MINASSIGN expr
    (31) expr -> . lvalue MULTASSIGN expr
    (32) expr -> . lvalue DIVASSIGN expr
    (33) expr -> . lvalue = ZEROS ( expr )
    (34) expr -> . lvalue = ONES ( expr )
    (35) expr -> . lvalue = EYE ( expr )
    (36) expr -> . expr + expr
    (37) expr -> . expr - expr
    (38) expr -> . expr * expr
    (39) expr -> . expr / expr
    (40) expr -> . expr MPLUS expr
    (41) expr -> . expr MMINUS expr
    (42) expr -> . expr MMLTP expr
    (43) expr -> . expr MDIV expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr > expr
    (49) expr -> . expr < expr
    (25) lvalue -> . ID
    (26) lvalue -> . ID [ expr ]
    (27) lvalue -> . ID [ expr , expr ]

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13
    ID              shift and go to state 19

    expr                           shift and go to state 47
    lvalue                         shift and go to state 10

state 12

    (20) expr -> - . expr
    (15) expr -> . INTNUM
    (16) expr -> . FLOATNUM
    (17) expr -> . STRING
    (18) expr -> . lvalue
    (19) expr -> . ( expr )
    (20) expr -> . - expr
    (21) expr -> . expr '
    (24) expr -> . [ array_interior ]
    (28) expr -> . lvalue = expr
    (29) expr -> . lvalue PLUSASSIGN expr
    (30) expr -> . lvalue MINASSIGN expr
    (31) expr -> . lvalue MULTASSIGN expr
    (32) expr -> . lvalue DIVASSIGN expr
    (33) expr -> . lvalue = ZEROS ( expr )
    (34) expr -> . lvalue = ONES ( expr )
    (35) expr -> . lvalue = EYE ( expr )
    (36) expr -> . expr + expr
    (37) expr -> . expr - expr
    (38) expr -> . expr * expr
    (39) expr -> . expr / expr
    (40) expr -> . expr MPLUS expr
    (41) expr -> . expr MMINUS expr
    (42) expr -> . expr MMLTP expr
    (43) expr -> . expr MDIV expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr > expr
    (49) expr -> . expr < expr
    (25) lvalue -> . ID
    (26) lvalue -> . ID [ expr ]
    (27) lvalue -> . ID [ expr , expr ]

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13
    ID              shift and go to state 19

    expr                           shift and go to state 48
    lvalue                         shift and go to state 10

state 13

    (24) expr -> [ . array_interior ]
    (22) array_interior -> . array_interior , expr
    (23) array_interior -> . expr
    (15) expr -> . INTNUM
    (16) expr -> . FLOATNUM
    (17) expr -> . STRING
    (18) expr -> . lvalue
    (19) expr -> . ( expr )
    (20) expr -> . - expr
    (21) expr -> . expr '
    (24) expr -> . [ array_interior ]
    (28) expr -> . lvalue = expr
    (29) expr -> . lvalue PLUSASSIGN expr
    (30) expr -> . lvalue MINASSIGN expr
    (31) expr -> . lvalue MULTASSIGN expr
    (32) expr -> . lvalue DIVASSIGN expr
    (33) expr -> . lvalue = ZEROS ( expr )
    (34) expr -> . lvalue = ONES ( expr )
    (35) expr -> . lvalue = EYE ( expr )
    (36) expr -> . expr + expr
    (37) expr -> . expr - expr
    (38) expr -> . expr * expr
    (39) expr -> . expr / expr
    (40) expr -> . expr MPLUS expr
    (41) expr -> . expr MMINUS expr
    (42) expr -> . expr MMLTP expr
    (43) expr -> . expr MDIV expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr > expr
    (49) expr -> . expr < expr
    (25) lvalue -> . ID
    (26) lvalue -> . ID [ expr ]
    (27) lvalue -> . ID [ expr , expr ]

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13
    ID              shift and go to state 19

    array_interior                 shift and go to state 49
    expr                           shift and go to state 50
    lvalue                         shift and go to state 10

state 14

    (50) cond_expr -> cond_if .
    (56) cond_if -> cond_if . ELSE cond_block

  ! shift/reduce conflict for ELSE resolved as shift
    {               reduce using rule 50 (cond_expr -> cond_if .)
    INTNUM          reduce using rule 50 (cond_expr -> cond_if .)
    FLOATNUM        reduce using rule 50 (cond_expr -> cond_if .)
    STRING          reduce using rule 50 (cond_expr -> cond_if .)
    (               reduce using rule 50 (cond_expr -> cond_if .)
    -               reduce using rule 50 (cond_expr -> cond_if .)
    [               reduce using rule 50 (cond_expr -> cond_if .)
    RETURN          reduce using rule 50 (cond_expr -> cond_if .)
    PRINT           reduce using rule 50 (cond_expr -> cond_if .)
    ID              reduce using rule 50 (cond_expr -> cond_if .)
    IF              reduce using rule 50 (cond_expr -> cond_if .)
    WHILE           reduce using rule 50 (cond_expr -> cond_if .)
    FOR             reduce using rule 50 (cond_expr -> cond_if .)
    $end            reduce using rule 50 (cond_expr -> cond_if .)
    }               reduce using rule 50 (cond_expr -> cond_if .)
    ELSE            shift and go to state 51

  ! ELSE            [ reduce using rule 50 (cond_expr -> cond_if .) ]


state 15

    (51) cond_expr -> cond_while .

    {               reduce using rule 51 (cond_expr -> cond_while .)
    INTNUM          reduce using rule 51 (cond_expr -> cond_while .)
    FLOATNUM        reduce using rule 51 (cond_expr -> cond_while .)
    STRING          reduce using rule 51 (cond_expr -> cond_while .)
    (               reduce using rule 51 (cond_expr -> cond_while .)
    -               reduce using rule 51 (cond_expr -> cond_while .)
    [               reduce using rule 51 (cond_expr -> cond_while .)
    RETURN          reduce using rule 51 (cond_expr -> cond_while .)
    PRINT           reduce using rule 51 (cond_expr -> cond_while .)
    ID              reduce using rule 51 (cond_expr -> cond_while .)
    IF              reduce using rule 51 (cond_expr -> cond_while .)
    WHILE           reduce using rule 51 (cond_expr -> cond_while .)
    FOR             reduce using rule 51 (cond_expr -> cond_while .)
    $end            reduce using rule 51 (cond_expr -> cond_while .)
    }               reduce using rule 51 (cond_expr -> cond_while .)
    ELSE            reduce using rule 51 (cond_expr -> cond_while .)


state 16

    (52) cond_expr -> cond_for .

    {               reduce using rule 52 (cond_expr -> cond_for .)
    INTNUM          reduce using rule 52 (cond_expr -> cond_for .)
    FLOATNUM        reduce using rule 52 (cond_expr -> cond_for .)
    STRING          reduce using rule 52 (cond_expr -> cond_for .)
    (               reduce using rule 52 (cond_expr -> cond_for .)
    -               reduce using rule 52 (cond_expr -> cond_for .)
    [               reduce using rule 52 (cond_expr -> cond_for .)
    RETURN          reduce using rule 52 (cond_expr -> cond_for .)
    PRINT           reduce using rule 52 (cond_expr -> cond_for .)
    ID              reduce using rule 52 (cond_expr -> cond_for .)
    IF              reduce using rule 52 (cond_expr -> cond_for .)
    WHILE           reduce using rule 52 (cond_expr -> cond_for .)
    FOR             reduce using rule 52 (cond_expr -> cond_for .)
    $end            reduce using rule 52 (cond_expr -> cond_for .)
    }               reduce using rule 52 (cond_expr -> cond_for .)
    ELSE            reduce using rule 52 (cond_expr -> cond_for .)


state 17

    (66) instruction -> RETURN . expr ;
    (15) expr -> . INTNUM
    (16) expr -> . FLOATNUM
    (17) expr -> . STRING
    (18) expr -> . lvalue
    (19) expr -> . ( expr )
    (20) expr -> . - expr
    (21) expr -> . expr '
    (24) expr -> . [ array_interior ]
    (28) expr -> . lvalue = expr
    (29) expr -> . lvalue PLUSASSIGN expr
    (30) expr -> . lvalue MINASSIGN expr
    (31) expr -> . lvalue MULTASSIGN expr
    (32) expr -> . lvalue DIVASSIGN expr
    (33) expr -> . lvalue = ZEROS ( expr )
    (34) expr -> . lvalue = ONES ( expr )
    (35) expr -> . lvalue = EYE ( expr )
    (36) expr -> . expr + expr
    (37) expr -> . expr - expr
    (38) expr -> . expr * expr
    (39) expr -> . expr / expr
    (40) expr -> . expr MPLUS expr
    (41) expr -> . expr MMINUS expr
    (42) expr -> . expr MMLTP expr
    (43) expr -> . expr MDIV expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr > expr
    (49) expr -> . expr < expr
    (25) lvalue -> . ID
    (26) lvalue -> . ID [ expr ]
    (27) lvalue -> . ID [ expr , expr ]

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13
    ID              shift and go to state 19

    expr                           shift and go to state 52
    lvalue                         shift and go to state 10

state 18

    (67) instruction -> PRINT . array_interior ;
    (22) array_interior -> . array_interior , expr
    (23) array_interior -> . expr
    (15) expr -> . INTNUM
    (16) expr -> . FLOATNUM
    (17) expr -> . STRING
    (18) expr -> . lvalue
    (19) expr -> . ( expr )
    (20) expr -> . - expr
    (21) expr -> . expr '
    (24) expr -> . [ array_interior ]
    (28) expr -> . lvalue = expr
    (29) expr -> . lvalue PLUSASSIGN expr
    (30) expr -> . lvalue MINASSIGN expr
    (31) expr -> . lvalue MULTASSIGN expr
    (32) expr -> . lvalue DIVASSIGN expr
    (33) expr -> . lvalue = ZEROS ( expr )
    (34) expr -> . lvalue = ONES ( expr )
    (35) expr -> . lvalue = EYE ( expr )
    (36) expr -> . expr + expr
    (37) expr -> . expr - expr
    (38) expr -> . expr * expr
    (39) expr -> . expr / expr
    (40) expr -> . expr MPLUS expr
    (41) expr -> . expr MMINUS expr
    (42) expr -> . expr MMLTP expr
    (43) expr -> . expr MDIV expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr > expr
    (49) expr -> . expr < expr
    (25) lvalue -> . ID
    (26) lvalue -> . ID [ expr ]
    (27) lvalue -> . ID [ expr , expr ]

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13
    ID              shift and go to state 19

    array_interior                 shift and go to state 53
    expr                           shift and go to state 50
    lvalue                         shift and go to state 10

state 19

    (25) lvalue -> ID .
    (26) lvalue -> ID . [ expr ]
    (27) lvalue -> ID . [ expr , expr ]

  ! shift/reduce conflict for [ resolved as shift
    =               reduce using rule 25 (lvalue -> ID .)
    PLUSASSIGN      reduce using rule 25 (lvalue -> ID .)
    MINASSIGN       reduce using rule 25 (lvalue -> ID .)
    MULTASSIGN      reduce using rule 25 (lvalue -> ID .)
    DIVASSIGN       reduce using rule 25 (lvalue -> ID .)
    ;               reduce using rule 25 (lvalue -> ID .)
    '               reduce using rule 25 (lvalue -> ID .)
    +               reduce using rule 25 (lvalue -> ID .)
    -               reduce using rule 25 (lvalue -> ID .)
    *               reduce using rule 25 (lvalue -> ID .)
    /               reduce using rule 25 (lvalue -> ID .)
    MPLUS           reduce using rule 25 (lvalue -> ID .)
    MMINUS          reduce using rule 25 (lvalue -> ID .)
    MMLTP           reduce using rule 25 (lvalue -> ID .)
    MDIV            reduce using rule 25 (lvalue -> ID .)
    EQ              reduce using rule 25 (lvalue -> ID .)
    NEQ             reduce using rule 25 (lvalue -> ID .)
    GTEQ            reduce using rule 25 (lvalue -> ID .)
    LTEQ            reduce using rule 25 (lvalue -> ID .)
    >               reduce using rule 25 (lvalue -> ID .)
    <               reduce using rule 25 (lvalue -> ID .)
    )               reduce using rule 25 (lvalue -> ID .)
    ]               reduce using rule 25 (lvalue -> ID .)
    ,               reduce using rule 25 (lvalue -> ID .)
    :               reduce using rule 25 (lvalue -> ID .)
    {               reduce using rule 25 (lvalue -> ID .)
    INTNUM          reduce using rule 25 (lvalue -> ID .)
    FLOATNUM        reduce using rule 25 (lvalue -> ID .)
    STRING          reduce using rule 25 (lvalue -> ID .)
    (               reduce using rule 25 (lvalue -> ID .)
    BREAK           reduce using rule 25 (lvalue -> ID .)
    CONTINUE        reduce using rule 25 (lvalue -> ID .)
    RETURN          reduce using rule 25 (lvalue -> ID .)
    PRINT           reduce using rule 25 (lvalue -> ID .)
    ID              reduce using rule 25 (lvalue -> ID .)
    IF              reduce using rule 25 (lvalue -> ID .)
    WHILE           reduce using rule 25 (lvalue -> ID .)
    FOR             reduce using rule 25 (lvalue -> ID .)
    [               shift and go to state 54

  ! [               [ reduce using rule 25 (lvalue -> ID .) ]


state 20

    (55) cond_if -> IF . ( expr ) cond_block

    (               shift and go to state 55


state 21

    (64) cond_while -> WHILE . ( expr ) loop_cond_block

    (               shift and go to state 56


state 22

    (65) cond_for -> FOR . ID = expr : expr loop_cond_block

    ID              shift and go to state 57


state 23

    (2) start -> start struct .

    {               reduce using rule 2 (start -> start struct .)
    INTNUM          reduce using rule 2 (start -> start struct .)
    FLOATNUM        reduce using rule 2 (start -> start struct .)
    STRING          reduce using rule 2 (start -> start struct .)
    (               reduce using rule 2 (start -> start struct .)
    -               reduce using rule 2 (start -> start struct .)
    [               reduce using rule 2 (start -> start struct .)
    RETURN          reduce using rule 2 (start -> start struct .)
    PRINT           reduce using rule 2 (start -> start struct .)
    ID              reduce using rule 2 (start -> start struct .)
    IF              reduce using rule 2 (start -> start struct .)
    WHILE           reduce using rule 2 (start -> start struct .)
    FOR             reduce using rule 2 (start -> start struct .)
    $end            reduce using rule 2 (start -> start struct .)
    }               reduce using rule 2 (start -> start struct .)


state 24

    (4) start -> start { . start }
    (1) start -> . struct
    (2) start -> . start struct
    (3) start -> . { start }
    (4) start -> . start { start }
    (5) struct -> . expr ;
    (6) struct -> . cond_expr
    (7) struct -> . instruction
    (15) expr -> . INTNUM
    (16) expr -> . FLOATNUM
    (17) expr -> . STRING
    (18) expr -> . lvalue
    (19) expr -> . ( expr )
    (20) expr -> . - expr
    (21) expr -> . expr '
    (24) expr -> . [ array_interior ]
    (28) expr -> . lvalue = expr
    (29) expr -> . lvalue PLUSASSIGN expr
    (30) expr -> . lvalue MINASSIGN expr
    (31) expr -> . lvalue MULTASSIGN expr
    (32) expr -> . lvalue DIVASSIGN expr
    (33) expr -> . lvalue = ZEROS ( expr )
    (34) expr -> . lvalue = ONES ( expr )
    (35) expr -> . lvalue = EYE ( expr )
    (36) expr -> . expr + expr
    (37) expr -> . expr - expr
    (38) expr -> . expr * expr
    (39) expr -> . expr / expr
    (40) expr -> . expr MPLUS expr
    (41) expr -> . expr MMINUS expr
    (42) expr -> . expr MMLTP expr
    (43) expr -> . expr MDIV expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr > expr
    (49) expr -> . expr < expr
    (50) cond_expr -> . cond_if
    (51) cond_expr -> . cond_while
    (52) cond_expr -> . cond_for
    (66) instruction -> . RETURN expr ;
    (67) instruction -> . PRINT array_interior ;
    (25) lvalue -> . ID
    (26) lvalue -> . ID [ expr ]
    (27) lvalue -> . ID [ expr , expr ]
    (55) cond_if -> . IF ( expr ) cond_block
    (56) cond_if -> . cond_if ELSE cond_block
    (64) cond_while -> . WHILE ( expr ) loop_cond_block
    (65) cond_for -> . FOR ID = expr : expr loop_cond_block

    {               shift and go to state 3
    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13
    RETURN          shift and go to state 17
    PRINT           shift and go to state 18
    ID              shift and go to state 19
    IF              shift and go to state 20
    WHILE           shift and go to state 21
    FOR             shift and go to state 22

    start                          shift and go to state 58
    struct                         shift and go to state 2
    expr                           shift and go to state 4
    cond_expr                      shift and go to state 5
    instruction                    shift and go to state 6
    lvalue                         shift and go to state 10
    cond_if                        shift and go to state 14
    cond_while                     shift and go to state 15
    cond_for                       shift and go to state 16

state 25

    (3) start -> { start . }
    (2) start -> start . struct
    (4) start -> start . { start }
    (5) struct -> . expr ;
    (6) struct -> . cond_expr
    (7) struct -> . instruction
    (15) expr -> . INTNUM
    (16) expr -> . FLOATNUM
    (17) expr -> . STRING
    (18) expr -> . lvalue
    (19) expr -> . ( expr )
    (20) expr -> . - expr
    (21) expr -> . expr '
    (24) expr -> . [ array_interior ]
    (28) expr -> . lvalue = expr
    (29) expr -> . lvalue PLUSASSIGN expr
    (30) expr -> . lvalue MINASSIGN expr
    (31) expr -> . lvalue MULTASSIGN expr
    (32) expr -> . lvalue DIVASSIGN expr
    (33) expr -> . lvalue = ZEROS ( expr )
    (34) expr -> . lvalue = ONES ( expr )
    (35) expr -> . lvalue = EYE ( expr )
    (36) expr -> . expr + expr
    (37) expr -> . expr - expr
    (38) expr -> . expr * expr
    (39) expr -> . expr / expr
    (40) expr -> . expr MPLUS expr
    (41) expr -> . expr MMINUS expr
    (42) expr -> . expr MMLTP expr
    (43) expr -> . expr MDIV expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr > expr
    (49) expr -> . expr < expr
    (50) cond_expr -> . cond_if
    (51) cond_expr -> . cond_while
    (52) cond_expr -> . cond_for
    (66) instruction -> . RETURN expr ;
    (67) instruction -> . PRINT array_interior ;
    (25) lvalue -> . ID
    (26) lvalue -> . ID [ expr ]
    (27) lvalue -> . ID [ expr , expr ]
    (55) cond_if -> . IF ( expr ) cond_block
    (56) cond_if -> . cond_if ELSE cond_block
    (64) cond_while -> . WHILE ( expr ) loop_cond_block
    (65) cond_for -> . FOR ID = expr : expr loop_cond_block

    }               shift and go to state 59
    {               shift and go to state 24
    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13
    RETURN          shift and go to state 17
    PRINT           shift and go to state 18
    ID              shift and go to state 19
    IF              shift and go to state 20
    WHILE           shift and go to state 21
    FOR             shift and go to state 22

    struct                         shift and go to state 23
    expr                           shift and go to state 4
    cond_expr                      shift and go to state 5
    instruction                    shift and go to state 6
    lvalue                         shift and go to state 10
    cond_if                        shift and go to state 14
    cond_while                     shift and go to state 15
    cond_for                       shift and go to state 16

state 26

    (5) struct -> expr ; .

    {               reduce using rule 5 (struct -> expr ; .)
    INTNUM          reduce using rule 5 (struct -> expr ; .)
    FLOATNUM        reduce using rule 5 (struct -> expr ; .)
    STRING          reduce using rule 5 (struct -> expr ; .)
    (               reduce using rule 5 (struct -> expr ; .)
    -               reduce using rule 5 (struct -> expr ; .)
    [               reduce using rule 5 (struct -> expr ; .)
    RETURN          reduce using rule 5 (struct -> expr ; .)
    PRINT           reduce using rule 5 (struct -> expr ; .)
    ID              reduce using rule 5 (struct -> expr ; .)
    IF              reduce using rule 5 (struct -> expr ; .)
    WHILE           reduce using rule 5 (struct -> expr ; .)
    FOR             reduce using rule 5 (struct -> expr ; .)
    $end            reduce using rule 5 (struct -> expr ; .)
    }               reduce using rule 5 (struct -> expr ; .)
    ELSE            reduce using rule 5 (struct -> expr ; .)


state 27

    (21) expr -> expr ' .

    ;               reduce using rule 21 (expr -> expr ' .)
    '               reduce using rule 21 (expr -> expr ' .)
    +               reduce using rule 21 (expr -> expr ' .)
    -               reduce using rule 21 (expr -> expr ' .)
    *               reduce using rule 21 (expr -> expr ' .)
    /               reduce using rule 21 (expr -> expr ' .)
    MPLUS           reduce using rule 21 (expr -> expr ' .)
    MMINUS          reduce using rule 21 (expr -> expr ' .)
    MMLTP           reduce using rule 21 (expr -> expr ' .)
    MDIV            reduce using rule 21 (expr -> expr ' .)
    EQ              reduce using rule 21 (expr -> expr ' .)
    NEQ             reduce using rule 21 (expr -> expr ' .)
    GTEQ            reduce using rule 21 (expr -> expr ' .)
    LTEQ            reduce using rule 21 (expr -> expr ' .)
    >               reduce using rule 21 (expr -> expr ' .)
    <               reduce using rule 21 (expr -> expr ' .)
    )               reduce using rule 21 (expr -> expr ' .)
    ]               reduce using rule 21 (expr -> expr ' .)
    ,               reduce using rule 21 (expr -> expr ' .)
    :               reduce using rule 21 (expr -> expr ' .)
    {               reduce using rule 21 (expr -> expr ' .)
    INTNUM          reduce using rule 21 (expr -> expr ' .)
    FLOATNUM        reduce using rule 21 (expr -> expr ' .)
    STRING          reduce using rule 21 (expr -> expr ' .)
    (               reduce using rule 21 (expr -> expr ' .)
    [               reduce using rule 21 (expr -> expr ' .)
    BREAK           reduce using rule 21 (expr -> expr ' .)
    CONTINUE        reduce using rule 21 (expr -> expr ' .)
    RETURN          reduce using rule 21 (expr -> expr ' .)
    PRINT           reduce using rule 21 (expr -> expr ' .)
    ID              reduce using rule 21 (expr -> expr ' .)
    IF              reduce using rule 21 (expr -> expr ' .)
    WHILE           reduce using rule 21 (expr -> expr ' .)
    FOR             reduce using rule 21 (expr -> expr ' .)


state 28

    (36) expr -> expr + . expr
    (15) expr -> . INTNUM
    (16) expr -> . FLOATNUM
    (17) expr -> . STRING
    (18) expr -> . lvalue
    (19) expr -> . ( expr )
    (20) expr -> . - expr
    (21) expr -> . expr '
    (24) expr -> . [ array_interior ]
    (28) expr -> . lvalue = expr
    (29) expr -> . lvalue PLUSASSIGN expr
    (30) expr -> . lvalue MINASSIGN expr
    (31) expr -> . lvalue MULTASSIGN expr
    (32) expr -> . lvalue DIVASSIGN expr
    (33) expr -> . lvalue = ZEROS ( expr )
    (34) expr -> . lvalue = ONES ( expr )
    (35) expr -> . lvalue = EYE ( expr )
    (36) expr -> . expr + expr
    (37) expr -> . expr - expr
    (38) expr -> . expr * expr
    (39) expr -> . expr / expr
    (40) expr -> . expr MPLUS expr
    (41) expr -> . expr MMINUS expr
    (42) expr -> . expr MMLTP expr
    (43) expr -> . expr MDIV expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr > expr
    (49) expr -> . expr < expr
    (25) lvalue -> . ID
    (26) lvalue -> . ID [ expr ]
    (27) lvalue -> . ID [ expr , expr ]

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13
    ID              shift and go to state 19

    expr                           shift and go to state 60
    lvalue                         shift and go to state 10

state 29

    (37) expr -> expr - . expr
    (15) expr -> . INTNUM
    (16) expr -> . FLOATNUM
    (17) expr -> . STRING
    (18) expr -> . lvalue
    (19) expr -> . ( expr )
    (20) expr -> . - expr
    (21) expr -> . expr '
    (24) expr -> . [ array_interior ]
    (28) expr -> . lvalue = expr
    (29) expr -> . lvalue PLUSASSIGN expr
    (30) expr -> . lvalue MINASSIGN expr
    (31) expr -> . lvalue MULTASSIGN expr
    (32) expr -> . lvalue DIVASSIGN expr
    (33) expr -> . lvalue = ZEROS ( expr )
    (34) expr -> . lvalue = ONES ( expr )
    (35) expr -> . lvalue = EYE ( expr )
    (36) expr -> . expr + expr
    (37) expr -> . expr - expr
    (38) expr -> . expr * expr
    (39) expr -> . expr / expr
    (40) expr -> . expr MPLUS expr
    (41) expr -> . expr MMINUS expr
    (42) expr -> . expr MMLTP expr
    (43) expr -> . expr MDIV expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr > expr
    (49) expr -> . expr < expr
    (25) lvalue -> . ID
    (26) lvalue -> . ID [ expr ]
    (27) lvalue -> . ID [ expr , expr ]

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13
    ID              shift and go to state 19

    expr                           shift and go to state 61
    lvalue                         shift and go to state 10

state 30

    (38) expr -> expr * . expr
    (15) expr -> . INTNUM
    (16) expr -> . FLOATNUM
    (17) expr -> . STRING
    (18) expr -> . lvalue
    (19) expr -> . ( expr )
    (20) expr -> . - expr
    (21) expr -> . expr '
    (24) expr -> . [ array_interior ]
    (28) expr -> . lvalue = expr
    (29) expr -> . lvalue PLUSASSIGN expr
    (30) expr -> . lvalue MINASSIGN expr
    (31) expr -> . lvalue MULTASSIGN expr
    (32) expr -> . lvalue DIVASSIGN expr
    (33) expr -> . lvalue = ZEROS ( expr )
    (34) expr -> . lvalue = ONES ( expr )
    (35) expr -> . lvalue = EYE ( expr )
    (36) expr -> . expr + expr
    (37) expr -> . expr - expr
    (38) expr -> . expr * expr
    (39) expr -> . expr / expr
    (40) expr -> . expr MPLUS expr
    (41) expr -> . expr MMINUS expr
    (42) expr -> . expr MMLTP expr
    (43) expr -> . expr MDIV expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr > expr
    (49) expr -> . expr < expr
    (25) lvalue -> . ID
    (26) lvalue -> . ID [ expr ]
    (27) lvalue -> . ID [ expr , expr ]

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13
    ID              shift and go to state 19

    expr                           shift and go to state 62
    lvalue                         shift and go to state 10

state 31

    (39) expr -> expr / . expr
    (15) expr -> . INTNUM
    (16) expr -> . FLOATNUM
    (17) expr -> . STRING
    (18) expr -> . lvalue
    (19) expr -> . ( expr )
    (20) expr -> . - expr
    (21) expr -> . expr '
    (24) expr -> . [ array_interior ]
    (28) expr -> . lvalue = expr
    (29) expr -> . lvalue PLUSASSIGN expr
    (30) expr -> . lvalue MINASSIGN expr
    (31) expr -> . lvalue MULTASSIGN expr
    (32) expr -> . lvalue DIVASSIGN expr
    (33) expr -> . lvalue = ZEROS ( expr )
    (34) expr -> . lvalue = ONES ( expr )
    (35) expr -> . lvalue = EYE ( expr )
    (36) expr -> . expr + expr
    (37) expr -> . expr - expr
    (38) expr -> . expr * expr
    (39) expr -> . expr / expr
    (40) expr -> . expr MPLUS expr
    (41) expr -> . expr MMINUS expr
    (42) expr -> . expr MMLTP expr
    (43) expr -> . expr MDIV expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr > expr
    (49) expr -> . expr < expr
    (25) lvalue -> . ID
    (26) lvalue -> . ID [ expr ]
    (27) lvalue -> . ID [ expr , expr ]

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13
    ID              shift and go to state 19

    expr                           shift and go to state 63
    lvalue                         shift and go to state 10

state 32

    (40) expr -> expr MPLUS . expr
    (15) expr -> . INTNUM
    (16) expr -> . FLOATNUM
    (17) expr -> . STRING
    (18) expr -> . lvalue
    (19) expr -> . ( expr )
    (20) expr -> . - expr
    (21) expr -> . expr '
    (24) expr -> . [ array_interior ]
    (28) expr -> . lvalue = expr
    (29) expr -> . lvalue PLUSASSIGN expr
    (30) expr -> . lvalue MINASSIGN expr
    (31) expr -> . lvalue MULTASSIGN expr
    (32) expr -> . lvalue DIVASSIGN expr
    (33) expr -> . lvalue = ZEROS ( expr )
    (34) expr -> . lvalue = ONES ( expr )
    (35) expr -> . lvalue = EYE ( expr )
    (36) expr -> . expr + expr
    (37) expr -> . expr - expr
    (38) expr -> . expr * expr
    (39) expr -> . expr / expr
    (40) expr -> . expr MPLUS expr
    (41) expr -> . expr MMINUS expr
    (42) expr -> . expr MMLTP expr
    (43) expr -> . expr MDIV expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr > expr
    (49) expr -> . expr < expr
    (25) lvalue -> . ID
    (26) lvalue -> . ID [ expr ]
    (27) lvalue -> . ID [ expr , expr ]

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13
    ID              shift and go to state 19

    expr                           shift and go to state 64
    lvalue                         shift and go to state 10

state 33

    (41) expr -> expr MMINUS . expr
    (15) expr -> . INTNUM
    (16) expr -> . FLOATNUM
    (17) expr -> . STRING
    (18) expr -> . lvalue
    (19) expr -> . ( expr )
    (20) expr -> . - expr
    (21) expr -> . expr '
    (24) expr -> . [ array_interior ]
    (28) expr -> . lvalue = expr
    (29) expr -> . lvalue PLUSASSIGN expr
    (30) expr -> . lvalue MINASSIGN expr
    (31) expr -> . lvalue MULTASSIGN expr
    (32) expr -> . lvalue DIVASSIGN expr
    (33) expr -> . lvalue = ZEROS ( expr )
    (34) expr -> . lvalue = ONES ( expr )
    (35) expr -> . lvalue = EYE ( expr )
    (36) expr -> . expr + expr
    (37) expr -> . expr - expr
    (38) expr -> . expr * expr
    (39) expr -> . expr / expr
    (40) expr -> . expr MPLUS expr
    (41) expr -> . expr MMINUS expr
    (42) expr -> . expr MMLTP expr
    (43) expr -> . expr MDIV expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr > expr
    (49) expr -> . expr < expr
    (25) lvalue -> . ID
    (26) lvalue -> . ID [ expr ]
    (27) lvalue -> . ID [ expr , expr ]

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13
    ID              shift and go to state 19

    expr                           shift and go to state 65
    lvalue                         shift and go to state 10

state 34

    (42) expr -> expr MMLTP . expr
    (15) expr -> . INTNUM
    (16) expr -> . FLOATNUM
    (17) expr -> . STRING
    (18) expr -> . lvalue
    (19) expr -> . ( expr )
    (20) expr -> . - expr
    (21) expr -> . expr '
    (24) expr -> . [ array_interior ]
    (28) expr -> . lvalue = expr
    (29) expr -> . lvalue PLUSASSIGN expr
    (30) expr -> . lvalue MINASSIGN expr
    (31) expr -> . lvalue MULTASSIGN expr
    (32) expr -> . lvalue DIVASSIGN expr
    (33) expr -> . lvalue = ZEROS ( expr )
    (34) expr -> . lvalue = ONES ( expr )
    (35) expr -> . lvalue = EYE ( expr )
    (36) expr -> . expr + expr
    (37) expr -> . expr - expr
    (38) expr -> . expr * expr
    (39) expr -> . expr / expr
    (40) expr -> . expr MPLUS expr
    (41) expr -> . expr MMINUS expr
    (42) expr -> . expr MMLTP expr
    (43) expr -> . expr MDIV expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr > expr
    (49) expr -> . expr < expr
    (25) lvalue -> . ID
    (26) lvalue -> . ID [ expr ]
    (27) lvalue -> . ID [ expr , expr ]

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13
    ID              shift and go to state 19

    expr                           shift and go to state 66
    lvalue                         shift and go to state 10

state 35

    (43) expr -> expr MDIV . expr
    (15) expr -> . INTNUM
    (16) expr -> . FLOATNUM
    (17) expr -> . STRING
    (18) expr -> . lvalue
    (19) expr -> . ( expr )
    (20) expr -> . - expr
    (21) expr -> . expr '
    (24) expr -> . [ array_interior ]
    (28) expr -> . lvalue = expr
    (29) expr -> . lvalue PLUSASSIGN expr
    (30) expr -> . lvalue MINASSIGN expr
    (31) expr -> . lvalue MULTASSIGN expr
    (32) expr -> . lvalue DIVASSIGN expr
    (33) expr -> . lvalue = ZEROS ( expr )
    (34) expr -> . lvalue = ONES ( expr )
    (35) expr -> . lvalue = EYE ( expr )
    (36) expr -> . expr + expr
    (37) expr -> . expr - expr
    (38) expr -> . expr * expr
    (39) expr -> . expr / expr
    (40) expr -> . expr MPLUS expr
    (41) expr -> . expr MMINUS expr
    (42) expr -> . expr MMLTP expr
    (43) expr -> . expr MDIV expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr > expr
    (49) expr -> . expr < expr
    (25) lvalue -> . ID
    (26) lvalue -> . ID [ expr ]
    (27) lvalue -> . ID [ expr , expr ]

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13
    ID              shift and go to state 19

    expr                           shift and go to state 67
    lvalue                         shift and go to state 10

state 36

    (44) expr -> expr EQ . expr
    (15) expr -> . INTNUM
    (16) expr -> . FLOATNUM
    (17) expr -> . STRING
    (18) expr -> . lvalue
    (19) expr -> . ( expr )
    (20) expr -> . - expr
    (21) expr -> . expr '
    (24) expr -> . [ array_interior ]
    (28) expr -> . lvalue = expr
    (29) expr -> . lvalue PLUSASSIGN expr
    (30) expr -> . lvalue MINASSIGN expr
    (31) expr -> . lvalue MULTASSIGN expr
    (32) expr -> . lvalue DIVASSIGN expr
    (33) expr -> . lvalue = ZEROS ( expr )
    (34) expr -> . lvalue = ONES ( expr )
    (35) expr -> . lvalue = EYE ( expr )
    (36) expr -> . expr + expr
    (37) expr -> . expr - expr
    (38) expr -> . expr * expr
    (39) expr -> . expr / expr
    (40) expr -> . expr MPLUS expr
    (41) expr -> . expr MMINUS expr
    (42) expr -> . expr MMLTP expr
    (43) expr -> . expr MDIV expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr > expr
    (49) expr -> . expr < expr
    (25) lvalue -> . ID
    (26) lvalue -> . ID [ expr ]
    (27) lvalue -> . ID [ expr , expr ]

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13
    ID              shift and go to state 19

    expr                           shift and go to state 68
    lvalue                         shift and go to state 10

state 37

    (45) expr -> expr NEQ . expr
    (15) expr -> . INTNUM
    (16) expr -> . FLOATNUM
    (17) expr -> . STRING
    (18) expr -> . lvalue
    (19) expr -> . ( expr )
    (20) expr -> . - expr
    (21) expr -> . expr '
    (24) expr -> . [ array_interior ]
    (28) expr -> . lvalue = expr
    (29) expr -> . lvalue PLUSASSIGN expr
    (30) expr -> . lvalue MINASSIGN expr
    (31) expr -> . lvalue MULTASSIGN expr
    (32) expr -> . lvalue DIVASSIGN expr
    (33) expr -> . lvalue = ZEROS ( expr )
    (34) expr -> . lvalue = ONES ( expr )
    (35) expr -> . lvalue = EYE ( expr )
    (36) expr -> . expr + expr
    (37) expr -> . expr - expr
    (38) expr -> . expr * expr
    (39) expr -> . expr / expr
    (40) expr -> . expr MPLUS expr
    (41) expr -> . expr MMINUS expr
    (42) expr -> . expr MMLTP expr
    (43) expr -> . expr MDIV expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr > expr
    (49) expr -> . expr < expr
    (25) lvalue -> . ID
    (26) lvalue -> . ID [ expr ]
    (27) lvalue -> . ID [ expr , expr ]

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13
    ID              shift and go to state 19

    expr                           shift and go to state 69
    lvalue                         shift and go to state 10

state 38

    (46) expr -> expr GTEQ . expr
    (15) expr -> . INTNUM
    (16) expr -> . FLOATNUM
    (17) expr -> . STRING
    (18) expr -> . lvalue
    (19) expr -> . ( expr )
    (20) expr -> . - expr
    (21) expr -> . expr '
    (24) expr -> . [ array_interior ]
    (28) expr -> . lvalue = expr
    (29) expr -> . lvalue PLUSASSIGN expr
    (30) expr -> . lvalue MINASSIGN expr
    (31) expr -> . lvalue MULTASSIGN expr
    (32) expr -> . lvalue DIVASSIGN expr
    (33) expr -> . lvalue = ZEROS ( expr )
    (34) expr -> . lvalue = ONES ( expr )
    (35) expr -> . lvalue = EYE ( expr )
    (36) expr -> . expr + expr
    (37) expr -> . expr - expr
    (38) expr -> . expr * expr
    (39) expr -> . expr / expr
    (40) expr -> . expr MPLUS expr
    (41) expr -> . expr MMINUS expr
    (42) expr -> . expr MMLTP expr
    (43) expr -> . expr MDIV expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr > expr
    (49) expr -> . expr < expr
    (25) lvalue -> . ID
    (26) lvalue -> . ID [ expr ]
    (27) lvalue -> . ID [ expr , expr ]

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13
    ID              shift and go to state 19

    expr                           shift and go to state 70
    lvalue                         shift and go to state 10

state 39

    (47) expr -> expr LTEQ . expr
    (15) expr -> . INTNUM
    (16) expr -> . FLOATNUM
    (17) expr -> . STRING
    (18) expr -> . lvalue
    (19) expr -> . ( expr )
    (20) expr -> . - expr
    (21) expr -> . expr '
    (24) expr -> . [ array_interior ]
    (28) expr -> . lvalue = expr
    (29) expr -> . lvalue PLUSASSIGN expr
    (30) expr -> . lvalue MINASSIGN expr
    (31) expr -> . lvalue MULTASSIGN expr
    (32) expr -> . lvalue DIVASSIGN expr
    (33) expr -> . lvalue = ZEROS ( expr )
    (34) expr -> . lvalue = ONES ( expr )
    (35) expr -> . lvalue = EYE ( expr )
    (36) expr -> . expr + expr
    (37) expr -> . expr - expr
    (38) expr -> . expr * expr
    (39) expr -> . expr / expr
    (40) expr -> . expr MPLUS expr
    (41) expr -> . expr MMINUS expr
    (42) expr -> . expr MMLTP expr
    (43) expr -> . expr MDIV expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr > expr
    (49) expr -> . expr < expr
    (25) lvalue -> . ID
    (26) lvalue -> . ID [ expr ]
    (27) lvalue -> . ID [ expr , expr ]

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13
    ID              shift and go to state 19

    expr                           shift and go to state 71
    lvalue                         shift and go to state 10

state 40

    (48) expr -> expr > . expr
    (15) expr -> . INTNUM
    (16) expr -> . FLOATNUM
    (17) expr -> . STRING
    (18) expr -> . lvalue
    (19) expr -> . ( expr )
    (20) expr -> . - expr
    (21) expr -> . expr '
    (24) expr -> . [ array_interior ]
    (28) expr -> . lvalue = expr
    (29) expr -> . lvalue PLUSASSIGN expr
    (30) expr -> . lvalue MINASSIGN expr
    (31) expr -> . lvalue MULTASSIGN expr
    (32) expr -> . lvalue DIVASSIGN expr
    (33) expr -> . lvalue = ZEROS ( expr )
    (34) expr -> . lvalue = ONES ( expr )
    (35) expr -> . lvalue = EYE ( expr )
    (36) expr -> . expr + expr
    (37) expr -> . expr - expr
    (38) expr -> . expr * expr
    (39) expr -> . expr / expr
    (40) expr -> . expr MPLUS expr
    (41) expr -> . expr MMINUS expr
    (42) expr -> . expr MMLTP expr
    (43) expr -> . expr MDIV expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr > expr
    (49) expr -> . expr < expr
    (25) lvalue -> . ID
    (26) lvalue -> . ID [ expr ]
    (27) lvalue -> . ID [ expr , expr ]

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13
    ID              shift and go to state 19

    expr                           shift and go to state 72
    lvalue                         shift and go to state 10

state 41

    (49) expr -> expr < . expr
    (15) expr -> . INTNUM
    (16) expr -> . FLOATNUM
    (17) expr -> . STRING
    (18) expr -> . lvalue
    (19) expr -> . ( expr )
    (20) expr -> . - expr
    (21) expr -> . expr '
    (24) expr -> . [ array_interior ]
    (28) expr -> . lvalue = expr
    (29) expr -> . lvalue PLUSASSIGN expr
    (30) expr -> . lvalue MINASSIGN expr
    (31) expr -> . lvalue MULTASSIGN expr
    (32) expr -> . lvalue DIVASSIGN expr
    (33) expr -> . lvalue = ZEROS ( expr )
    (34) expr -> . lvalue = ONES ( expr )
    (35) expr -> . lvalue = EYE ( expr )
    (36) expr -> . expr + expr
    (37) expr -> . expr - expr
    (38) expr -> . expr * expr
    (39) expr -> . expr / expr
    (40) expr -> . expr MPLUS expr
    (41) expr -> . expr MMINUS expr
    (42) expr -> . expr MMLTP expr
    (43) expr -> . expr MDIV expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr > expr
    (49) expr -> . expr < expr
    (25) lvalue -> . ID
    (26) lvalue -> . ID [ expr ]
    (27) lvalue -> . ID [ expr , expr ]

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13
    ID              shift and go to state 19

    expr                           shift and go to state 73
    lvalue                         shift and go to state 10

state 42

    (28) expr -> lvalue = . expr
    (33) expr -> lvalue = . ZEROS ( expr )
    (34) expr -> lvalue = . ONES ( expr )
    (35) expr -> lvalue = . EYE ( expr )
    (15) expr -> . INTNUM
    (16) expr -> . FLOATNUM
    (17) expr -> . STRING
    (18) expr -> . lvalue
    (19) expr -> . ( expr )
    (20) expr -> . - expr
    (21) expr -> . expr '
    (24) expr -> . [ array_interior ]
    (28) expr -> . lvalue = expr
    (29) expr -> . lvalue PLUSASSIGN expr
    (30) expr -> . lvalue MINASSIGN expr
    (31) expr -> . lvalue MULTASSIGN expr
    (32) expr -> . lvalue DIVASSIGN expr
    (33) expr -> . lvalue = ZEROS ( expr )
    (34) expr -> . lvalue = ONES ( expr )
    (35) expr -> . lvalue = EYE ( expr )
    (36) expr -> . expr + expr
    (37) expr -> . expr - expr
    (38) expr -> . expr * expr
    (39) expr -> . expr / expr
    (40) expr -> . expr MPLUS expr
    (41) expr -> . expr MMINUS expr
    (42) expr -> . expr MMLTP expr
    (43) expr -> . expr MDIV expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr > expr
    (49) expr -> . expr < expr
    (25) lvalue -> . ID
    (26) lvalue -> . ID [ expr ]
    (27) lvalue -> . ID [ expr , expr ]

    ZEROS           shift and go to state 75
    ONES            shift and go to state 76
    EYE             shift and go to state 77
    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13
    ID              shift and go to state 19

    lvalue                         shift and go to state 10
    expr                           shift and go to state 74

state 43

    (29) expr -> lvalue PLUSASSIGN . expr
    (15) expr -> . INTNUM
    (16) expr -> . FLOATNUM
    (17) expr -> . STRING
    (18) expr -> . lvalue
    (19) expr -> . ( expr )
    (20) expr -> . - expr
    (21) expr -> . expr '
    (24) expr -> . [ array_interior ]
    (28) expr -> . lvalue = expr
    (29) expr -> . lvalue PLUSASSIGN expr
    (30) expr -> . lvalue MINASSIGN expr
    (31) expr -> . lvalue MULTASSIGN expr
    (32) expr -> . lvalue DIVASSIGN expr
    (33) expr -> . lvalue = ZEROS ( expr )
    (34) expr -> . lvalue = ONES ( expr )
    (35) expr -> . lvalue = EYE ( expr )
    (36) expr -> . expr + expr
    (37) expr -> . expr - expr
    (38) expr -> . expr * expr
    (39) expr -> . expr / expr
    (40) expr -> . expr MPLUS expr
    (41) expr -> . expr MMINUS expr
    (42) expr -> . expr MMLTP expr
    (43) expr -> . expr MDIV expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr > expr
    (49) expr -> . expr < expr
    (25) lvalue -> . ID
    (26) lvalue -> . ID [ expr ]
    (27) lvalue -> . ID [ expr , expr ]

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13
    ID              shift and go to state 19

    lvalue                         shift and go to state 10
    expr                           shift and go to state 78

state 44

    (30) expr -> lvalue MINASSIGN . expr
    (15) expr -> . INTNUM
    (16) expr -> . FLOATNUM
    (17) expr -> . STRING
    (18) expr -> . lvalue
    (19) expr -> . ( expr )
    (20) expr -> . - expr
    (21) expr -> . expr '
    (24) expr -> . [ array_interior ]
    (28) expr -> . lvalue = expr
    (29) expr -> . lvalue PLUSASSIGN expr
    (30) expr -> . lvalue MINASSIGN expr
    (31) expr -> . lvalue MULTASSIGN expr
    (32) expr -> . lvalue DIVASSIGN expr
    (33) expr -> . lvalue = ZEROS ( expr )
    (34) expr -> . lvalue = ONES ( expr )
    (35) expr -> . lvalue = EYE ( expr )
    (36) expr -> . expr + expr
    (37) expr -> . expr - expr
    (38) expr -> . expr * expr
    (39) expr -> . expr / expr
    (40) expr -> . expr MPLUS expr
    (41) expr -> . expr MMINUS expr
    (42) expr -> . expr MMLTP expr
    (43) expr -> . expr MDIV expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr > expr
    (49) expr -> . expr < expr
    (25) lvalue -> . ID
    (26) lvalue -> . ID [ expr ]
    (27) lvalue -> . ID [ expr , expr ]

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13
    ID              shift and go to state 19

    lvalue                         shift and go to state 10
    expr                           shift and go to state 79

state 45

    (31) expr -> lvalue MULTASSIGN . expr
    (15) expr -> . INTNUM
    (16) expr -> . FLOATNUM
    (17) expr -> . STRING
    (18) expr -> . lvalue
    (19) expr -> . ( expr )
    (20) expr -> . - expr
    (21) expr -> . expr '
    (24) expr -> . [ array_interior ]
    (28) expr -> . lvalue = expr
    (29) expr -> . lvalue PLUSASSIGN expr
    (30) expr -> . lvalue MINASSIGN expr
    (31) expr -> . lvalue MULTASSIGN expr
    (32) expr -> . lvalue DIVASSIGN expr
    (33) expr -> . lvalue = ZEROS ( expr )
    (34) expr -> . lvalue = ONES ( expr )
    (35) expr -> . lvalue = EYE ( expr )
    (36) expr -> . expr + expr
    (37) expr -> . expr - expr
    (38) expr -> . expr * expr
    (39) expr -> . expr / expr
    (40) expr -> . expr MPLUS expr
    (41) expr -> . expr MMINUS expr
    (42) expr -> . expr MMLTP expr
    (43) expr -> . expr MDIV expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr > expr
    (49) expr -> . expr < expr
    (25) lvalue -> . ID
    (26) lvalue -> . ID [ expr ]
    (27) lvalue -> . ID [ expr , expr ]

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13
    ID              shift and go to state 19

    lvalue                         shift and go to state 10
    expr                           shift and go to state 80

state 46

    (32) expr -> lvalue DIVASSIGN . expr
    (15) expr -> . INTNUM
    (16) expr -> . FLOATNUM
    (17) expr -> . STRING
    (18) expr -> . lvalue
    (19) expr -> . ( expr )
    (20) expr -> . - expr
    (21) expr -> . expr '
    (24) expr -> . [ array_interior ]
    (28) expr -> . lvalue = expr
    (29) expr -> . lvalue PLUSASSIGN expr
    (30) expr -> . lvalue MINASSIGN expr
    (31) expr -> . lvalue MULTASSIGN expr
    (32) expr -> . lvalue DIVASSIGN expr
    (33) expr -> . lvalue = ZEROS ( expr )
    (34) expr -> . lvalue = ONES ( expr )
    (35) expr -> . lvalue = EYE ( expr )
    (36) expr -> . expr + expr
    (37) expr -> . expr - expr
    (38) expr -> . expr * expr
    (39) expr -> . expr / expr
    (40) expr -> . expr MPLUS expr
    (41) expr -> . expr MMINUS expr
    (42) expr -> . expr MMLTP expr
    (43) expr -> . expr MDIV expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr > expr
    (49) expr -> . expr < expr
    (25) lvalue -> . ID
    (26) lvalue -> . ID [ expr ]
    (27) lvalue -> . ID [ expr , expr ]

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13
    ID              shift and go to state 19

    lvalue                         shift and go to state 10
    expr                           shift and go to state 81

state 47

    (19) expr -> ( expr . )
    (21) expr -> expr . '
    (36) expr -> expr . + expr
    (37) expr -> expr . - expr
    (38) expr -> expr . * expr
    (39) expr -> expr . / expr
    (40) expr -> expr . MPLUS expr
    (41) expr -> expr . MMINUS expr
    (42) expr -> expr . MMLTP expr
    (43) expr -> expr . MDIV expr
    (44) expr -> expr . EQ expr
    (45) expr -> expr . NEQ expr
    (46) expr -> expr . GTEQ expr
    (47) expr -> expr . LTEQ expr
    (48) expr -> expr . > expr
    (49) expr -> expr . < expr

    )               shift and go to state 82
    '               shift and go to state 27
    +               shift and go to state 28
    -               shift and go to state 29
    *               shift and go to state 30
    /               shift and go to state 31
    MPLUS           shift and go to state 32
    MMINUS          shift and go to state 33
    MMLTP           shift and go to state 34
    MDIV            shift and go to state 35
    EQ              shift and go to state 36
    NEQ             shift and go to state 37
    GTEQ            shift and go to state 38
    LTEQ            shift and go to state 39
    >               shift and go to state 40
    <               shift and go to state 41


state 48

    (20) expr -> - expr .
    (21) expr -> expr . '
    (36) expr -> expr . + expr
    (37) expr -> expr . - expr
    (38) expr -> expr . * expr
    (39) expr -> expr . / expr
    (40) expr -> expr . MPLUS expr
    (41) expr -> expr . MMINUS expr
    (42) expr -> expr . MMLTP expr
    (43) expr -> expr . MDIV expr
    (44) expr -> expr . EQ expr
    (45) expr -> expr . NEQ expr
    (46) expr -> expr . GTEQ expr
    (47) expr -> expr . LTEQ expr
    (48) expr -> expr . > expr
    (49) expr -> expr . < expr

    ;               reduce using rule 20 (expr -> - expr .)
    +               reduce using rule 20 (expr -> - expr .)
    -               reduce using rule 20 (expr -> - expr .)
    *               reduce using rule 20 (expr -> - expr .)
    /               reduce using rule 20 (expr -> - expr .)
    MPLUS           reduce using rule 20 (expr -> - expr .)
    MMINUS          reduce using rule 20 (expr -> - expr .)
    MMLTP           reduce using rule 20 (expr -> - expr .)
    MDIV            reduce using rule 20 (expr -> - expr .)
    EQ              reduce using rule 20 (expr -> - expr .)
    NEQ             reduce using rule 20 (expr -> - expr .)
    GTEQ            reduce using rule 20 (expr -> - expr .)
    LTEQ            reduce using rule 20 (expr -> - expr .)
    >               reduce using rule 20 (expr -> - expr .)
    <               reduce using rule 20 (expr -> - expr .)
    )               reduce using rule 20 (expr -> - expr .)
    ]               reduce using rule 20 (expr -> - expr .)
    ,               reduce using rule 20 (expr -> - expr .)
    :               reduce using rule 20 (expr -> - expr .)
    {               reduce using rule 20 (expr -> - expr .)
    INTNUM          reduce using rule 20 (expr -> - expr .)
    FLOATNUM        reduce using rule 20 (expr -> - expr .)
    STRING          reduce using rule 20 (expr -> - expr .)
    (               reduce using rule 20 (expr -> - expr .)
    [               reduce using rule 20 (expr -> - expr .)
    BREAK           reduce using rule 20 (expr -> - expr .)
    CONTINUE        reduce using rule 20 (expr -> - expr .)
    RETURN          reduce using rule 20 (expr -> - expr .)
    PRINT           reduce using rule 20 (expr -> - expr .)
    ID              reduce using rule 20 (expr -> - expr .)
    IF              reduce using rule 20 (expr -> - expr .)
    WHILE           reduce using rule 20 (expr -> - expr .)
    FOR             reduce using rule 20 (expr -> - expr .)
    '               shift and go to state 27

  ! '               [ reduce using rule 20 (expr -> - expr .) ]
  ! +               [ shift and go to state 28 ]
  ! -               [ shift and go to state 29 ]
  ! *               [ shift and go to state 30 ]
  ! /               [ shift and go to state 31 ]
  ! MPLUS           [ shift and go to state 32 ]
  ! MMINUS          [ shift and go to state 33 ]
  ! MMLTP           [ shift and go to state 34 ]
  ! MDIV            [ shift and go to state 35 ]
  ! EQ              [ shift and go to state 36 ]
  ! NEQ             [ shift and go to state 37 ]
  ! GTEQ            [ shift and go to state 38 ]
  ! LTEQ            [ shift and go to state 39 ]
  ! >               [ shift and go to state 40 ]
  ! <               [ shift and go to state 41 ]


state 49

    (24) expr -> [ array_interior . ]
    (22) array_interior -> array_interior . , expr

    ]               shift and go to state 83
    ,               shift and go to state 84


state 50

    (23) array_interior -> expr .
    (21) expr -> expr . '
    (36) expr -> expr . + expr
    (37) expr -> expr . - expr
    (38) expr -> expr . * expr
    (39) expr -> expr . / expr
    (40) expr -> expr . MPLUS expr
    (41) expr -> expr . MMINUS expr
    (42) expr -> expr . MMLTP expr
    (43) expr -> expr . MDIV expr
    (44) expr -> expr . EQ expr
    (45) expr -> expr . NEQ expr
    (46) expr -> expr . GTEQ expr
    (47) expr -> expr . LTEQ expr
    (48) expr -> expr . > expr
    (49) expr -> expr . < expr

    ]               reduce using rule 23 (array_interior -> expr .)
    ,               reduce using rule 23 (array_interior -> expr .)
    ;               reduce using rule 23 (array_interior -> expr .)
    '               shift and go to state 27
    +               shift and go to state 28
    -               shift and go to state 29
    *               shift and go to state 30
    /               shift and go to state 31
    MPLUS           shift and go to state 32
    MMINUS          shift and go to state 33
    MMLTP           shift and go to state 34
    MDIV            shift and go to state 35
    EQ              shift and go to state 36
    NEQ             shift and go to state 37
    GTEQ            shift and go to state 38
    LTEQ            shift and go to state 39
    >               shift and go to state 40
    <               shift and go to state 41


state 51

    (56) cond_if -> cond_if ELSE . cond_block
    (53) cond_block -> . struct
    (54) cond_block -> . { start }
    (5) struct -> . expr ;
    (6) struct -> . cond_expr
    (7) struct -> . instruction
    (15) expr -> . INTNUM
    (16) expr -> . FLOATNUM
    (17) expr -> . STRING
    (18) expr -> . lvalue
    (19) expr -> . ( expr )
    (20) expr -> . - expr
    (21) expr -> . expr '
    (24) expr -> . [ array_interior ]
    (28) expr -> . lvalue = expr
    (29) expr -> . lvalue PLUSASSIGN expr
    (30) expr -> . lvalue MINASSIGN expr
    (31) expr -> . lvalue MULTASSIGN expr
    (32) expr -> . lvalue DIVASSIGN expr
    (33) expr -> . lvalue = ZEROS ( expr )
    (34) expr -> . lvalue = ONES ( expr )
    (35) expr -> . lvalue = EYE ( expr )
    (36) expr -> . expr + expr
    (37) expr -> . expr - expr
    (38) expr -> . expr * expr
    (39) expr -> . expr / expr
    (40) expr -> . expr MPLUS expr
    (41) expr -> . expr MMINUS expr
    (42) expr -> . expr MMLTP expr
    (43) expr -> . expr MDIV expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr > expr
    (49) expr -> . expr < expr
    (50) cond_expr -> . cond_if
    (51) cond_expr -> . cond_while
    (52) cond_expr -> . cond_for
    (66) instruction -> . RETURN expr ;
    (67) instruction -> . PRINT array_interior ;
    (25) lvalue -> . ID
    (26) lvalue -> . ID [ expr ]
    (27) lvalue -> . ID [ expr , expr ]
    (55) cond_if -> . IF ( expr ) cond_block
    (56) cond_if -> . cond_if ELSE cond_block
    (64) cond_while -> . WHILE ( expr ) loop_cond_block
    (65) cond_for -> . FOR ID = expr : expr loop_cond_block

    {               shift and go to state 87
    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13
    RETURN          shift and go to state 17
    PRINT           shift and go to state 18
    ID              shift and go to state 19
    IF              shift and go to state 20
    WHILE           shift and go to state 21
    FOR             shift and go to state 22

    cond_if                        shift and go to state 14
    cond_block                     shift and go to state 85
    struct                         shift and go to state 86
    expr                           shift and go to state 4
    cond_expr                      shift and go to state 5
    instruction                    shift and go to state 6
    lvalue                         shift and go to state 10
    cond_while                     shift and go to state 15
    cond_for                       shift and go to state 16

state 52

    (66) instruction -> RETURN expr . ;
    (21) expr -> expr . '
    (36) expr -> expr . + expr
    (37) expr -> expr . - expr
    (38) expr -> expr . * expr
    (39) expr -> expr . / expr
    (40) expr -> expr . MPLUS expr
    (41) expr -> expr . MMINUS expr
    (42) expr -> expr . MMLTP expr
    (43) expr -> expr . MDIV expr
    (44) expr -> expr . EQ expr
    (45) expr -> expr . NEQ expr
    (46) expr -> expr . GTEQ expr
    (47) expr -> expr . LTEQ expr
    (48) expr -> expr . > expr
    (49) expr -> expr . < expr

    ;               shift and go to state 88
    '               shift and go to state 27
    +               shift and go to state 28
    -               shift and go to state 29
    *               shift and go to state 30
    /               shift and go to state 31
    MPLUS           shift and go to state 32
    MMINUS          shift and go to state 33
    MMLTP           shift and go to state 34
    MDIV            shift and go to state 35
    EQ              shift and go to state 36
    NEQ             shift and go to state 37
    GTEQ            shift and go to state 38
    LTEQ            shift and go to state 39
    >               shift and go to state 40
    <               shift and go to state 41


state 53

    (67) instruction -> PRINT array_interior . ;
    (22) array_interior -> array_interior . , expr

    ;               shift and go to state 89
    ,               shift and go to state 84


state 54

    (26) lvalue -> ID [ . expr ]
    (27) lvalue -> ID [ . expr , expr ]
    (15) expr -> . INTNUM
    (16) expr -> . FLOATNUM
    (17) expr -> . STRING
    (18) expr -> . lvalue
    (19) expr -> . ( expr )
    (20) expr -> . - expr
    (21) expr -> . expr '
    (24) expr -> . [ array_interior ]
    (28) expr -> . lvalue = expr
    (29) expr -> . lvalue PLUSASSIGN expr
    (30) expr -> . lvalue MINASSIGN expr
    (31) expr -> . lvalue MULTASSIGN expr
    (32) expr -> . lvalue DIVASSIGN expr
    (33) expr -> . lvalue = ZEROS ( expr )
    (34) expr -> . lvalue = ONES ( expr )
    (35) expr -> . lvalue = EYE ( expr )
    (36) expr -> . expr + expr
    (37) expr -> . expr - expr
    (38) expr -> . expr * expr
    (39) expr -> . expr / expr
    (40) expr -> . expr MPLUS expr
    (41) expr -> . expr MMINUS expr
    (42) expr -> . expr MMLTP expr
    (43) expr -> . expr MDIV expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr > expr
    (49) expr -> . expr < expr
    (25) lvalue -> . ID
    (26) lvalue -> . ID [ expr ]
    (27) lvalue -> . ID [ expr , expr ]

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13
    ID              shift and go to state 19

    expr                           shift and go to state 90
    lvalue                         shift and go to state 10

state 55

    (55) cond_if -> IF ( . expr ) cond_block
    (15) expr -> . INTNUM
    (16) expr -> . FLOATNUM
    (17) expr -> . STRING
    (18) expr -> . lvalue
    (19) expr -> . ( expr )
    (20) expr -> . - expr
    (21) expr -> . expr '
    (24) expr -> . [ array_interior ]
    (28) expr -> . lvalue = expr
    (29) expr -> . lvalue PLUSASSIGN expr
    (30) expr -> . lvalue MINASSIGN expr
    (31) expr -> . lvalue MULTASSIGN expr
    (32) expr -> . lvalue DIVASSIGN expr
    (33) expr -> . lvalue = ZEROS ( expr )
    (34) expr -> . lvalue = ONES ( expr )
    (35) expr -> . lvalue = EYE ( expr )
    (36) expr -> . expr + expr
    (37) expr -> . expr - expr
    (38) expr -> . expr * expr
    (39) expr -> . expr / expr
    (40) expr -> . expr MPLUS expr
    (41) expr -> . expr MMINUS expr
    (42) expr -> . expr MMLTP expr
    (43) expr -> . expr MDIV expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr > expr
    (49) expr -> . expr < expr
    (25) lvalue -> . ID
    (26) lvalue -> . ID [ expr ]
    (27) lvalue -> . ID [ expr , expr ]

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13
    ID              shift and go to state 19

    expr                           shift and go to state 91
    lvalue                         shift and go to state 10

state 56

    (64) cond_while -> WHILE ( . expr ) loop_cond_block
    (15) expr -> . INTNUM
    (16) expr -> . FLOATNUM
    (17) expr -> . STRING
    (18) expr -> . lvalue
    (19) expr -> . ( expr )
    (20) expr -> . - expr
    (21) expr -> . expr '
    (24) expr -> . [ array_interior ]
    (28) expr -> . lvalue = expr
    (29) expr -> . lvalue PLUSASSIGN expr
    (30) expr -> . lvalue MINASSIGN expr
    (31) expr -> . lvalue MULTASSIGN expr
    (32) expr -> . lvalue DIVASSIGN expr
    (33) expr -> . lvalue = ZEROS ( expr )
    (34) expr -> . lvalue = ONES ( expr )
    (35) expr -> . lvalue = EYE ( expr )
    (36) expr -> . expr + expr
    (37) expr -> . expr - expr
    (38) expr -> . expr * expr
    (39) expr -> . expr / expr
    (40) expr -> . expr MPLUS expr
    (41) expr -> . expr MMINUS expr
    (42) expr -> . expr MMLTP expr
    (43) expr -> . expr MDIV expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr > expr
    (49) expr -> . expr < expr
    (25) lvalue -> . ID
    (26) lvalue -> . ID [ expr ]
    (27) lvalue -> . ID [ expr , expr ]

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13
    ID              shift and go to state 19

    expr                           shift and go to state 92
    lvalue                         shift and go to state 10

state 57

    (65) cond_for -> FOR ID . = expr : expr loop_cond_block

    =               shift and go to state 93


state 58

    (4) start -> start { start . }
    (2) start -> start . struct
    (4) start -> start . { start }
    (5) struct -> . expr ;
    (6) struct -> . cond_expr
    (7) struct -> . instruction
    (15) expr -> . INTNUM
    (16) expr -> . FLOATNUM
    (17) expr -> . STRING
    (18) expr -> . lvalue
    (19) expr -> . ( expr )
    (20) expr -> . - expr
    (21) expr -> . expr '
    (24) expr -> . [ array_interior ]
    (28) expr -> . lvalue = expr
    (29) expr -> . lvalue PLUSASSIGN expr
    (30) expr -> . lvalue MINASSIGN expr
    (31) expr -> . lvalue MULTASSIGN expr
    (32) expr -> . lvalue DIVASSIGN expr
    (33) expr -> . lvalue = ZEROS ( expr )
    (34) expr -> . lvalue = ONES ( expr )
    (35) expr -> . lvalue = EYE ( expr )
    (36) expr -> . expr + expr
    (37) expr -> . expr - expr
    (38) expr -> . expr * expr
    (39) expr -> . expr / expr
    (40) expr -> . expr MPLUS expr
    (41) expr -> . expr MMINUS expr
    (42) expr -> . expr MMLTP expr
    (43) expr -> . expr MDIV expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr > expr
    (49) expr -> . expr < expr
    (50) cond_expr -> . cond_if
    (51) cond_expr -> . cond_while
    (52) cond_expr -> . cond_for
    (66) instruction -> . RETURN expr ;
    (67) instruction -> . PRINT array_interior ;
    (25) lvalue -> . ID
    (26) lvalue -> . ID [ expr ]
    (27) lvalue -> . ID [ expr , expr ]
    (55) cond_if -> . IF ( expr ) cond_block
    (56) cond_if -> . cond_if ELSE cond_block
    (64) cond_while -> . WHILE ( expr ) loop_cond_block
    (65) cond_for -> . FOR ID = expr : expr loop_cond_block

    }               shift and go to state 94
    {               shift and go to state 24
    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13
    RETURN          shift and go to state 17
    PRINT           shift and go to state 18
    ID              shift and go to state 19
    IF              shift and go to state 20
    WHILE           shift and go to state 21
    FOR             shift and go to state 22

    struct                         shift and go to state 23
    expr                           shift and go to state 4
    cond_expr                      shift and go to state 5
    instruction                    shift and go to state 6
    lvalue                         shift and go to state 10
    cond_if                        shift and go to state 14
    cond_while                     shift and go to state 15
    cond_for                       shift and go to state 16

state 59

    (3) start -> { start } .

    {               reduce using rule 3 (start -> { start } .)
    INTNUM          reduce using rule 3 (start -> { start } .)
    FLOATNUM        reduce using rule 3 (start -> { start } .)
    STRING          reduce using rule 3 (start -> { start } .)
    (               reduce using rule 3 (start -> { start } .)
    -               reduce using rule 3 (start -> { start } .)
    [               reduce using rule 3 (start -> { start } .)
    RETURN          reduce using rule 3 (start -> { start } .)
    PRINT           reduce using rule 3 (start -> { start } .)
    ID              reduce using rule 3 (start -> { start } .)
    IF              reduce using rule 3 (start -> { start } .)
    WHILE           reduce using rule 3 (start -> { start } .)
    FOR             reduce using rule 3 (start -> { start } .)
    $end            reduce using rule 3 (start -> { start } .)
    }               reduce using rule 3 (start -> { start } .)


state 60

    (36) expr -> expr + expr .
    (21) expr -> expr . '
    (36) expr -> expr . + expr
    (37) expr -> expr . - expr
    (38) expr -> expr . * expr
    (39) expr -> expr . / expr
    (40) expr -> expr . MPLUS expr
    (41) expr -> expr . MMINUS expr
    (42) expr -> expr . MMLTP expr
    (43) expr -> expr . MDIV expr
    (44) expr -> expr . EQ expr
    (45) expr -> expr . NEQ expr
    (46) expr -> expr . GTEQ expr
    (47) expr -> expr . LTEQ expr
    (48) expr -> expr . > expr
    (49) expr -> expr . < expr

    ;               reduce using rule 36 (expr -> expr + expr .)
    +               reduce using rule 36 (expr -> expr + expr .)
    -               reduce using rule 36 (expr -> expr + expr .)
    MPLUS           reduce using rule 36 (expr -> expr + expr .)
    MMINUS          reduce using rule 36 (expr -> expr + expr .)
    EQ              reduce using rule 36 (expr -> expr + expr .)
    NEQ             reduce using rule 36 (expr -> expr + expr .)
    GTEQ            reduce using rule 36 (expr -> expr + expr .)
    LTEQ            reduce using rule 36 (expr -> expr + expr .)
    >               reduce using rule 36 (expr -> expr + expr .)
    <               reduce using rule 36 (expr -> expr + expr .)
    )               reduce using rule 36 (expr -> expr + expr .)
    ]               reduce using rule 36 (expr -> expr + expr .)
    ,               reduce using rule 36 (expr -> expr + expr .)
    :               reduce using rule 36 (expr -> expr + expr .)
    {               reduce using rule 36 (expr -> expr + expr .)
    INTNUM          reduce using rule 36 (expr -> expr + expr .)
    FLOATNUM        reduce using rule 36 (expr -> expr + expr .)
    STRING          reduce using rule 36 (expr -> expr + expr .)
    (               reduce using rule 36 (expr -> expr + expr .)
    [               reduce using rule 36 (expr -> expr + expr .)
    BREAK           reduce using rule 36 (expr -> expr + expr .)
    CONTINUE        reduce using rule 36 (expr -> expr + expr .)
    RETURN          reduce using rule 36 (expr -> expr + expr .)
    PRINT           reduce using rule 36 (expr -> expr + expr .)
    ID              reduce using rule 36 (expr -> expr + expr .)
    IF              reduce using rule 36 (expr -> expr + expr .)
    WHILE           reduce using rule 36 (expr -> expr + expr .)
    FOR             reduce using rule 36 (expr -> expr + expr .)
    '               shift and go to state 27
    *               shift and go to state 30
    /               shift and go to state 31
    MMLTP           shift and go to state 34
    MDIV            shift and go to state 35

  ! '               [ reduce using rule 36 (expr -> expr + expr .) ]
  ! *               [ reduce using rule 36 (expr -> expr + expr .) ]
  ! /               [ reduce using rule 36 (expr -> expr + expr .) ]
  ! MMLTP           [ reduce using rule 36 (expr -> expr + expr .) ]
  ! MDIV            [ reduce using rule 36 (expr -> expr + expr .) ]
  ! +               [ shift and go to state 28 ]
  ! -               [ shift and go to state 29 ]
  ! MPLUS           [ shift and go to state 32 ]
  ! MMINUS          [ shift and go to state 33 ]
  ! EQ              [ shift and go to state 36 ]
  ! NEQ             [ shift and go to state 37 ]
  ! GTEQ            [ shift and go to state 38 ]
  ! LTEQ            [ shift and go to state 39 ]
  ! >               [ shift and go to state 40 ]
  ! <               [ shift and go to state 41 ]


state 61

    (37) expr -> expr - expr .
    (21) expr -> expr . '
    (36) expr -> expr . + expr
    (37) expr -> expr . - expr
    (38) expr -> expr . * expr
    (39) expr -> expr . / expr
    (40) expr -> expr . MPLUS expr
    (41) expr -> expr . MMINUS expr
    (42) expr -> expr . MMLTP expr
    (43) expr -> expr . MDIV expr
    (44) expr -> expr . EQ expr
    (45) expr -> expr . NEQ expr
    (46) expr -> expr . GTEQ expr
    (47) expr -> expr . LTEQ expr
    (48) expr -> expr . > expr
    (49) expr -> expr . < expr

    ;               reduce using rule 37 (expr -> expr - expr .)
    +               reduce using rule 37 (expr -> expr - expr .)
    -               reduce using rule 37 (expr -> expr - expr .)
    MPLUS           reduce using rule 37 (expr -> expr - expr .)
    MMINUS          reduce using rule 37 (expr -> expr - expr .)
    EQ              reduce using rule 37 (expr -> expr - expr .)
    NEQ             reduce using rule 37 (expr -> expr - expr .)
    GTEQ            reduce using rule 37 (expr -> expr - expr .)
    LTEQ            reduce using rule 37 (expr -> expr - expr .)
    >               reduce using rule 37 (expr -> expr - expr .)
    <               reduce using rule 37 (expr -> expr - expr .)
    )               reduce using rule 37 (expr -> expr - expr .)
    ]               reduce using rule 37 (expr -> expr - expr .)
    ,               reduce using rule 37 (expr -> expr - expr .)
    :               reduce using rule 37 (expr -> expr - expr .)
    {               reduce using rule 37 (expr -> expr - expr .)
    INTNUM          reduce using rule 37 (expr -> expr - expr .)
    FLOATNUM        reduce using rule 37 (expr -> expr - expr .)
    STRING          reduce using rule 37 (expr -> expr - expr .)
    (               reduce using rule 37 (expr -> expr - expr .)
    [               reduce using rule 37 (expr -> expr - expr .)
    BREAK           reduce using rule 37 (expr -> expr - expr .)
    CONTINUE        reduce using rule 37 (expr -> expr - expr .)
    RETURN          reduce using rule 37 (expr -> expr - expr .)
    PRINT           reduce using rule 37 (expr -> expr - expr .)
    ID              reduce using rule 37 (expr -> expr - expr .)
    IF              reduce using rule 37 (expr -> expr - expr .)
    WHILE           reduce using rule 37 (expr -> expr - expr .)
    FOR             reduce using rule 37 (expr -> expr - expr .)
    '               shift and go to state 27
    *               shift and go to state 30
    /               shift and go to state 31
    MMLTP           shift and go to state 34
    MDIV            shift and go to state 35

  ! '               [ reduce using rule 37 (expr -> expr - expr .) ]
  ! *               [ reduce using rule 37 (expr -> expr - expr .) ]
  ! /               [ reduce using rule 37 (expr -> expr - expr .) ]
  ! MMLTP           [ reduce using rule 37 (expr -> expr - expr .) ]
  ! MDIV            [ reduce using rule 37 (expr -> expr - expr .) ]
  ! +               [ shift and go to state 28 ]
  ! -               [ shift and go to state 29 ]
  ! MPLUS           [ shift and go to state 32 ]
  ! MMINUS          [ shift and go to state 33 ]
  ! EQ              [ shift and go to state 36 ]
  ! NEQ             [ shift and go to state 37 ]
  ! GTEQ            [ shift and go to state 38 ]
  ! LTEQ            [ shift and go to state 39 ]
  ! >               [ shift and go to state 40 ]
  ! <               [ shift and go to state 41 ]


state 62

    (38) expr -> expr * expr .
    (21) expr -> expr . '
    (36) expr -> expr . + expr
    (37) expr -> expr . - expr
    (38) expr -> expr . * expr
    (39) expr -> expr . / expr
    (40) expr -> expr . MPLUS expr
    (41) expr -> expr . MMINUS expr
    (42) expr -> expr . MMLTP expr
    (43) expr -> expr . MDIV expr
    (44) expr -> expr . EQ expr
    (45) expr -> expr . NEQ expr
    (46) expr -> expr . GTEQ expr
    (47) expr -> expr . LTEQ expr
    (48) expr -> expr . > expr
    (49) expr -> expr . < expr

    ;               reduce using rule 38 (expr -> expr * expr .)
    +               reduce using rule 38 (expr -> expr * expr .)
    -               reduce using rule 38 (expr -> expr * expr .)
    *               reduce using rule 38 (expr -> expr * expr .)
    /               reduce using rule 38 (expr -> expr * expr .)
    MPLUS           reduce using rule 38 (expr -> expr * expr .)
    MMINUS          reduce using rule 38 (expr -> expr * expr .)
    MMLTP           reduce using rule 38 (expr -> expr * expr .)
    MDIV            reduce using rule 38 (expr -> expr * expr .)
    EQ              reduce using rule 38 (expr -> expr * expr .)
    NEQ             reduce using rule 38 (expr -> expr * expr .)
    GTEQ            reduce using rule 38 (expr -> expr * expr .)
    LTEQ            reduce using rule 38 (expr -> expr * expr .)
    >               reduce using rule 38 (expr -> expr * expr .)
    <               reduce using rule 38 (expr -> expr * expr .)
    )               reduce using rule 38 (expr -> expr * expr .)
    ]               reduce using rule 38 (expr -> expr * expr .)
    ,               reduce using rule 38 (expr -> expr * expr .)
    :               reduce using rule 38 (expr -> expr * expr .)
    {               reduce using rule 38 (expr -> expr * expr .)
    INTNUM          reduce using rule 38 (expr -> expr * expr .)
    FLOATNUM        reduce using rule 38 (expr -> expr * expr .)
    STRING          reduce using rule 38 (expr -> expr * expr .)
    (               reduce using rule 38 (expr -> expr * expr .)
    [               reduce using rule 38 (expr -> expr * expr .)
    BREAK           reduce using rule 38 (expr -> expr * expr .)
    CONTINUE        reduce using rule 38 (expr -> expr * expr .)
    RETURN          reduce using rule 38 (expr -> expr * expr .)
    PRINT           reduce using rule 38 (expr -> expr * expr .)
    ID              reduce using rule 38 (expr -> expr * expr .)
    IF              reduce using rule 38 (expr -> expr * expr .)
    WHILE           reduce using rule 38 (expr -> expr * expr .)
    FOR             reduce using rule 38 (expr -> expr * expr .)
    '               shift and go to state 27

  ! '               [ reduce using rule 38 (expr -> expr * expr .) ]
  ! +               [ shift and go to state 28 ]
  ! -               [ shift and go to state 29 ]
  ! *               [ shift and go to state 30 ]
  ! /               [ shift and go to state 31 ]
  ! MPLUS           [ shift and go to state 32 ]
  ! MMINUS          [ shift and go to state 33 ]
  ! MMLTP           [ shift and go to state 34 ]
  ! MDIV            [ shift and go to state 35 ]
  ! EQ              [ shift and go to state 36 ]
  ! NEQ             [ shift and go to state 37 ]
  ! GTEQ            [ shift and go to state 38 ]
  ! LTEQ            [ shift and go to state 39 ]
  ! >               [ shift and go to state 40 ]
  ! <               [ shift and go to state 41 ]


state 63

    (39) expr -> expr / expr .
    (21) expr -> expr . '
    (36) expr -> expr . + expr
    (37) expr -> expr . - expr
    (38) expr -> expr . * expr
    (39) expr -> expr . / expr
    (40) expr -> expr . MPLUS expr
    (41) expr -> expr . MMINUS expr
    (42) expr -> expr . MMLTP expr
    (43) expr -> expr . MDIV expr
    (44) expr -> expr . EQ expr
    (45) expr -> expr . NEQ expr
    (46) expr -> expr . GTEQ expr
    (47) expr -> expr . LTEQ expr
    (48) expr -> expr . > expr
    (49) expr -> expr . < expr

    ;               reduce using rule 39 (expr -> expr / expr .)
    +               reduce using rule 39 (expr -> expr / expr .)
    -               reduce using rule 39 (expr -> expr / expr .)
    *               reduce using rule 39 (expr -> expr / expr .)
    /               reduce using rule 39 (expr -> expr / expr .)
    MPLUS           reduce using rule 39 (expr -> expr / expr .)
    MMINUS          reduce using rule 39 (expr -> expr / expr .)
    MMLTP           reduce using rule 39 (expr -> expr / expr .)
    MDIV            reduce using rule 39 (expr -> expr / expr .)
    EQ              reduce using rule 39 (expr -> expr / expr .)
    NEQ             reduce using rule 39 (expr -> expr / expr .)
    GTEQ            reduce using rule 39 (expr -> expr / expr .)
    LTEQ            reduce using rule 39 (expr -> expr / expr .)
    >               reduce using rule 39 (expr -> expr / expr .)
    <               reduce using rule 39 (expr -> expr / expr .)
    )               reduce using rule 39 (expr -> expr / expr .)
    ]               reduce using rule 39 (expr -> expr / expr .)
    ,               reduce using rule 39 (expr -> expr / expr .)
    :               reduce using rule 39 (expr -> expr / expr .)
    {               reduce using rule 39 (expr -> expr / expr .)
    INTNUM          reduce using rule 39 (expr -> expr / expr .)
    FLOATNUM        reduce using rule 39 (expr -> expr / expr .)
    STRING          reduce using rule 39 (expr -> expr / expr .)
    (               reduce using rule 39 (expr -> expr / expr .)
    [               reduce using rule 39 (expr -> expr / expr .)
    BREAK           reduce using rule 39 (expr -> expr / expr .)
    CONTINUE        reduce using rule 39 (expr -> expr / expr .)
    RETURN          reduce using rule 39 (expr -> expr / expr .)
    PRINT           reduce using rule 39 (expr -> expr / expr .)
    ID              reduce using rule 39 (expr -> expr / expr .)
    IF              reduce using rule 39 (expr -> expr / expr .)
    WHILE           reduce using rule 39 (expr -> expr / expr .)
    FOR             reduce using rule 39 (expr -> expr / expr .)
    '               shift and go to state 27

  ! '               [ reduce using rule 39 (expr -> expr / expr .) ]
  ! +               [ shift and go to state 28 ]
  ! -               [ shift and go to state 29 ]
  ! *               [ shift and go to state 30 ]
  ! /               [ shift and go to state 31 ]
  ! MPLUS           [ shift and go to state 32 ]
  ! MMINUS          [ shift and go to state 33 ]
  ! MMLTP           [ shift and go to state 34 ]
  ! MDIV            [ shift and go to state 35 ]
  ! EQ              [ shift and go to state 36 ]
  ! NEQ             [ shift and go to state 37 ]
  ! GTEQ            [ shift and go to state 38 ]
  ! LTEQ            [ shift and go to state 39 ]
  ! >               [ shift and go to state 40 ]
  ! <               [ shift and go to state 41 ]


state 64

    (40) expr -> expr MPLUS expr .
    (21) expr -> expr . '
    (36) expr -> expr . + expr
    (37) expr -> expr . - expr
    (38) expr -> expr . * expr
    (39) expr -> expr . / expr
    (40) expr -> expr . MPLUS expr
    (41) expr -> expr . MMINUS expr
    (42) expr -> expr . MMLTP expr
    (43) expr -> expr . MDIV expr
    (44) expr -> expr . EQ expr
    (45) expr -> expr . NEQ expr
    (46) expr -> expr . GTEQ expr
    (47) expr -> expr . LTEQ expr
    (48) expr -> expr . > expr
    (49) expr -> expr . < expr

    ;               reduce using rule 40 (expr -> expr MPLUS expr .)
    +               reduce using rule 40 (expr -> expr MPLUS expr .)
    -               reduce using rule 40 (expr -> expr MPLUS expr .)
    MPLUS           reduce using rule 40 (expr -> expr MPLUS expr .)
    MMINUS          reduce using rule 40 (expr -> expr MPLUS expr .)
    EQ              reduce using rule 40 (expr -> expr MPLUS expr .)
    NEQ             reduce using rule 40 (expr -> expr MPLUS expr .)
    GTEQ            reduce using rule 40 (expr -> expr MPLUS expr .)
    LTEQ            reduce using rule 40 (expr -> expr MPLUS expr .)
    >               reduce using rule 40 (expr -> expr MPLUS expr .)
    <               reduce using rule 40 (expr -> expr MPLUS expr .)
    )               reduce using rule 40 (expr -> expr MPLUS expr .)
    ]               reduce using rule 40 (expr -> expr MPLUS expr .)
    ,               reduce using rule 40 (expr -> expr MPLUS expr .)
    :               reduce using rule 40 (expr -> expr MPLUS expr .)
    {               reduce using rule 40 (expr -> expr MPLUS expr .)
    INTNUM          reduce using rule 40 (expr -> expr MPLUS expr .)
    FLOATNUM        reduce using rule 40 (expr -> expr MPLUS expr .)
    STRING          reduce using rule 40 (expr -> expr MPLUS expr .)
    (               reduce using rule 40 (expr -> expr MPLUS expr .)
    [               reduce using rule 40 (expr -> expr MPLUS expr .)
    BREAK           reduce using rule 40 (expr -> expr MPLUS expr .)
    CONTINUE        reduce using rule 40 (expr -> expr MPLUS expr .)
    RETURN          reduce using rule 40 (expr -> expr MPLUS expr .)
    PRINT           reduce using rule 40 (expr -> expr MPLUS expr .)
    ID              reduce using rule 40 (expr -> expr MPLUS expr .)
    IF              reduce using rule 40 (expr -> expr MPLUS expr .)
    WHILE           reduce using rule 40 (expr -> expr MPLUS expr .)
    FOR             reduce using rule 40 (expr -> expr MPLUS expr .)
    '               shift and go to state 27
    *               shift and go to state 30
    /               shift and go to state 31
    MMLTP           shift and go to state 34
    MDIV            shift and go to state 35

  ! '               [ reduce using rule 40 (expr -> expr MPLUS expr .) ]
  ! *               [ reduce using rule 40 (expr -> expr MPLUS expr .) ]
  ! /               [ reduce using rule 40 (expr -> expr MPLUS expr .) ]
  ! MMLTP           [ reduce using rule 40 (expr -> expr MPLUS expr .) ]
  ! MDIV            [ reduce using rule 40 (expr -> expr MPLUS expr .) ]
  ! +               [ shift and go to state 28 ]
  ! -               [ shift and go to state 29 ]
  ! MPLUS           [ shift and go to state 32 ]
  ! MMINUS          [ shift and go to state 33 ]
  ! EQ              [ shift and go to state 36 ]
  ! NEQ             [ shift and go to state 37 ]
  ! GTEQ            [ shift and go to state 38 ]
  ! LTEQ            [ shift and go to state 39 ]
  ! >               [ shift and go to state 40 ]
  ! <               [ shift and go to state 41 ]


state 65

    (41) expr -> expr MMINUS expr .
    (21) expr -> expr . '
    (36) expr -> expr . + expr
    (37) expr -> expr . - expr
    (38) expr -> expr . * expr
    (39) expr -> expr . / expr
    (40) expr -> expr . MPLUS expr
    (41) expr -> expr . MMINUS expr
    (42) expr -> expr . MMLTP expr
    (43) expr -> expr . MDIV expr
    (44) expr -> expr . EQ expr
    (45) expr -> expr . NEQ expr
    (46) expr -> expr . GTEQ expr
    (47) expr -> expr . LTEQ expr
    (48) expr -> expr . > expr
    (49) expr -> expr . < expr

    ;               reduce using rule 41 (expr -> expr MMINUS expr .)
    +               reduce using rule 41 (expr -> expr MMINUS expr .)
    -               reduce using rule 41 (expr -> expr MMINUS expr .)
    MPLUS           reduce using rule 41 (expr -> expr MMINUS expr .)
    MMINUS          reduce using rule 41 (expr -> expr MMINUS expr .)
    EQ              reduce using rule 41 (expr -> expr MMINUS expr .)
    NEQ             reduce using rule 41 (expr -> expr MMINUS expr .)
    GTEQ            reduce using rule 41 (expr -> expr MMINUS expr .)
    LTEQ            reduce using rule 41 (expr -> expr MMINUS expr .)
    >               reduce using rule 41 (expr -> expr MMINUS expr .)
    <               reduce using rule 41 (expr -> expr MMINUS expr .)
    )               reduce using rule 41 (expr -> expr MMINUS expr .)
    ]               reduce using rule 41 (expr -> expr MMINUS expr .)
    ,               reduce using rule 41 (expr -> expr MMINUS expr .)
    :               reduce using rule 41 (expr -> expr MMINUS expr .)
    {               reduce using rule 41 (expr -> expr MMINUS expr .)
    INTNUM          reduce using rule 41 (expr -> expr MMINUS expr .)
    FLOATNUM        reduce using rule 41 (expr -> expr MMINUS expr .)
    STRING          reduce using rule 41 (expr -> expr MMINUS expr .)
    (               reduce using rule 41 (expr -> expr MMINUS expr .)
    [               reduce using rule 41 (expr -> expr MMINUS expr .)
    BREAK           reduce using rule 41 (expr -> expr MMINUS expr .)
    CONTINUE        reduce using rule 41 (expr -> expr MMINUS expr .)
    RETURN          reduce using rule 41 (expr -> expr MMINUS expr .)
    PRINT           reduce using rule 41 (expr -> expr MMINUS expr .)
    ID              reduce using rule 41 (expr -> expr MMINUS expr .)
    IF              reduce using rule 41 (expr -> expr MMINUS expr .)
    WHILE           reduce using rule 41 (expr -> expr MMINUS expr .)
    FOR             reduce using rule 41 (expr -> expr MMINUS expr .)
    '               shift and go to state 27
    *               shift and go to state 30
    /               shift and go to state 31
    MMLTP           shift and go to state 34
    MDIV            shift and go to state 35

  ! '               [ reduce using rule 41 (expr -> expr MMINUS expr .) ]
  ! *               [ reduce using rule 41 (expr -> expr MMINUS expr .) ]
  ! /               [ reduce using rule 41 (expr -> expr MMINUS expr .) ]
  ! MMLTP           [ reduce using rule 41 (expr -> expr MMINUS expr .) ]
  ! MDIV            [ reduce using rule 41 (expr -> expr MMINUS expr .) ]
  ! +               [ shift and go to state 28 ]
  ! -               [ shift and go to state 29 ]
  ! MPLUS           [ shift and go to state 32 ]
  ! MMINUS          [ shift and go to state 33 ]
  ! EQ              [ shift and go to state 36 ]
  ! NEQ             [ shift and go to state 37 ]
  ! GTEQ            [ shift and go to state 38 ]
  ! LTEQ            [ shift and go to state 39 ]
  ! >               [ shift and go to state 40 ]
  ! <               [ shift and go to state 41 ]


state 66

    (42) expr -> expr MMLTP expr .
    (21) expr -> expr . '
    (36) expr -> expr . + expr
    (37) expr -> expr . - expr
    (38) expr -> expr . * expr
    (39) expr -> expr . / expr
    (40) expr -> expr . MPLUS expr
    (41) expr -> expr . MMINUS expr
    (42) expr -> expr . MMLTP expr
    (43) expr -> expr . MDIV expr
    (44) expr -> expr . EQ expr
    (45) expr -> expr . NEQ expr
    (46) expr -> expr . GTEQ expr
    (47) expr -> expr . LTEQ expr
    (48) expr -> expr . > expr
    (49) expr -> expr . < expr

    ;               reduce using rule 42 (expr -> expr MMLTP expr .)
    +               reduce using rule 42 (expr -> expr MMLTP expr .)
    -               reduce using rule 42 (expr -> expr MMLTP expr .)
    *               reduce using rule 42 (expr -> expr MMLTP expr .)
    /               reduce using rule 42 (expr -> expr MMLTP expr .)
    MPLUS           reduce using rule 42 (expr -> expr MMLTP expr .)
    MMINUS          reduce using rule 42 (expr -> expr MMLTP expr .)
    MMLTP           reduce using rule 42 (expr -> expr MMLTP expr .)
    MDIV            reduce using rule 42 (expr -> expr MMLTP expr .)
    EQ              reduce using rule 42 (expr -> expr MMLTP expr .)
    NEQ             reduce using rule 42 (expr -> expr MMLTP expr .)
    GTEQ            reduce using rule 42 (expr -> expr MMLTP expr .)
    LTEQ            reduce using rule 42 (expr -> expr MMLTP expr .)
    >               reduce using rule 42 (expr -> expr MMLTP expr .)
    <               reduce using rule 42 (expr -> expr MMLTP expr .)
    )               reduce using rule 42 (expr -> expr MMLTP expr .)
    ]               reduce using rule 42 (expr -> expr MMLTP expr .)
    ,               reduce using rule 42 (expr -> expr MMLTP expr .)
    :               reduce using rule 42 (expr -> expr MMLTP expr .)
    {               reduce using rule 42 (expr -> expr MMLTP expr .)
    INTNUM          reduce using rule 42 (expr -> expr MMLTP expr .)
    FLOATNUM        reduce using rule 42 (expr -> expr MMLTP expr .)
    STRING          reduce using rule 42 (expr -> expr MMLTP expr .)
    (               reduce using rule 42 (expr -> expr MMLTP expr .)
    [               reduce using rule 42 (expr -> expr MMLTP expr .)
    BREAK           reduce using rule 42 (expr -> expr MMLTP expr .)
    CONTINUE        reduce using rule 42 (expr -> expr MMLTP expr .)
    RETURN          reduce using rule 42 (expr -> expr MMLTP expr .)
    PRINT           reduce using rule 42 (expr -> expr MMLTP expr .)
    ID              reduce using rule 42 (expr -> expr MMLTP expr .)
    IF              reduce using rule 42 (expr -> expr MMLTP expr .)
    WHILE           reduce using rule 42 (expr -> expr MMLTP expr .)
    FOR             reduce using rule 42 (expr -> expr MMLTP expr .)
    '               shift and go to state 27

  ! '               [ reduce using rule 42 (expr -> expr MMLTP expr .) ]
  ! +               [ shift and go to state 28 ]
  ! -               [ shift and go to state 29 ]
  ! *               [ shift and go to state 30 ]
  ! /               [ shift and go to state 31 ]
  ! MPLUS           [ shift and go to state 32 ]
  ! MMINUS          [ shift and go to state 33 ]
  ! MMLTP           [ shift and go to state 34 ]
  ! MDIV            [ shift and go to state 35 ]
  ! EQ              [ shift and go to state 36 ]
  ! NEQ             [ shift and go to state 37 ]
  ! GTEQ            [ shift and go to state 38 ]
  ! LTEQ            [ shift and go to state 39 ]
  ! >               [ shift and go to state 40 ]
  ! <               [ shift and go to state 41 ]


state 67

    (43) expr -> expr MDIV expr .
    (21) expr -> expr . '
    (36) expr -> expr . + expr
    (37) expr -> expr . - expr
    (38) expr -> expr . * expr
    (39) expr -> expr . / expr
    (40) expr -> expr . MPLUS expr
    (41) expr -> expr . MMINUS expr
    (42) expr -> expr . MMLTP expr
    (43) expr -> expr . MDIV expr
    (44) expr -> expr . EQ expr
    (45) expr -> expr . NEQ expr
    (46) expr -> expr . GTEQ expr
    (47) expr -> expr . LTEQ expr
    (48) expr -> expr . > expr
    (49) expr -> expr . < expr

    ;               reduce using rule 43 (expr -> expr MDIV expr .)
    +               reduce using rule 43 (expr -> expr MDIV expr .)
    -               reduce using rule 43 (expr -> expr MDIV expr .)
    *               reduce using rule 43 (expr -> expr MDIV expr .)
    /               reduce using rule 43 (expr -> expr MDIV expr .)
    MPLUS           reduce using rule 43 (expr -> expr MDIV expr .)
    MMINUS          reduce using rule 43 (expr -> expr MDIV expr .)
    MMLTP           reduce using rule 43 (expr -> expr MDIV expr .)
    MDIV            reduce using rule 43 (expr -> expr MDIV expr .)
    EQ              reduce using rule 43 (expr -> expr MDIV expr .)
    NEQ             reduce using rule 43 (expr -> expr MDIV expr .)
    GTEQ            reduce using rule 43 (expr -> expr MDIV expr .)
    LTEQ            reduce using rule 43 (expr -> expr MDIV expr .)
    >               reduce using rule 43 (expr -> expr MDIV expr .)
    <               reduce using rule 43 (expr -> expr MDIV expr .)
    )               reduce using rule 43 (expr -> expr MDIV expr .)
    ]               reduce using rule 43 (expr -> expr MDIV expr .)
    ,               reduce using rule 43 (expr -> expr MDIV expr .)
    :               reduce using rule 43 (expr -> expr MDIV expr .)
    {               reduce using rule 43 (expr -> expr MDIV expr .)
    INTNUM          reduce using rule 43 (expr -> expr MDIV expr .)
    FLOATNUM        reduce using rule 43 (expr -> expr MDIV expr .)
    STRING          reduce using rule 43 (expr -> expr MDIV expr .)
    (               reduce using rule 43 (expr -> expr MDIV expr .)
    [               reduce using rule 43 (expr -> expr MDIV expr .)
    BREAK           reduce using rule 43 (expr -> expr MDIV expr .)
    CONTINUE        reduce using rule 43 (expr -> expr MDIV expr .)
    RETURN          reduce using rule 43 (expr -> expr MDIV expr .)
    PRINT           reduce using rule 43 (expr -> expr MDIV expr .)
    ID              reduce using rule 43 (expr -> expr MDIV expr .)
    IF              reduce using rule 43 (expr -> expr MDIV expr .)
    WHILE           reduce using rule 43 (expr -> expr MDIV expr .)
    FOR             reduce using rule 43 (expr -> expr MDIV expr .)
    '               shift and go to state 27

  ! '               [ reduce using rule 43 (expr -> expr MDIV expr .) ]
  ! +               [ shift and go to state 28 ]
  ! -               [ shift and go to state 29 ]
  ! *               [ shift and go to state 30 ]
  ! /               [ shift and go to state 31 ]
  ! MPLUS           [ shift and go to state 32 ]
  ! MMINUS          [ shift and go to state 33 ]
  ! MMLTP           [ shift and go to state 34 ]
  ! MDIV            [ shift and go to state 35 ]
  ! EQ              [ shift and go to state 36 ]
  ! NEQ             [ shift and go to state 37 ]
  ! GTEQ            [ shift and go to state 38 ]
  ! LTEQ            [ shift and go to state 39 ]
  ! >               [ shift and go to state 40 ]
  ! <               [ shift and go to state 41 ]


state 68

    (44) expr -> expr EQ expr .
    (21) expr -> expr . '
    (36) expr -> expr . + expr
    (37) expr -> expr . - expr
    (38) expr -> expr . * expr
    (39) expr -> expr . / expr
    (40) expr -> expr . MPLUS expr
    (41) expr -> expr . MMINUS expr
    (42) expr -> expr . MMLTP expr
    (43) expr -> expr . MDIV expr
    (44) expr -> expr . EQ expr
    (45) expr -> expr . NEQ expr
    (46) expr -> expr . GTEQ expr
    (47) expr -> expr . LTEQ expr
    (48) expr -> expr . > expr
    (49) expr -> expr . < expr

  ! shift/reduce conflict for ' resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for MPLUS resolved as shift
  ! shift/reduce conflict for MMINUS resolved as shift
  ! shift/reduce conflict for MMLTP resolved as shift
  ! shift/reduce conflict for MDIV resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for GTEQ resolved as shift
  ! shift/reduce conflict for LTEQ resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for < resolved as shift
    ;               reduce using rule 44 (expr -> expr EQ expr .)
    )               reduce using rule 44 (expr -> expr EQ expr .)
    ]               reduce using rule 44 (expr -> expr EQ expr .)
    ,               reduce using rule 44 (expr -> expr EQ expr .)
    :               reduce using rule 44 (expr -> expr EQ expr .)
    {               reduce using rule 44 (expr -> expr EQ expr .)
    INTNUM          reduce using rule 44 (expr -> expr EQ expr .)
    FLOATNUM        reduce using rule 44 (expr -> expr EQ expr .)
    STRING          reduce using rule 44 (expr -> expr EQ expr .)
    (               reduce using rule 44 (expr -> expr EQ expr .)
    [               reduce using rule 44 (expr -> expr EQ expr .)
    BREAK           reduce using rule 44 (expr -> expr EQ expr .)
    CONTINUE        reduce using rule 44 (expr -> expr EQ expr .)
    RETURN          reduce using rule 44 (expr -> expr EQ expr .)
    PRINT           reduce using rule 44 (expr -> expr EQ expr .)
    ID              reduce using rule 44 (expr -> expr EQ expr .)
    IF              reduce using rule 44 (expr -> expr EQ expr .)
    WHILE           reduce using rule 44 (expr -> expr EQ expr .)
    FOR             reduce using rule 44 (expr -> expr EQ expr .)
    '               shift and go to state 27
    +               shift and go to state 28
    -               shift and go to state 29
    *               shift and go to state 30
    /               shift and go to state 31
    MPLUS           shift and go to state 32
    MMINUS          shift and go to state 33
    MMLTP           shift and go to state 34
    MDIV            shift and go to state 35
    EQ              shift and go to state 36
    NEQ             shift and go to state 37
    GTEQ            shift and go to state 38
    LTEQ            shift and go to state 39
    >               shift and go to state 40
    <               shift and go to state 41

  ! '               [ reduce using rule 44 (expr -> expr EQ expr .) ]
  ! +               [ reduce using rule 44 (expr -> expr EQ expr .) ]
  ! -               [ reduce using rule 44 (expr -> expr EQ expr .) ]
  ! *               [ reduce using rule 44 (expr -> expr EQ expr .) ]
  ! /               [ reduce using rule 44 (expr -> expr EQ expr .) ]
  ! MPLUS           [ reduce using rule 44 (expr -> expr EQ expr .) ]
  ! MMINUS          [ reduce using rule 44 (expr -> expr EQ expr .) ]
  ! MMLTP           [ reduce using rule 44 (expr -> expr EQ expr .) ]
  ! MDIV            [ reduce using rule 44 (expr -> expr EQ expr .) ]
  ! EQ              [ reduce using rule 44 (expr -> expr EQ expr .) ]
  ! NEQ             [ reduce using rule 44 (expr -> expr EQ expr .) ]
  ! GTEQ            [ reduce using rule 44 (expr -> expr EQ expr .) ]
  ! LTEQ            [ reduce using rule 44 (expr -> expr EQ expr .) ]
  ! >               [ reduce using rule 44 (expr -> expr EQ expr .) ]
  ! <               [ reduce using rule 44 (expr -> expr EQ expr .) ]


state 69

    (45) expr -> expr NEQ expr .
    (21) expr -> expr . '
    (36) expr -> expr . + expr
    (37) expr -> expr . - expr
    (38) expr -> expr . * expr
    (39) expr -> expr . / expr
    (40) expr -> expr . MPLUS expr
    (41) expr -> expr . MMINUS expr
    (42) expr -> expr . MMLTP expr
    (43) expr -> expr . MDIV expr
    (44) expr -> expr . EQ expr
    (45) expr -> expr . NEQ expr
    (46) expr -> expr . GTEQ expr
    (47) expr -> expr . LTEQ expr
    (48) expr -> expr . > expr
    (49) expr -> expr . < expr

  ! shift/reduce conflict for ' resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for MPLUS resolved as shift
  ! shift/reduce conflict for MMINUS resolved as shift
  ! shift/reduce conflict for MMLTP resolved as shift
  ! shift/reduce conflict for MDIV resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for GTEQ resolved as shift
  ! shift/reduce conflict for LTEQ resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for < resolved as shift
    ;               reduce using rule 45 (expr -> expr NEQ expr .)
    )               reduce using rule 45 (expr -> expr NEQ expr .)
    ]               reduce using rule 45 (expr -> expr NEQ expr .)
    ,               reduce using rule 45 (expr -> expr NEQ expr .)
    :               reduce using rule 45 (expr -> expr NEQ expr .)
    {               reduce using rule 45 (expr -> expr NEQ expr .)
    INTNUM          reduce using rule 45 (expr -> expr NEQ expr .)
    FLOATNUM        reduce using rule 45 (expr -> expr NEQ expr .)
    STRING          reduce using rule 45 (expr -> expr NEQ expr .)
    (               reduce using rule 45 (expr -> expr NEQ expr .)
    [               reduce using rule 45 (expr -> expr NEQ expr .)
    BREAK           reduce using rule 45 (expr -> expr NEQ expr .)
    CONTINUE        reduce using rule 45 (expr -> expr NEQ expr .)
    RETURN          reduce using rule 45 (expr -> expr NEQ expr .)
    PRINT           reduce using rule 45 (expr -> expr NEQ expr .)
    ID              reduce using rule 45 (expr -> expr NEQ expr .)
    IF              reduce using rule 45 (expr -> expr NEQ expr .)
    WHILE           reduce using rule 45 (expr -> expr NEQ expr .)
    FOR             reduce using rule 45 (expr -> expr NEQ expr .)
    '               shift and go to state 27
    +               shift and go to state 28
    -               shift and go to state 29
    *               shift and go to state 30
    /               shift and go to state 31
    MPLUS           shift and go to state 32
    MMINUS          shift and go to state 33
    MMLTP           shift and go to state 34
    MDIV            shift and go to state 35
    EQ              shift and go to state 36
    NEQ             shift and go to state 37
    GTEQ            shift and go to state 38
    LTEQ            shift and go to state 39
    >               shift and go to state 40
    <               shift and go to state 41

  ! '               [ reduce using rule 45 (expr -> expr NEQ expr .) ]
  ! +               [ reduce using rule 45 (expr -> expr NEQ expr .) ]
  ! -               [ reduce using rule 45 (expr -> expr NEQ expr .) ]
  ! *               [ reduce using rule 45 (expr -> expr NEQ expr .) ]
  ! /               [ reduce using rule 45 (expr -> expr NEQ expr .) ]
  ! MPLUS           [ reduce using rule 45 (expr -> expr NEQ expr .) ]
  ! MMINUS          [ reduce using rule 45 (expr -> expr NEQ expr .) ]
  ! MMLTP           [ reduce using rule 45 (expr -> expr NEQ expr .) ]
  ! MDIV            [ reduce using rule 45 (expr -> expr NEQ expr .) ]
  ! EQ              [ reduce using rule 45 (expr -> expr NEQ expr .) ]
  ! NEQ             [ reduce using rule 45 (expr -> expr NEQ expr .) ]
  ! GTEQ            [ reduce using rule 45 (expr -> expr NEQ expr .) ]
  ! LTEQ            [ reduce using rule 45 (expr -> expr NEQ expr .) ]
  ! >               [ reduce using rule 45 (expr -> expr NEQ expr .) ]
  ! <               [ reduce using rule 45 (expr -> expr NEQ expr .) ]


state 70

    (46) expr -> expr GTEQ expr .
    (21) expr -> expr . '
    (36) expr -> expr . + expr
    (37) expr -> expr . - expr
    (38) expr -> expr . * expr
    (39) expr -> expr . / expr
    (40) expr -> expr . MPLUS expr
    (41) expr -> expr . MMINUS expr
    (42) expr -> expr . MMLTP expr
    (43) expr -> expr . MDIV expr
    (44) expr -> expr . EQ expr
    (45) expr -> expr . NEQ expr
    (46) expr -> expr . GTEQ expr
    (47) expr -> expr . LTEQ expr
    (48) expr -> expr . > expr
    (49) expr -> expr . < expr

  ! shift/reduce conflict for ' resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for MPLUS resolved as shift
  ! shift/reduce conflict for MMINUS resolved as shift
  ! shift/reduce conflict for MMLTP resolved as shift
  ! shift/reduce conflict for MDIV resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for GTEQ resolved as shift
  ! shift/reduce conflict for LTEQ resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for < resolved as shift
    ;               reduce using rule 46 (expr -> expr GTEQ expr .)
    )               reduce using rule 46 (expr -> expr GTEQ expr .)
    ]               reduce using rule 46 (expr -> expr GTEQ expr .)
    ,               reduce using rule 46 (expr -> expr GTEQ expr .)
    :               reduce using rule 46 (expr -> expr GTEQ expr .)
    {               reduce using rule 46 (expr -> expr GTEQ expr .)
    INTNUM          reduce using rule 46 (expr -> expr GTEQ expr .)
    FLOATNUM        reduce using rule 46 (expr -> expr GTEQ expr .)
    STRING          reduce using rule 46 (expr -> expr GTEQ expr .)
    (               reduce using rule 46 (expr -> expr GTEQ expr .)
    [               reduce using rule 46 (expr -> expr GTEQ expr .)
    BREAK           reduce using rule 46 (expr -> expr GTEQ expr .)
    CONTINUE        reduce using rule 46 (expr -> expr GTEQ expr .)
    RETURN          reduce using rule 46 (expr -> expr GTEQ expr .)
    PRINT           reduce using rule 46 (expr -> expr GTEQ expr .)
    ID              reduce using rule 46 (expr -> expr GTEQ expr .)
    IF              reduce using rule 46 (expr -> expr GTEQ expr .)
    WHILE           reduce using rule 46 (expr -> expr GTEQ expr .)
    FOR             reduce using rule 46 (expr -> expr GTEQ expr .)
    '               shift and go to state 27
    +               shift and go to state 28
    -               shift and go to state 29
    *               shift and go to state 30
    /               shift and go to state 31
    MPLUS           shift and go to state 32
    MMINUS          shift and go to state 33
    MMLTP           shift and go to state 34
    MDIV            shift and go to state 35
    EQ              shift and go to state 36
    NEQ             shift and go to state 37
    GTEQ            shift and go to state 38
    LTEQ            shift and go to state 39
    >               shift and go to state 40
    <               shift and go to state 41

  ! '               [ reduce using rule 46 (expr -> expr GTEQ expr .) ]
  ! +               [ reduce using rule 46 (expr -> expr GTEQ expr .) ]
  ! -               [ reduce using rule 46 (expr -> expr GTEQ expr .) ]
  ! *               [ reduce using rule 46 (expr -> expr GTEQ expr .) ]
  ! /               [ reduce using rule 46 (expr -> expr GTEQ expr .) ]
  ! MPLUS           [ reduce using rule 46 (expr -> expr GTEQ expr .) ]
  ! MMINUS          [ reduce using rule 46 (expr -> expr GTEQ expr .) ]
  ! MMLTP           [ reduce using rule 46 (expr -> expr GTEQ expr .) ]
  ! MDIV            [ reduce using rule 46 (expr -> expr GTEQ expr .) ]
  ! EQ              [ reduce using rule 46 (expr -> expr GTEQ expr .) ]
  ! NEQ             [ reduce using rule 46 (expr -> expr GTEQ expr .) ]
  ! GTEQ            [ reduce using rule 46 (expr -> expr GTEQ expr .) ]
  ! LTEQ            [ reduce using rule 46 (expr -> expr GTEQ expr .) ]
  ! >               [ reduce using rule 46 (expr -> expr GTEQ expr .) ]
  ! <               [ reduce using rule 46 (expr -> expr GTEQ expr .) ]


state 71

    (47) expr -> expr LTEQ expr .
    (21) expr -> expr . '
    (36) expr -> expr . + expr
    (37) expr -> expr . - expr
    (38) expr -> expr . * expr
    (39) expr -> expr . / expr
    (40) expr -> expr . MPLUS expr
    (41) expr -> expr . MMINUS expr
    (42) expr -> expr . MMLTP expr
    (43) expr -> expr . MDIV expr
    (44) expr -> expr . EQ expr
    (45) expr -> expr . NEQ expr
    (46) expr -> expr . GTEQ expr
    (47) expr -> expr . LTEQ expr
    (48) expr -> expr . > expr
    (49) expr -> expr . < expr

  ! shift/reduce conflict for ' resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for MPLUS resolved as shift
  ! shift/reduce conflict for MMINUS resolved as shift
  ! shift/reduce conflict for MMLTP resolved as shift
  ! shift/reduce conflict for MDIV resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for GTEQ resolved as shift
  ! shift/reduce conflict for LTEQ resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for < resolved as shift
    ;               reduce using rule 47 (expr -> expr LTEQ expr .)
    )               reduce using rule 47 (expr -> expr LTEQ expr .)
    ]               reduce using rule 47 (expr -> expr LTEQ expr .)
    ,               reduce using rule 47 (expr -> expr LTEQ expr .)
    :               reduce using rule 47 (expr -> expr LTEQ expr .)
    {               reduce using rule 47 (expr -> expr LTEQ expr .)
    INTNUM          reduce using rule 47 (expr -> expr LTEQ expr .)
    FLOATNUM        reduce using rule 47 (expr -> expr LTEQ expr .)
    STRING          reduce using rule 47 (expr -> expr LTEQ expr .)
    (               reduce using rule 47 (expr -> expr LTEQ expr .)
    [               reduce using rule 47 (expr -> expr LTEQ expr .)
    BREAK           reduce using rule 47 (expr -> expr LTEQ expr .)
    CONTINUE        reduce using rule 47 (expr -> expr LTEQ expr .)
    RETURN          reduce using rule 47 (expr -> expr LTEQ expr .)
    PRINT           reduce using rule 47 (expr -> expr LTEQ expr .)
    ID              reduce using rule 47 (expr -> expr LTEQ expr .)
    IF              reduce using rule 47 (expr -> expr LTEQ expr .)
    WHILE           reduce using rule 47 (expr -> expr LTEQ expr .)
    FOR             reduce using rule 47 (expr -> expr LTEQ expr .)
    '               shift and go to state 27
    +               shift and go to state 28
    -               shift and go to state 29
    *               shift and go to state 30
    /               shift and go to state 31
    MPLUS           shift and go to state 32
    MMINUS          shift and go to state 33
    MMLTP           shift and go to state 34
    MDIV            shift and go to state 35
    EQ              shift and go to state 36
    NEQ             shift and go to state 37
    GTEQ            shift and go to state 38
    LTEQ            shift and go to state 39
    >               shift and go to state 40
    <               shift and go to state 41

  ! '               [ reduce using rule 47 (expr -> expr LTEQ expr .) ]
  ! +               [ reduce using rule 47 (expr -> expr LTEQ expr .) ]
  ! -               [ reduce using rule 47 (expr -> expr LTEQ expr .) ]
  ! *               [ reduce using rule 47 (expr -> expr LTEQ expr .) ]
  ! /               [ reduce using rule 47 (expr -> expr LTEQ expr .) ]
  ! MPLUS           [ reduce using rule 47 (expr -> expr LTEQ expr .) ]
  ! MMINUS          [ reduce using rule 47 (expr -> expr LTEQ expr .) ]
  ! MMLTP           [ reduce using rule 47 (expr -> expr LTEQ expr .) ]
  ! MDIV            [ reduce using rule 47 (expr -> expr LTEQ expr .) ]
  ! EQ              [ reduce using rule 47 (expr -> expr LTEQ expr .) ]
  ! NEQ             [ reduce using rule 47 (expr -> expr LTEQ expr .) ]
  ! GTEQ            [ reduce using rule 47 (expr -> expr LTEQ expr .) ]
  ! LTEQ            [ reduce using rule 47 (expr -> expr LTEQ expr .) ]
  ! >               [ reduce using rule 47 (expr -> expr LTEQ expr .) ]
  ! <               [ reduce using rule 47 (expr -> expr LTEQ expr .) ]


state 72

    (48) expr -> expr > expr .
    (21) expr -> expr . '
    (36) expr -> expr . + expr
    (37) expr -> expr . - expr
    (38) expr -> expr . * expr
    (39) expr -> expr . / expr
    (40) expr -> expr . MPLUS expr
    (41) expr -> expr . MMINUS expr
    (42) expr -> expr . MMLTP expr
    (43) expr -> expr . MDIV expr
    (44) expr -> expr . EQ expr
    (45) expr -> expr . NEQ expr
    (46) expr -> expr . GTEQ expr
    (47) expr -> expr . LTEQ expr
    (48) expr -> expr . > expr
    (49) expr -> expr . < expr

  ! shift/reduce conflict for ' resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for MPLUS resolved as shift
  ! shift/reduce conflict for MMINUS resolved as shift
  ! shift/reduce conflict for MMLTP resolved as shift
  ! shift/reduce conflict for MDIV resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for GTEQ resolved as shift
  ! shift/reduce conflict for LTEQ resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for < resolved as shift
    ;               reduce using rule 48 (expr -> expr > expr .)
    )               reduce using rule 48 (expr -> expr > expr .)
    ]               reduce using rule 48 (expr -> expr > expr .)
    ,               reduce using rule 48 (expr -> expr > expr .)
    :               reduce using rule 48 (expr -> expr > expr .)
    {               reduce using rule 48 (expr -> expr > expr .)
    INTNUM          reduce using rule 48 (expr -> expr > expr .)
    FLOATNUM        reduce using rule 48 (expr -> expr > expr .)
    STRING          reduce using rule 48 (expr -> expr > expr .)
    (               reduce using rule 48 (expr -> expr > expr .)
    [               reduce using rule 48 (expr -> expr > expr .)
    BREAK           reduce using rule 48 (expr -> expr > expr .)
    CONTINUE        reduce using rule 48 (expr -> expr > expr .)
    RETURN          reduce using rule 48 (expr -> expr > expr .)
    PRINT           reduce using rule 48 (expr -> expr > expr .)
    ID              reduce using rule 48 (expr -> expr > expr .)
    IF              reduce using rule 48 (expr -> expr > expr .)
    WHILE           reduce using rule 48 (expr -> expr > expr .)
    FOR             reduce using rule 48 (expr -> expr > expr .)
    '               shift and go to state 27
    +               shift and go to state 28
    -               shift and go to state 29
    *               shift and go to state 30
    /               shift and go to state 31
    MPLUS           shift and go to state 32
    MMINUS          shift and go to state 33
    MMLTP           shift and go to state 34
    MDIV            shift and go to state 35
    EQ              shift and go to state 36
    NEQ             shift and go to state 37
    GTEQ            shift and go to state 38
    LTEQ            shift and go to state 39
    >               shift and go to state 40
    <               shift and go to state 41

  ! '               [ reduce using rule 48 (expr -> expr > expr .) ]
  ! +               [ reduce using rule 48 (expr -> expr > expr .) ]
  ! -               [ reduce using rule 48 (expr -> expr > expr .) ]
  ! *               [ reduce using rule 48 (expr -> expr > expr .) ]
  ! /               [ reduce using rule 48 (expr -> expr > expr .) ]
  ! MPLUS           [ reduce using rule 48 (expr -> expr > expr .) ]
  ! MMINUS          [ reduce using rule 48 (expr -> expr > expr .) ]
  ! MMLTP           [ reduce using rule 48 (expr -> expr > expr .) ]
  ! MDIV            [ reduce using rule 48 (expr -> expr > expr .) ]
  ! EQ              [ reduce using rule 48 (expr -> expr > expr .) ]
  ! NEQ             [ reduce using rule 48 (expr -> expr > expr .) ]
  ! GTEQ            [ reduce using rule 48 (expr -> expr > expr .) ]
  ! LTEQ            [ reduce using rule 48 (expr -> expr > expr .) ]
  ! >               [ reduce using rule 48 (expr -> expr > expr .) ]
  ! <               [ reduce using rule 48 (expr -> expr > expr .) ]


state 73

    (49) expr -> expr < expr .
    (21) expr -> expr . '
    (36) expr -> expr . + expr
    (37) expr -> expr . - expr
    (38) expr -> expr . * expr
    (39) expr -> expr . / expr
    (40) expr -> expr . MPLUS expr
    (41) expr -> expr . MMINUS expr
    (42) expr -> expr . MMLTP expr
    (43) expr -> expr . MDIV expr
    (44) expr -> expr . EQ expr
    (45) expr -> expr . NEQ expr
    (46) expr -> expr . GTEQ expr
    (47) expr -> expr . LTEQ expr
    (48) expr -> expr . > expr
    (49) expr -> expr . < expr

  ! shift/reduce conflict for ' resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for MPLUS resolved as shift
  ! shift/reduce conflict for MMINUS resolved as shift
  ! shift/reduce conflict for MMLTP resolved as shift
  ! shift/reduce conflict for MDIV resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for GTEQ resolved as shift
  ! shift/reduce conflict for LTEQ resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for < resolved as shift
    ;               reduce using rule 49 (expr -> expr < expr .)
    )               reduce using rule 49 (expr -> expr < expr .)
    ]               reduce using rule 49 (expr -> expr < expr .)
    ,               reduce using rule 49 (expr -> expr < expr .)
    :               reduce using rule 49 (expr -> expr < expr .)
    {               reduce using rule 49 (expr -> expr < expr .)
    INTNUM          reduce using rule 49 (expr -> expr < expr .)
    FLOATNUM        reduce using rule 49 (expr -> expr < expr .)
    STRING          reduce using rule 49 (expr -> expr < expr .)
    (               reduce using rule 49 (expr -> expr < expr .)
    [               reduce using rule 49 (expr -> expr < expr .)
    BREAK           reduce using rule 49 (expr -> expr < expr .)
    CONTINUE        reduce using rule 49 (expr -> expr < expr .)
    RETURN          reduce using rule 49 (expr -> expr < expr .)
    PRINT           reduce using rule 49 (expr -> expr < expr .)
    ID              reduce using rule 49 (expr -> expr < expr .)
    IF              reduce using rule 49 (expr -> expr < expr .)
    WHILE           reduce using rule 49 (expr -> expr < expr .)
    FOR             reduce using rule 49 (expr -> expr < expr .)
    '               shift and go to state 27
    +               shift and go to state 28
    -               shift and go to state 29
    *               shift and go to state 30
    /               shift and go to state 31
    MPLUS           shift and go to state 32
    MMINUS          shift and go to state 33
    MMLTP           shift and go to state 34
    MDIV            shift and go to state 35
    EQ              shift and go to state 36
    NEQ             shift and go to state 37
    GTEQ            shift and go to state 38
    LTEQ            shift and go to state 39
    >               shift and go to state 40
    <               shift and go to state 41

  ! '               [ reduce using rule 49 (expr -> expr < expr .) ]
  ! +               [ reduce using rule 49 (expr -> expr < expr .) ]
  ! -               [ reduce using rule 49 (expr -> expr < expr .) ]
  ! *               [ reduce using rule 49 (expr -> expr < expr .) ]
  ! /               [ reduce using rule 49 (expr -> expr < expr .) ]
  ! MPLUS           [ reduce using rule 49 (expr -> expr < expr .) ]
  ! MMINUS          [ reduce using rule 49 (expr -> expr < expr .) ]
  ! MMLTP           [ reduce using rule 49 (expr -> expr < expr .) ]
  ! MDIV            [ reduce using rule 49 (expr -> expr < expr .) ]
  ! EQ              [ reduce using rule 49 (expr -> expr < expr .) ]
  ! NEQ             [ reduce using rule 49 (expr -> expr < expr .) ]
  ! GTEQ            [ reduce using rule 49 (expr -> expr < expr .) ]
  ! LTEQ            [ reduce using rule 49 (expr -> expr < expr .) ]
  ! >               [ reduce using rule 49 (expr -> expr < expr .) ]
  ! <               [ reduce using rule 49 (expr -> expr < expr .) ]


state 74

    (28) expr -> lvalue = expr .
    (21) expr -> expr . '
    (36) expr -> expr . + expr
    (37) expr -> expr . - expr
    (38) expr -> expr . * expr
    (39) expr -> expr . / expr
    (40) expr -> expr . MPLUS expr
    (41) expr -> expr . MMINUS expr
    (42) expr -> expr . MMLTP expr
    (43) expr -> expr . MDIV expr
    (44) expr -> expr . EQ expr
    (45) expr -> expr . NEQ expr
    (46) expr -> expr . GTEQ expr
    (47) expr -> expr . LTEQ expr
    (48) expr -> expr . > expr
    (49) expr -> expr . < expr

    ;               reduce using rule 28 (expr -> lvalue = expr .)
    EQ              reduce using rule 28 (expr -> lvalue = expr .)
    NEQ             reduce using rule 28 (expr -> lvalue = expr .)
    GTEQ            reduce using rule 28 (expr -> lvalue = expr .)
    LTEQ            reduce using rule 28 (expr -> lvalue = expr .)
    >               reduce using rule 28 (expr -> lvalue = expr .)
    <               reduce using rule 28 (expr -> lvalue = expr .)
    )               reduce using rule 28 (expr -> lvalue = expr .)
    ]               reduce using rule 28 (expr -> lvalue = expr .)
    ,               reduce using rule 28 (expr -> lvalue = expr .)
    :               reduce using rule 28 (expr -> lvalue = expr .)
    {               reduce using rule 28 (expr -> lvalue = expr .)
    INTNUM          reduce using rule 28 (expr -> lvalue = expr .)
    FLOATNUM        reduce using rule 28 (expr -> lvalue = expr .)
    STRING          reduce using rule 28 (expr -> lvalue = expr .)
    (               reduce using rule 28 (expr -> lvalue = expr .)
    [               reduce using rule 28 (expr -> lvalue = expr .)
    BREAK           reduce using rule 28 (expr -> lvalue = expr .)
    CONTINUE        reduce using rule 28 (expr -> lvalue = expr .)
    RETURN          reduce using rule 28 (expr -> lvalue = expr .)
    PRINT           reduce using rule 28 (expr -> lvalue = expr .)
    ID              reduce using rule 28 (expr -> lvalue = expr .)
    IF              reduce using rule 28 (expr -> lvalue = expr .)
    WHILE           reduce using rule 28 (expr -> lvalue = expr .)
    FOR             reduce using rule 28 (expr -> lvalue = expr .)
    '               shift and go to state 27
    +               shift and go to state 28
    -               shift and go to state 29
    *               shift and go to state 30
    /               shift and go to state 31
    MPLUS           shift and go to state 32
    MMINUS          shift and go to state 33
    MMLTP           shift and go to state 34
    MDIV            shift and go to state 35

  ! '               [ reduce using rule 28 (expr -> lvalue = expr .) ]
  ! +               [ reduce using rule 28 (expr -> lvalue = expr .) ]
  ! -               [ reduce using rule 28 (expr -> lvalue = expr .) ]
  ! *               [ reduce using rule 28 (expr -> lvalue = expr .) ]
  ! /               [ reduce using rule 28 (expr -> lvalue = expr .) ]
  ! MPLUS           [ reduce using rule 28 (expr -> lvalue = expr .) ]
  ! MMINUS          [ reduce using rule 28 (expr -> lvalue = expr .) ]
  ! MMLTP           [ reduce using rule 28 (expr -> lvalue = expr .) ]
  ! MDIV            [ reduce using rule 28 (expr -> lvalue = expr .) ]
  ! EQ              [ shift and go to state 36 ]
  ! NEQ             [ shift and go to state 37 ]
  ! GTEQ            [ shift and go to state 38 ]
  ! LTEQ            [ shift and go to state 39 ]
  ! >               [ shift and go to state 40 ]
  ! <               [ shift and go to state 41 ]


state 75

    (33) expr -> lvalue = ZEROS . ( expr )

    (               shift and go to state 95


state 76

    (34) expr -> lvalue = ONES . ( expr )

    (               shift and go to state 96


state 77

    (35) expr -> lvalue = EYE . ( expr )

    (               shift and go to state 97


state 78

    (29) expr -> lvalue PLUSASSIGN expr .
    (21) expr -> expr . '
    (36) expr -> expr . + expr
    (37) expr -> expr . - expr
    (38) expr -> expr . * expr
    (39) expr -> expr . / expr
    (40) expr -> expr . MPLUS expr
    (41) expr -> expr . MMINUS expr
    (42) expr -> expr . MMLTP expr
    (43) expr -> expr . MDIV expr
    (44) expr -> expr . EQ expr
    (45) expr -> expr . NEQ expr
    (46) expr -> expr . GTEQ expr
    (47) expr -> expr . LTEQ expr
    (48) expr -> expr . > expr
    (49) expr -> expr . < expr

    ;               reduce using rule 29 (expr -> lvalue PLUSASSIGN expr .)
    EQ              reduce using rule 29 (expr -> lvalue PLUSASSIGN expr .)
    NEQ             reduce using rule 29 (expr -> lvalue PLUSASSIGN expr .)
    GTEQ            reduce using rule 29 (expr -> lvalue PLUSASSIGN expr .)
    LTEQ            reduce using rule 29 (expr -> lvalue PLUSASSIGN expr .)
    >               reduce using rule 29 (expr -> lvalue PLUSASSIGN expr .)
    <               reduce using rule 29 (expr -> lvalue PLUSASSIGN expr .)
    )               reduce using rule 29 (expr -> lvalue PLUSASSIGN expr .)
    ]               reduce using rule 29 (expr -> lvalue PLUSASSIGN expr .)
    ,               reduce using rule 29 (expr -> lvalue PLUSASSIGN expr .)
    :               reduce using rule 29 (expr -> lvalue PLUSASSIGN expr .)
    {               reduce using rule 29 (expr -> lvalue PLUSASSIGN expr .)
    INTNUM          reduce using rule 29 (expr -> lvalue PLUSASSIGN expr .)
    FLOATNUM        reduce using rule 29 (expr -> lvalue PLUSASSIGN expr .)
    STRING          reduce using rule 29 (expr -> lvalue PLUSASSIGN expr .)
    (               reduce using rule 29 (expr -> lvalue PLUSASSIGN expr .)
    [               reduce using rule 29 (expr -> lvalue PLUSASSIGN expr .)
    BREAK           reduce using rule 29 (expr -> lvalue PLUSASSIGN expr .)
    CONTINUE        reduce using rule 29 (expr -> lvalue PLUSASSIGN expr .)
    RETURN          reduce using rule 29 (expr -> lvalue PLUSASSIGN expr .)
    PRINT           reduce using rule 29 (expr -> lvalue PLUSASSIGN expr .)
    ID              reduce using rule 29 (expr -> lvalue PLUSASSIGN expr .)
    IF              reduce using rule 29 (expr -> lvalue PLUSASSIGN expr .)
    WHILE           reduce using rule 29 (expr -> lvalue PLUSASSIGN expr .)
    FOR             reduce using rule 29 (expr -> lvalue PLUSASSIGN expr .)
    '               shift and go to state 27
    +               shift and go to state 28
    -               shift and go to state 29
    *               shift and go to state 30
    /               shift and go to state 31
    MPLUS           shift and go to state 32
    MMINUS          shift and go to state 33
    MMLTP           shift and go to state 34
    MDIV            shift and go to state 35

  ! '               [ reduce using rule 29 (expr -> lvalue PLUSASSIGN expr .) ]
  ! +               [ reduce using rule 29 (expr -> lvalue PLUSASSIGN expr .) ]
  ! -               [ reduce using rule 29 (expr -> lvalue PLUSASSIGN expr .) ]
  ! *               [ reduce using rule 29 (expr -> lvalue PLUSASSIGN expr .) ]
  ! /               [ reduce using rule 29 (expr -> lvalue PLUSASSIGN expr .) ]
  ! MPLUS           [ reduce using rule 29 (expr -> lvalue PLUSASSIGN expr .) ]
  ! MMINUS          [ reduce using rule 29 (expr -> lvalue PLUSASSIGN expr .) ]
  ! MMLTP           [ reduce using rule 29 (expr -> lvalue PLUSASSIGN expr .) ]
  ! MDIV            [ reduce using rule 29 (expr -> lvalue PLUSASSIGN expr .) ]
  ! EQ              [ shift and go to state 36 ]
  ! NEQ             [ shift and go to state 37 ]
  ! GTEQ            [ shift and go to state 38 ]
  ! LTEQ            [ shift and go to state 39 ]
  ! >               [ shift and go to state 40 ]
  ! <               [ shift and go to state 41 ]


state 79

    (30) expr -> lvalue MINASSIGN expr .
    (21) expr -> expr . '
    (36) expr -> expr . + expr
    (37) expr -> expr . - expr
    (38) expr -> expr . * expr
    (39) expr -> expr . / expr
    (40) expr -> expr . MPLUS expr
    (41) expr -> expr . MMINUS expr
    (42) expr -> expr . MMLTP expr
    (43) expr -> expr . MDIV expr
    (44) expr -> expr . EQ expr
    (45) expr -> expr . NEQ expr
    (46) expr -> expr . GTEQ expr
    (47) expr -> expr . LTEQ expr
    (48) expr -> expr . > expr
    (49) expr -> expr . < expr

    ;               reduce using rule 30 (expr -> lvalue MINASSIGN expr .)
    EQ              reduce using rule 30 (expr -> lvalue MINASSIGN expr .)
    NEQ             reduce using rule 30 (expr -> lvalue MINASSIGN expr .)
    GTEQ            reduce using rule 30 (expr -> lvalue MINASSIGN expr .)
    LTEQ            reduce using rule 30 (expr -> lvalue MINASSIGN expr .)
    >               reduce using rule 30 (expr -> lvalue MINASSIGN expr .)
    <               reduce using rule 30 (expr -> lvalue MINASSIGN expr .)
    )               reduce using rule 30 (expr -> lvalue MINASSIGN expr .)
    ]               reduce using rule 30 (expr -> lvalue MINASSIGN expr .)
    ,               reduce using rule 30 (expr -> lvalue MINASSIGN expr .)
    :               reduce using rule 30 (expr -> lvalue MINASSIGN expr .)
    {               reduce using rule 30 (expr -> lvalue MINASSIGN expr .)
    INTNUM          reduce using rule 30 (expr -> lvalue MINASSIGN expr .)
    FLOATNUM        reduce using rule 30 (expr -> lvalue MINASSIGN expr .)
    STRING          reduce using rule 30 (expr -> lvalue MINASSIGN expr .)
    (               reduce using rule 30 (expr -> lvalue MINASSIGN expr .)
    [               reduce using rule 30 (expr -> lvalue MINASSIGN expr .)
    BREAK           reduce using rule 30 (expr -> lvalue MINASSIGN expr .)
    CONTINUE        reduce using rule 30 (expr -> lvalue MINASSIGN expr .)
    RETURN          reduce using rule 30 (expr -> lvalue MINASSIGN expr .)
    PRINT           reduce using rule 30 (expr -> lvalue MINASSIGN expr .)
    ID              reduce using rule 30 (expr -> lvalue MINASSIGN expr .)
    IF              reduce using rule 30 (expr -> lvalue MINASSIGN expr .)
    WHILE           reduce using rule 30 (expr -> lvalue MINASSIGN expr .)
    FOR             reduce using rule 30 (expr -> lvalue MINASSIGN expr .)
    '               shift and go to state 27
    +               shift and go to state 28
    -               shift and go to state 29
    *               shift and go to state 30
    /               shift and go to state 31
    MPLUS           shift and go to state 32
    MMINUS          shift and go to state 33
    MMLTP           shift and go to state 34
    MDIV            shift and go to state 35

  ! '               [ reduce using rule 30 (expr -> lvalue MINASSIGN expr .) ]
  ! +               [ reduce using rule 30 (expr -> lvalue MINASSIGN expr .) ]
  ! -               [ reduce using rule 30 (expr -> lvalue MINASSIGN expr .) ]
  ! *               [ reduce using rule 30 (expr -> lvalue MINASSIGN expr .) ]
  ! /               [ reduce using rule 30 (expr -> lvalue MINASSIGN expr .) ]
  ! MPLUS           [ reduce using rule 30 (expr -> lvalue MINASSIGN expr .) ]
  ! MMINUS          [ reduce using rule 30 (expr -> lvalue MINASSIGN expr .) ]
  ! MMLTP           [ reduce using rule 30 (expr -> lvalue MINASSIGN expr .) ]
  ! MDIV            [ reduce using rule 30 (expr -> lvalue MINASSIGN expr .) ]
  ! EQ              [ shift and go to state 36 ]
  ! NEQ             [ shift and go to state 37 ]
  ! GTEQ            [ shift and go to state 38 ]
  ! LTEQ            [ shift and go to state 39 ]
  ! >               [ shift and go to state 40 ]
  ! <               [ shift and go to state 41 ]


state 80

    (31) expr -> lvalue MULTASSIGN expr .
    (21) expr -> expr . '
    (36) expr -> expr . + expr
    (37) expr -> expr . - expr
    (38) expr -> expr . * expr
    (39) expr -> expr . / expr
    (40) expr -> expr . MPLUS expr
    (41) expr -> expr . MMINUS expr
    (42) expr -> expr . MMLTP expr
    (43) expr -> expr . MDIV expr
    (44) expr -> expr . EQ expr
    (45) expr -> expr . NEQ expr
    (46) expr -> expr . GTEQ expr
    (47) expr -> expr . LTEQ expr
    (48) expr -> expr . > expr
    (49) expr -> expr . < expr

    ;               reduce using rule 31 (expr -> lvalue MULTASSIGN expr .)
    EQ              reduce using rule 31 (expr -> lvalue MULTASSIGN expr .)
    NEQ             reduce using rule 31 (expr -> lvalue MULTASSIGN expr .)
    GTEQ            reduce using rule 31 (expr -> lvalue MULTASSIGN expr .)
    LTEQ            reduce using rule 31 (expr -> lvalue MULTASSIGN expr .)
    >               reduce using rule 31 (expr -> lvalue MULTASSIGN expr .)
    <               reduce using rule 31 (expr -> lvalue MULTASSIGN expr .)
    )               reduce using rule 31 (expr -> lvalue MULTASSIGN expr .)
    ]               reduce using rule 31 (expr -> lvalue MULTASSIGN expr .)
    ,               reduce using rule 31 (expr -> lvalue MULTASSIGN expr .)
    :               reduce using rule 31 (expr -> lvalue MULTASSIGN expr .)
    {               reduce using rule 31 (expr -> lvalue MULTASSIGN expr .)
    INTNUM          reduce using rule 31 (expr -> lvalue MULTASSIGN expr .)
    FLOATNUM        reduce using rule 31 (expr -> lvalue MULTASSIGN expr .)
    STRING          reduce using rule 31 (expr -> lvalue MULTASSIGN expr .)
    (               reduce using rule 31 (expr -> lvalue MULTASSIGN expr .)
    [               reduce using rule 31 (expr -> lvalue MULTASSIGN expr .)
    BREAK           reduce using rule 31 (expr -> lvalue MULTASSIGN expr .)
    CONTINUE        reduce using rule 31 (expr -> lvalue MULTASSIGN expr .)
    RETURN          reduce using rule 31 (expr -> lvalue MULTASSIGN expr .)
    PRINT           reduce using rule 31 (expr -> lvalue MULTASSIGN expr .)
    ID              reduce using rule 31 (expr -> lvalue MULTASSIGN expr .)
    IF              reduce using rule 31 (expr -> lvalue MULTASSIGN expr .)
    WHILE           reduce using rule 31 (expr -> lvalue MULTASSIGN expr .)
    FOR             reduce using rule 31 (expr -> lvalue MULTASSIGN expr .)
    '               shift and go to state 27
    +               shift and go to state 28
    -               shift and go to state 29
    *               shift and go to state 30
    /               shift and go to state 31
    MPLUS           shift and go to state 32
    MMINUS          shift and go to state 33
    MMLTP           shift and go to state 34
    MDIV            shift and go to state 35

  ! '               [ reduce using rule 31 (expr -> lvalue MULTASSIGN expr .) ]
  ! +               [ reduce using rule 31 (expr -> lvalue MULTASSIGN expr .) ]
  ! -               [ reduce using rule 31 (expr -> lvalue MULTASSIGN expr .) ]
  ! *               [ reduce using rule 31 (expr -> lvalue MULTASSIGN expr .) ]
  ! /               [ reduce using rule 31 (expr -> lvalue MULTASSIGN expr .) ]
  ! MPLUS           [ reduce using rule 31 (expr -> lvalue MULTASSIGN expr .) ]
  ! MMINUS          [ reduce using rule 31 (expr -> lvalue MULTASSIGN expr .) ]
  ! MMLTP           [ reduce using rule 31 (expr -> lvalue MULTASSIGN expr .) ]
  ! MDIV            [ reduce using rule 31 (expr -> lvalue MULTASSIGN expr .) ]
  ! EQ              [ shift and go to state 36 ]
  ! NEQ             [ shift and go to state 37 ]
  ! GTEQ            [ shift and go to state 38 ]
  ! LTEQ            [ shift and go to state 39 ]
  ! >               [ shift and go to state 40 ]
  ! <               [ shift and go to state 41 ]


state 81

    (32) expr -> lvalue DIVASSIGN expr .
    (21) expr -> expr . '
    (36) expr -> expr . + expr
    (37) expr -> expr . - expr
    (38) expr -> expr . * expr
    (39) expr -> expr . / expr
    (40) expr -> expr . MPLUS expr
    (41) expr -> expr . MMINUS expr
    (42) expr -> expr . MMLTP expr
    (43) expr -> expr . MDIV expr
    (44) expr -> expr . EQ expr
    (45) expr -> expr . NEQ expr
    (46) expr -> expr . GTEQ expr
    (47) expr -> expr . LTEQ expr
    (48) expr -> expr . > expr
    (49) expr -> expr . < expr

    ;               reduce using rule 32 (expr -> lvalue DIVASSIGN expr .)
    EQ              reduce using rule 32 (expr -> lvalue DIVASSIGN expr .)
    NEQ             reduce using rule 32 (expr -> lvalue DIVASSIGN expr .)
    GTEQ            reduce using rule 32 (expr -> lvalue DIVASSIGN expr .)
    LTEQ            reduce using rule 32 (expr -> lvalue DIVASSIGN expr .)
    >               reduce using rule 32 (expr -> lvalue DIVASSIGN expr .)
    <               reduce using rule 32 (expr -> lvalue DIVASSIGN expr .)
    )               reduce using rule 32 (expr -> lvalue DIVASSIGN expr .)
    ]               reduce using rule 32 (expr -> lvalue DIVASSIGN expr .)
    ,               reduce using rule 32 (expr -> lvalue DIVASSIGN expr .)
    :               reduce using rule 32 (expr -> lvalue DIVASSIGN expr .)
    {               reduce using rule 32 (expr -> lvalue DIVASSIGN expr .)
    INTNUM          reduce using rule 32 (expr -> lvalue DIVASSIGN expr .)
    FLOATNUM        reduce using rule 32 (expr -> lvalue DIVASSIGN expr .)
    STRING          reduce using rule 32 (expr -> lvalue DIVASSIGN expr .)
    (               reduce using rule 32 (expr -> lvalue DIVASSIGN expr .)
    [               reduce using rule 32 (expr -> lvalue DIVASSIGN expr .)
    BREAK           reduce using rule 32 (expr -> lvalue DIVASSIGN expr .)
    CONTINUE        reduce using rule 32 (expr -> lvalue DIVASSIGN expr .)
    RETURN          reduce using rule 32 (expr -> lvalue DIVASSIGN expr .)
    PRINT           reduce using rule 32 (expr -> lvalue DIVASSIGN expr .)
    ID              reduce using rule 32 (expr -> lvalue DIVASSIGN expr .)
    IF              reduce using rule 32 (expr -> lvalue DIVASSIGN expr .)
    WHILE           reduce using rule 32 (expr -> lvalue DIVASSIGN expr .)
    FOR             reduce using rule 32 (expr -> lvalue DIVASSIGN expr .)
    '               shift and go to state 27
    +               shift and go to state 28
    -               shift and go to state 29
    *               shift and go to state 30
    /               shift and go to state 31
    MPLUS           shift and go to state 32
    MMINUS          shift and go to state 33
    MMLTP           shift and go to state 34
    MDIV            shift and go to state 35

  ! '               [ reduce using rule 32 (expr -> lvalue DIVASSIGN expr .) ]
  ! +               [ reduce using rule 32 (expr -> lvalue DIVASSIGN expr .) ]
  ! -               [ reduce using rule 32 (expr -> lvalue DIVASSIGN expr .) ]
  ! *               [ reduce using rule 32 (expr -> lvalue DIVASSIGN expr .) ]
  ! /               [ reduce using rule 32 (expr -> lvalue DIVASSIGN expr .) ]
  ! MPLUS           [ reduce using rule 32 (expr -> lvalue DIVASSIGN expr .) ]
  ! MMINUS          [ reduce using rule 32 (expr -> lvalue DIVASSIGN expr .) ]
  ! MMLTP           [ reduce using rule 32 (expr -> lvalue DIVASSIGN expr .) ]
  ! MDIV            [ reduce using rule 32 (expr -> lvalue DIVASSIGN expr .) ]
  ! EQ              [ shift and go to state 36 ]
  ! NEQ             [ shift and go to state 37 ]
  ! GTEQ            [ shift and go to state 38 ]
  ! LTEQ            [ shift and go to state 39 ]
  ! >               [ shift and go to state 40 ]
  ! <               [ shift and go to state 41 ]


state 82

    (19) expr -> ( expr ) .

    ;               reduce using rule 19 (expr -> ( expr ) .)
    '               reduce using rule 19 (expr -> ( expr ) .)
    +               reduce using rule 19 (expr -> ( expr ) .)
    -               reduce using rule 19 (expr -> ( expr ) .)
    *               reduce using rule 19 (expr -> ( expr ) .)
    /               reduce using rule 19 (expr -> ( expr ) .)
    MPLUS           reduce using rule 19 (expr -> ( expr ) .)
    MMINUS          reduce using rule 19 (expr -> ( expr ) .)
    MMLTP           reduce using rule 19 (expr -> ( expr ) .)
    MDIV            reduce using rule 19 (expr -> ( expr ) .)
    EQ              reduce using rule 19 (expr -> ( expr ) .)
    NEQ             reduce using rule 19 (expr -> ( expr ) .)
    GTEQ            reduce using rule 19 (expr -> ( expr ) .)
    LTEQ            reduce using rule 19 (expr -> ( expr ) .)
    >               reduce using rule 19 (expr -> ( expr ) .)
    <               reduce using rule 19 (expr -> ( expr ) .)
    )               reduce using rule 19 (expr -> ( expr ) .)
    ]               reduce using rule 19 (expr -> ( expr ) .)
    ,               reduce using rule 19 (expr -> ( expr ) .)
    :               reduce using rule 19 (expr -> ( expr ) .)
    {               reduce using rule 19 (expr -> ( expr ) .)
    INTNUM          reduce using rule 19 (expr -> ( expr ) .)
    FLOATNUM        reduce using rule 19 (expr -> ( expr ) .)
    STRING          reduce using rule 19 (expr -> ( expr ) .)
    (               reduce using rule 19 (expr -> ( expr ) .)
    [               reduce using rule 19 (expr -> ( expr ) .)
    BREAK           reduce using rule 19 (expr -> ( expr ) .)
    CONTINUE        reduce using rule 19 (expr -> ( expr ) .)
    RETURN          reduce using rule 19 (expr -> ( expr ) .)
    PRINT           reduce using rule 19 (expr -> ( expr ) .)
    ID              reduce using rule 19 (expr -> ( expr ) .)
    IF              reduce using rule 19 (expr -> ( expr ) .)
    WHILE           reduce using rule 19 (expr -> ( expr ) .)
    FOR             reduce using rule 19 (expr -> ( expr ) .)


state 83

    (24) expr -> [ array_interior ] .

    ;               reduce using rule 24 (expr -> [ array_interior ] .)
    '               reduce using rule 24 (expr -> [ array_interior ] .)
    +               reduce using rule 24 (expr -> [ array_interior ] .)
    -               reduce using rule 24 (expr -> [ array_interior ] .)
    *               reduce using rule 24 (expr -> [ array_interior ] .)
    /               reduce using rule 24 (expr -> [ array_interior ] .)
    MPLUS           reduce using rule 24 (expr -> [ array_interior ] .)
    MMINUS          reduce using rule 24 (expr -> [ array_interior ] .)
    MMLTP           reduce using rule 24 (expr -> [ array_interior ] .)
    MDIV            reduce using rule 24 (expr -> [ array_interior ] .)
    EQ              reduce using rule 24 (expr -> [ array_interior ] .)
    NEQ             reduce using rule 24 (expr -> [ array_interior ] .)
    GTEQ            reduce using rule 24 (expr -> [ array_interior ] .)
    LTEQ            reduce using rule 24 (expr -> [ array_interior ] .)
    >               reduce using rule 24 (expr -> [ array_interior ] .)
    <               reduce using rule 24 (expr -> [ array_interior ] .)
    )               reduce using rule 24 (expr -> [ array_interior ] .)
    ]               reduce using rule 24 (expr -> [ array_interior ] .)
    ,               reduce using rule 24 (expr -> [ array_interior ] .)
    :               reduce using rule 24 (expr -> [ array_interior ] .)
    {               reduce using rule 24 (expr -> [ array_interior ] .)
    INTNUM          reduce using rule 24 (expr -> [ array_interior ] .)
    FLOATNUM        reduce using rule 24 (expr -> [ array_interior ] .)
    STRING          reduce using rule 24 (expr -> [ array_interior ] .)
    (               reduce using rule 24 (expr -> [ array_interior ] .)
    [               reduce using rule 24 (expr -> [ array_interior ] .)
    BREAK           reduce using rule 24 (expr -> [ array_interior ] .)
    CONTINUE        reduce using rule 24 (expr -> [ array_interior ] .)
    RETURN          reduce using rule 24 (expr -> [ array_interior ] .)
    PRINT           reduce using rule 24 (expr -> [ array_interior ] .)
    ID              reduce using rule 24 (expr -> [ array_interior ] .)
    IF              reduce using rule 24 (expr -> [ array_interior ] .)
    WHILE           reduce using rule 24 (expr -> [ array_interior ] .)
    FOR             reduce using rule 24 (expr -> [ array_interior ] .)


state 84

    (22) array_interior -> array_interior , . expr
    (15) expr -> . INTNUM
    (16) expr -> . FLOATNUM
    (17) expr -> . STRING
    (18) expr -> . lvalue
    (19) expr -> . ( expr )
    (20) expr -> . - expr
    (21) expr -> . expr '
    (24) expr -> . [ array_interior ]
    (28) expr -> . lvalue = expr
    (29) expr -> . lvalue PLUSASSIGN expr
    (30) expr -> . lvalue MINASSIGN expr
    (31) expr -> . lvalue MULTASSIGN expr
    (32) expr -> . lvalue DIVASSIGN expr
    (33) expr -> . lvalue = ZEROS ( expr )
    (34) expr -> . lvalue = ONES ( expr )
    (35) expr -> . lvalue = EYE ( expr )
    (36) expr -> . expr + expr
    (37) expr -> . expr - expr
    (38) expr -> . expr * expr
    (39) expr -> . expr / expr
    (40) expr -> . expr MPLUS expr
    (41) expr -> . expr MMINUS expr
    (42) expr -> . expr MMLTP expr
    (43) expr -> . expr MDIV expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr > expr
    (49) expr -> . expr < expr
    (25) lvalue -> . ID
    (26) lvalue -> . ID [ expr ]
    (27) lvalue -> . ID [ expr , expr ]

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13
    ID              shift and go to state 19

    expr                           shift and go to state 98
    lvalue                         shift and go to state 10

state 85

    (56) cond_if -> cond_if ELSE cond_block .

    ELSE            reduce using rule 56 (cond_if -> cond_if ELSE cond_block .)
    {               reduce using rule 56 (cond_if -> cond_if ELSE cond_block .)
    INTNUM          reduce using rule 56 (cond_if -> cond_if ELSE cond_block .)
    FLOATNUM        reduce using rule 56 (cond_if -> cond_if ELSE cond_block .)
    STRING          reduce using rule 56 (cond_if -> cond_if ELSE cond_block .)
    (               reduce using rule 56 (cond_if -> cond_if ELSE cond_block .)
    -               reduce using rule 56 (cond_if -> cond_if ELSE cond_block .)
    [               reduce using rule 56 (cond_if -> cond_if ELSE cond_block .)
    RETURN          reduce using rule 56 (cond_if -> cond_if ELSE cond_block .)
    PRINT           reduce using rule 56 (cond_if -> cond_if ELSE cond_block .)
    ID              reduce using rule 56 (cond_if -> cond_if ELSE cond_block .)
    IF              reduce using rule 56 (cond_if -> cond_if ELSE cond_block .)
    WHILE           reduce using rule 56 (cond_if -> cond_if ELSE cond_block .)
    FOR             reduce using rule 56 (cond_if -> cond_if ELSE cond_block .)
    $end            reduce using rule 56 (cond_if -> cond_if ELSE cond_block .)
    }               reduce using rule 56 (cond_if -> cond_if ELSE cond_block .)


state 86

    (53) cond_block -> struct .

    ELSE            reduce using rule 53 (cond_block -> struct .)
    {               reduce using rule 53 (cond_block -> struct .)
    INTNUM          reduce using rule 53 (cond_block -> struct .)
    FLOATNUM        reduce using rule 53 (cond_block -> struct .)
    STRING          reduce using rule 53 (cond_block -> struct .)
    (               reduce using rule 53 (cond_block -> struct .)
    -               reduce using rule 53 (cond_block -> struct .)
    [               reduce using rule 53 (cond_block -> struct .)
    RETURN          reduce using rule 53 (cond_block -> struct .)
    PRINT           reduce using rule 53 (cond_block -> struct .)
    ID              reduce using rule 53 (cond_block -> struct .)
    IF              reduce using rule 53 (cond_block -> struct .)
    WHILE           reduce using rule 53 (cond_block -> struct .)
    FOR             reduce using rule 53 (cond_block -> struct .)
    $end            reduce using rule 53 (cond_block -> struct .)
    }               reduce using rule 53 (cond_block -> struct .)


state 87

    (54) cond_block -> { . start }
    (1) start -> . struct
    (2) start -> . start struct
    (3) start -> . { start }
    (4) start -> . start { start }
    (5) struct -> . expr ;
    (6) struct -> . cond_expr
    (7) struct -> . instruction
    (15) expr -> . INTNUM
    (16) expr -> . FLOATNUM
    (17) expr -> . STRING
    (18) expr -> . lvalue
    (19) expr -> . ( expr )
    (20) expr -> . - expr
    (21) expr -> . expr '
    (24) expr -> . [ array_interior ]
    (28) expr -> . lvalue = expr
    (29) expr -> . lvalue PLUSASSIGN expr
    (30) expr -> . lvalue MINASSIGN expr
    (31) expr -> . lvalue MULTASSIGN expr
    (32) expr -> . lvalue DIVASSIGN expr
    (33) expr -> . lvalue = ZEROS ( expr )
    (34) expr -> . lvalue = ONES ( expr )
    (35) expr -> . lvalue = EYE ( expr )
    (36) expr -> . expr + expr
    (37) expr -> . expr - expr
    (38) expr -> . expr * expr
    (39) expr -> . expr / expr
    (40) expr -> . expr MPLUS expr
    (41) expr -> . expr MMINUS expr
    (42) expr -> . expr MMLTP expr
    (43) expr -> . expr MDIV expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr > expr
    (49) expr -> . expr < expr
    (50) cond_expr -> . cond_if
    (51) cond_expr -> . cond_while
    (52) cond_expr -> . cond_for
    (66) instruction -> . RETURN expr ;
    (67) instruction -> . PRINT array_interior ;
    (25) lvalue -> . ID
    (26) lvalue -> . ID [ expr ]
    (27) lvalue -> . ID [ expr , expr ]
    (55) cond_if -> . IF ( expr ) cond_block
    (56) cond_if -> . cond_if ELSE cond_block
    (64) cond_while -> . WHILE ( expr ) loop_cond_block
    (65) cond_for -> . FOR ID = expr : expr loop_cond_block

    {               shift and go to state 3
    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13
    RETURN          shift and go to state 17
    PRINT           shift and go to state 18
    ID              shift and go to state 19
    IF              shift and go to state 20
    WHILE           shift and go to state 21
    FOR             shift and go to state 22

    start                          shift and go to state 99
    struct                         shift and go to state 2
    expr                           shift and go to state 4
    cond_expr                      shift and go to state 5
    instruction                    shift and go to state 6
    lvalue                         shift and go to state 10
    cond_if                        shift and go to state 14
    cond_while                     shift and go to state 15
    cond_for                       shift and go to state 16

state 88

    (66) instruction -> RETURN expr ; .

    {               reduce using rule 66 (instruction -> RETURN expr ; .)
    INTNUM          reduce using rule 66 (instruction -> RETURN expr ; .)
    FLOATNUM        reduce using rule 66 (instruction -> RETURN expr ; .)
    STRING          reduce using rule 66 (instruction -> RETURN expr ; .)
    (               reduce using rule 66 (instruction -> RETURN expr ; .)
    -               reduce using rule 66 (instruction -> RETURN expr ; .)
    [               reduce using rule 66 (instruction -> RETURN expr ; .)
    RETURN          reduce using rule 66 (instruction -> RETURN expr ; .)
    PRINT           reduce using rule 66 (instruction -> RETURN expr ; .)
    ID              reduce using rule 66 (instruction -> RETURN expr ; .)
    IF              reduce using rule 66 (instruction -> RETURN expr ; .)
    WHILE           reduce using rule 66 (instruction -> RETURN expr ; .)
    FOR             reduce using rule 66 (instruction -> RETURN expr ; .)
    $end            reduce using rule 66 (instruction -> RETURN expr ; .)
    }               reduce using rule 66 (instruction -> RETURN expr ; .)
    ELSE            reduce using rule 66 (instruction -> RETURN expr ; .)


state 89

    (67) instruction -> PRINT array_interior ; .

    {               reduce using rule 67 (instruction -> PRINT array_interior ; .)
    INTNUM          reduce using rule 67 (instruction -> PRINT array_interior ; .)
    FLOATNUM        reduce using rule 67 (instruction -> PRINT array_interior ; .)
    STRING          reduce using rule 67 (instruction -> PRINT array_interior ; .)
    (               reduce using rule 67 (instruction -> PRINT array_interior ; .)
    -               reduce using rule 67 (instruction -> PRINT array_interior ; .)
    [               reduce using rule 67 (instruction -> PRINT array_interior ; .)
    RETURN          reduce using rule 67 (instruction -> PRINT array_interior ; .)
    PRINT           reduce using rule 67 (instruction -> PRINT array_interior ; .)
    ID              reduce using rule 67 (instruction -> PRINT array_interior ; .)
    IF              reduce using rule 67 (instruction -> PRINT array_interior ; .)
    WHILE           reduce using rule 67 (instruction -> PRINT array_interior ; .)
    FOR             reduce using rule 67 (instruction -> PRINT array_interior ; .)
    $end            reduce using rule 67 (instruction -> PRINT array_interior ; .)
    }               reduce using rule 67 (instruction -> PRINT array_interior ; .)
    ELSE            reduce using rule 67 (instruction -> PRINT array_interior ; .)


state 90

    (26) lvalue -> ID [ expr . ]
    (27) lvalue -> ID [ expr . , expr ]
    (21) expr -> expr . '
    (36) expr -> expr . + expr
    (37) expr -> expr . - expr
    (38) expr -> expr . * expr
    (39) expr -> expr . / expr
    (40) expr -> expr . MPLUS expr
    (41) expr -> expr . MMINUS expr
    (42) expr -> expr . MMLTP expr
    (43) expr -> expr . MDIV expr
    (44) expr -> expr . EQ expr
    (45) expr -> expr . NEQ expr
    (46) expr -> expr . GTEQ expr
    (47) expr -> expr . LTEQ expr
    (48) expr -> expr . > expr
    (49) expr -> expr . < expr

    ]               shift and go to state 100
    ,               shift and go to state 101
    '               shift and go to state 27
    +               shift and go to state 28
    -               shift and go to state 29
    *               shift and go to state 30
    /               shift and go to state 31
    MPLUS           shift and go to state 32
    MMINUS          shift and go to state 33
    MMLTP           shift and go to state 34
    MDIV            shift and go to state 35
    EQ              shift and go to state 36
    NEQ             shift and go to state 37
    GTEQ            shift and go to state 38
    LTEQ            shift and go to state 39
    >               shift and go to state 40
    <               shift and go to state 41


state 91

    (55) cond_if -> IF ( expr . ) cond_block
    (21) expr -> expr . '
    (36) expr -> expr . + expr
    (37) expr -> expr . - expr
    (38) expr -> expr . * expr
    (39) expr -> expr . / expr
    (40) expr -> expr . MPLUS expr
    (41) expr -> expr . MMINUS expr
    (42) expr -> expr . MMLTP expr
    (43) expr -> expr . MDIV expr
    (44) expr -> expr . EQ expr
    (45) expr -> expr . NEQ expr
    (46) expr -> expr . GTEQ expr
    (47) expr -> expr . LTEQ expr
    (48) expr -> expr . > expr
    (49) expr -> expr . < expr

    )               shift and go to state 102
    '               shift and go to state 27
    +               shift and go to state 28
    -               shift and go to state 29
    *               shift and go to state 30
    /               shift and go to state 31
    MPLUS           shift and go to state 32
    MMINUS          shift and go to state 33
    MMLTP           shift and go to state 34
    MDIV            shift and go to state 35
    EQ              shift and go to state 36
    NEQ             shift and go to state 37
    GTEQ            shift and go to state 38
    LTEQ            shift and go to state 39
    >               shift and go to state 40
    <               shift and go to state 41


state 92

    (64) cond_while -> WHILE ( expr . ) loop_cond_block
    (21) expr -> expr . '
    (36) expr -> expr . + expr
    (37) expr -> expr . - expr
    (38) expr -> expr . * expr
    (39) expr -> expr . / expr
    (40) expr -> expr . MPLUS expr
    (41) expr -> expr . MMINUS expr
    (42) expr -> expr . MMLTP expr
    (43) expr -> expr . MDIV expr
    (44) expr -> expr . EQ expr
    (45) expr -> expr . NEQ expr
    (46) expr -> expr . GTEQ expr
    (47) expr -> expr . LTEQ expr
    (48) expr -> expr . > expr
    (49) expr -> expr . < expr

    )               shift and go to state 103
    '               shift and go to state 27
    +               shift and go to state 28
    -               shift and go to state 29
    *               shift and go to state 30
    /               shift and go to state 31
    MPLUS           shift and go to state 32
    MMINUS          shift and go to state 33
    MMLTP           shift and go to state 34
    MDIV            shift and go to state 35
    EQ              shift and go to state 36
    NEQ             shift and go to state 37
    GTEQ            shift and go to state 38
    LTEQ            shift and go to state 39
    >               shift and go to state 40
    <               shift and go to state 41


state 93

    (65) cond_for -> FOR ID = . expr : expr loop_cond_block
    (15) expr -> . INTNUM
    (16) expr -> . FLOATNUM
    (17) expr -> . STRING
    (18) expr -> . lvalue
    (19) expr -> . ( expr )
    (20) expr -> . - expr
    (21) expr -> . expr '
    (24) expr -> . [ array_interior ]
    (28) expr -> . lvalue = expr
    (29) expr -> . lvalue PLUSASSIGN expr
    (30) expr -> . lvalue MINASSIGN expr
    (31) expr -> . lvalue MULTASSIGN expr
    (32) expr -> . lvalue DIVASSIGN expr
    (33) expr -> . lvalue = ZEROS ( expr )
    (34) expr -> . lvalue = ONES ( expr )
    (35) expr -> . lvalue = EYE ( expr )
    (36) expr -> . expr + expr
    (37) expr -> . expr - expr
    (38) expr -> . expr * expr
    (39) expr -> . expr / expr
    (40) expr -> . expr MPLUS expr
    (41) expr -> . expr MMINUS expr
    (42) expr -> . expr MMLTP expr
    (43) expr -> . expr MDIV expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr > expr
    (49) expr -> . expr < expr
    (25) lvalue -> . ID
    (26) lvalue -> . ID [ expr ]
    (27) lvalue -> . ID [ expr , expr ]

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13
    ID              shift and go to state 19

    expr                           shift and go to state 104
    lvalue                         shift and go to state 10

state 94

    (4) start -> start { start } .

    {               reduce using rule 4 (start -> start { start } .)
    INTNUM          reduce using rule 4 (start -> start { start } .)
    FLOATNUM        reduce using rule 4 (start -> start { start } .)
    STRING          reduce using rule 4 (start -> start { start } .)
    (               reduce using rule 4 (start -> start { start } .)
    -               reduce using rule 4 (start -> start { start } .)
    [               reduce using rule 4 (start -> start { start } .)
    RETURN          reduce using rule 4 (start -> start { start } .)
    PRINT           reduce using rule 4 (start -> start { start } .)
    ID              reduce using rule 4 (start -> start { start } .)
    IF              reduce using rule 4 (start -> start { start } .)
    WHILE           reduce using rule 4 (start -> start { start } .)
    FOR             reduce using rule 4 (start -> start { start } .)
    $end            reduce using rule 4 (start -> start { start } .)
    }               reduce using rule 4 (start -> start { start } .)


state 95

    (33) expr -> lvalue = ZEROS ( . expr )
    (15) expr -> . INTNUM
    (16) expr -> . FLOATNUM
    (17) expr -> . STRING
    (18) expr -> . lvalue
    (19) expr -> . ( expr )
    (20) expr -> . - expr
    (21) expr -> . expr '
    (24) expr -> . [ array_interior ]
    (28) expr -> . lvalue = expr
    (29) expr -> . lvalue PLUSASSIGN expr
    (30) expr -> . lvalue MINASSIGN expr
    (31) expr -> . lvalue MULTASSIGN expr
    (32) expr -> . lvalue DIVASSIGN expr
    (33) expr -> . lvalue = ZEROS ( expr )
    (34) expr -> . lvalue = ONES ( expr )
    (35) expr -> . lvalue = EYE ( expr )
    (36) expr -> . expr + expr
    (37) expr -> . expr - expr
    (38) expr -> . expr * expr
    (39) expr -> . expr / expr
    (40) expr -> . expr MPLUS expr
    (41) expr -> . expr MMINUS expr
    (42) expr -> . expr MMLTP expr
    (43) expr -> . expr MDIV expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr > expr
    (49) expr -> . expr < expr
    (25) lvalue -> . ID
    (26) lvalue -> . ID [ expr ]
    (27) lvalue -> . ID [ expr , expr ]

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13
    ID              shift and go to state 19

    lvalue                         shift and go to state 10
    expr                           shift and go to state 105

state 96

    (34) expr -> lvalue = ONES ( . expr )
    (15) expr -> . INTNUM
    (16) expr -> . FLOATNUM
    (17) expr -> . STRING
    (18) expr -> . lvalue
    (19) expr -> . ( expr )
    (20) expr -> . - expr
    (21) expr -> . expr '
    (24) expr -> . [ array_interior ]
    (28) expr -> . lvalue = expr
    (29) expr -> . lvalue PLUSASSIGN expr
    (30) expr -> . lvalue MINASSIGN expr
    (31) expr -> . lvalue MULTASSIGN expr
    (32) expr -> . lvalue DIVASSIGN expr
    (33) expr -> . lvalue = ZEROS ( expr )
    (34) expr -> . lvalue = ONES ( expr )
    (35) expr -> . lvalue = EYE ( expr )
    (36) expr -> . expr + expr
    (37) expr -> . expr - expr
    (38) expr -> . expr * expr
    (39) expr -> . expr / expr
    (40) expr -> . expr MPLUS expr
    (41) expr -> . expr MMINUS expr
    (42) expr -> . expr MMLTP expr
    (43) expr -> . expr MDIV expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr > expr
    (49) expr -> . expr < expr
    (25) lvalue -> . ID
    (26) lvalue -> . ID [ expr ]
    (27) lvalue -> . ID [ expr , expr ]

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13
    ID              shift and go to state 19

    lvalue                         shift and go to state 10
    expr                           shift and go to state 106

state 97

    (35) expr -> lvalue = EYE ( . expr )
    (15) expr -> . INTNUM
    (16) expr -> . FLOATNUM
    (17) expr -> . STRING
    (18) expr -> . lvalue
    (19) expr -> . ( expr )
    (20) expr -> . - expr
    (21) expr -> . expr '
    (24) expr -> . [ array_interior ]
    (28) expr -> . lvalue = expr
    (29) expr -> . lvalue PLUSASSIGN expr
    (30) expr -> . lvalue MINASSIGN expr
    (31) expr -> . lvalue MULTASSIGN expr
    (32) expr -> . lvalue DIVASSIGN expr
    (33) expr -> . lvalue = ZEROS ( expr )
    (34) expr -> . lvalue = ONES ( expr )
    (35) expr -> . lvalue = EYE ( expr )
    (36) expr -> . expr + expr
    (37) expr -> . expr - expr
    (38) expr -> . expr * expr
    (39) expr -> . expr / expr
    (40) expr -> . expr MPLUS expr
    (41) expr -> . expr MMINUS expr
    (42) expr -> . expr MMLTP expr
    (43) expr -> . expr MDIV expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr > expr
    (49) expr -> . expr < expr
    (25) lvalue -> . ID
    (26) lvalue -> . ID [ expr ]
    (27) lvalue -> . ID [ expr , expr ]

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13
    ID              shift and go to state 19

    lvalue                         shift and go to state 10
    expr                           shift and go to state 107

state 98

    (22) array_interior -> array_interior , expr .
    (21) expr -> expr . '
    (36) expr -> expr . + expr
    (37) expr -> expr . - expr
    (38) expr -> expr . * expr
    (39) expr -> expr . / expr
    (40) expr -> expr . MPLUS expr
    (41) expr -> expr . MMINUS expr
    (42) expr -> expr . MMLTP expr
    (43) expr -> expr . MDIV expr
    (44) expr -> expr . EQ expr
    (45) expr -> expr . NEQ expr
    (46) expr -> expr . GTEQ expr
    (47) expr -> expr . LTEQ expr
    (48) expr -> expr . > expr
    (49) expr -> expr . < expr

    ]               reduce using rule 22 (array_interior -> array_interior , expr .)
    ,               reduce using rule 22 (array_interior -> array_interior , expr .)
    ;               reduce using rule 22 (array_interior -> array_interior , expr .)
    '               shift and go to state 27
    +               shift and go to state 28
    -               shift and go to state 29
    *               shift and go to state 30
    /               shift and go to state 31
    MPLUS           shift and go to state 32
    MMINUS          shift and go to state 33
    MMLTP           shift and go to state 34
    MDIV            shift and go to state 35
    EQ              shift and go to state 36
    NEQ             shift and go to state 37
    GTEQ            shift and go to state 38
    LTEQ            shift and go to state 39
    >               shift and go to state 40
    <               shift and go to state 41


state 99

    (54) cond_block -> { start . }
    (2) start -> start . struct
    (4) start -> start . { start }
    (5) struct -> . expr ;
    (6) struct -> . cond_expr
    (7) struct -> . instruction
    (15) expr -> . INTNUM
    (16) expr -> . FLOATNUM
    (17) expr -> . STRING
    (18) expr -> . lvalue
    (19) expr -> . ( expr )
    (20) expr -> . - expr
    (21) expr -> . expr '
    (24) expr -> . [ array_interior ]
    (28) expr -> . lvalue = expr
    (29) expr -> . lvalue PLUSASSIGN expr
    (30) expr -> . lvalue MINASSIGN expr
    (31) expr -> . lvalue MULTASSIGN expr
    (32) expr -> . lvalue DIVASSIGN expr
    (33) expr -> . lvalue = ZEROS ( expr )
    (34) expr -> . lvalue = ONES ( expr )
    (35) expr -> . lvalue = EYE ( expr )
    (36) expr -> . expr + expr
    (37) expr -> . expr - expr
    (38) expr -> . expr * expr
    (39) expr -> . expr / expr
    (40) expr -> . expr MPLUS expr
    (41) expr -> . expr MMINUS expr
    (42) expr -> . expr MMLTP expr
    (43) expr -> . expr MDIV expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr > expr
    (49) expr -> . expr < expr
    (50) cond_expr -> . cond_if
    (51) cond_expr -> . cond_while
    (52) cond_expr -> . cond_for
    (66) instruction -> . RETURN expr ;
    (67) instruction -> . PRINT array_interior ;
    (25) lvalue -> . ID
    (26) lvalue -> . ID [ expr ]
    (27) lvalue -> . ID [ expr , expr ]
    (55) cond_if -> . IF ( expr ) cond_block
    (56) cond_if -> . cond_if ELSE cond_block
    (64) cond_while -> . WHILE ( expr ) loop_cond_block
    (65) cond_for -> . FOR ID = expr : expr loop_cond_block

    }               shift and go to state 108
    {               shift and go to state 24
    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13
    RETURN          shift and go to state 17
    PRINT           shift and go to state 18
    ID              shift and go to state 19
    IF              shift and go to state 20
    WHILE           shift and go to state 21
    FOR             shift and go to state 22

    struct                         shift and go to state 23
    expr                           shift and go to state 4
    cond_expr                      shift and go to state 5
    instruction                    shift and go to state 6
    lvalue                         shift and go to state 10
    cond_if                        shift and go to state 14
    cond_while                     shift and go to state 15
    cond_for                       shift and go to state 16

state 100

    (26) lvalue -> ID [ expr ] .

    =               reduce using rule 26 (lvalue -> ID [ expr ] .)
    PLUSASSIGN      reduce using rule 26 (lvalue -> ID [ expr ] .)
    MINASSIGN       reduce using rule 26 (lvalue -> ID [ expr ] .)
    MULTASSIGN      reduce using rule 26 (lvalue -> ID [ expr ] .)
    DIVASSIGN       reduce using rule 26 (lvalue -> ID [ expr ] .)
    ;               reduce using rule 26 (lvalue -> ID [ expr ] .)
    '               reduce using rule 26 (lvalue -> ID [ expr ] .)
    +               reduce using rule 26 (lvalue -> ID [ expr ] .)
    -               reduce using rule 26 (lvalue -> ID [ expr ] .)
    *               reduce using rule 26 (lvalue -> ID [ expr ] .)
    /               reduce using rule 26 (lvalue -> ID [ expr ] .)
    MPLUS           reduce using rule 26 (lvalue -> ID [ expr ] .)
    MMINUS          reduce using rule 26 (lvalue -> ID [ expr ] .)
    MMLTP           reduce using rule 26 (lvalue -> ID [ expr ] .)
    MDIV            reduce using rule 26 (lvalue -> ID [ expr ] .)
    EQ              reduce using rule 26 (lvalue -> ID [ expr ] .)
    NEQ             reduce using rule 26 (lvalue -> ID [ expr ] .)
    GTEQ            reduce using rule 26 (lvalue -> ID [ expr ] .)
    LTEQ            reduce using rule 26 (lvalue -> ID [ expr ] .)
    >               reduce using rule 26 (lvalue -> ID [ expr ] .)
    <               reduce using rule 26 (lvalue -> ID [ expr ] .)
    )               reduce using rule 26 (lvalue -> ID [ expr ] .)
    ]               reduce using rule 26 (lvalue -> ID [ expr ] .)
    ,               reduce using rule 26 (lvalue -> ID [ expr ] .)
    :               reduce using rule 26 (lvalue -> ID [ expr ] .)
    {               reduce using rule 26 (lvalue -> ID [ expr ] .)
    INTNUM          reduce using rule 26 (lvalue -> ID [ expr ] .)
    FLOATNUM        reduce using rule 26 (lvalue -> ID [ expr ] .)
    STRING          reduce using rule 26 (lvalue -> ID [ expr ] .)
    (               reduce using rule 26 (lvalue -> ID [ expr ] .)
    [               reduce using rule 26 (lvalue -> ID [ expr ] .)
    BREAK           reduce using rule 26 (lvalue -> ID [ expr ] .)
    CONTINUE        reduce using rule 26 (lvalue -> ID [ expr ] .)
    RETURN          reduce using rule 26 (lvalue -> ID [ expr ] .)
    PRINT           reduce using rule 26 (lvalue -> ID [ expr ] .)
    ID              reduce using rule 26 (lvalue -> ID [ expr ] .)
    IF              reduce using rule 26 (lvalue -> ID [ expr ] .)
    WHILE           reduce using rule 26 (lvalue -> ID [ expr ] .)
    FOR             reduce using rule 26 (lvalue -> ID [ expr ] .)


state 101

    (27) lvalue -> ID [ expr , . expr ]
    (15) expr -> . INTNUM
    (16) expr -> . FLOATNUM
    (17) expr -> . STRING
    (18) expr -> . lvalue
    (19) expr -> . ( expr )
    (20) expr -> . - expr
    (21) expr -> . expr '
    (24) expr -> . [ array_interior ]
    (28) expr -> . lvalue = expr
    (29) expr -> . lvalue PLUSASSIGN expr
    (30) expr -> . lvalue MINASSIGN expr
    (31) expr -> . lvalue MULTASSIGN expr
    (32) expr -> . lvalue DIVASSIGN expr
    (33) expr -> . lvalue = ZEROS ( expr )
    (34) expr -> . lvalue = ONES ( expr )
    (35) expr -> . lvalue = EYE ( expr )
    (36) expr -> . expr + expr
    (37) expr -> . expr - expr
    (38) expr -> . expr * expr
    (39) expr -> . expr / expr
    (40) expr -> . expr MPLUS expr
    (41) expr -> . expr MMINUS expr
    (42) expr -> . expr MMLTP expr
    (43) expr -> . expr MDIV expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr > expr
    (49) expr -> . expr < expr
    (25) lvalue -> . ID
    (26) lvalue -> . ID [ expr ]
    (27) lvalue -> . ID [ expr , expr ]

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13
    ID              shift and go to state 19

    expr                           shift and go to state 109
    lvalue                         shift and go to state 10

state 102

    (55) cond_if -> IF ( expr ) . cond_block
    (53) cond_block -> . struct
    (54) cond_block -> . { start }
    (5) struct -> . expr ;
    (6) struct -> . cond_expr
    (7) struct -> . instruction
    (15) expr -> . INTNUM
    (16) expr -> . FLOATNUM
    (17) expr -> . STRING
    (18) expr -> . lvalue
    (19) expr -> . ( expr )
    (20) expr -> . - expr
    (21) expr -> . expr '
    (24) expr -> . [ array_interior ]
    (28) expr -> . lvalue = expr
    (29) expr -> . lvalue PLUSASSIGN expr
    (30) expr -> . lvalue MINASSIGN expr
    (31) expr -> . lvalue MULTASSIGN expr
    (32) expr -> . lvalue DIVASSIGN expr
    (33) expr -> . lvalue = ZEROS ( expr )
    (34) expr -> . lvalue = ONES ( expr )
    (35) expr -> . lvalue = EYE ( expr )
    (36) expr -> . expr + expr
    (37) expr -> . expr - expr
    (38) expr -> . expr * expr
    (39) expr -> . expr / expr
    (40) expr -> . expr MPLUS expr
    (41) expr -> . expr MMINUS expr
    (42) expr -> . expr MMLTP expr
    (43) expr -> . expr MDIV expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr > expr
    (49) expr -> . expr < expr
    (50) cond_expr -> . cond_if
    (51) cond_expr -> . cond_while
    (52) cond_expr -> . cond_for
    (66) instruction -> . RETURN expr ;
    (67) instruction -> . PRINT array_interior ;
    (25) lvalue -> . ID
    (26) lvalue -> . ID [ expr ]
    (27) lvalue -> . ID [ expr , expr ]
    (55) cond_if -> . IF ( expr ) cond_block
    (56) cond_if -> . cond_if ELSE cond_block
    (64) cond_while -> . WHILE ( expr ) loop_cond_block
    (65) cond_for -> . FOR ID = expr : expr loop_cond_block

    {               shift and go to state 87
    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13
    RETURN          shift and go to state 17
    PRINT           shift and go to state 18
    ID              shift and go to state 19
    IF              shift and go to state 20
    WHILE           shift and go to state 21
    FOR             shift and go to state 22

    expr                           shift and go to state 4
    cond_block                     shift and go to state 110
    struct                         shift and go to state 86
    cond_expr                      shift and go to state 5
    instruction                    shift and go to state 6
    lvalue                         shift and go to state 10
    cond_if                        shift and go to state 14
    cond_while                     shift and go to state 15
    cond_for                       shift and go to state 16

state 103

    (64) cond_while -> WHILE ( expr ) . loop_cond_block
    (60) loop_cond_block -> . loop_struct
    (61) loop_cond_block -> . { loop_start }
    (12) loop_struct -> . expr ;
    (13) loop_struct -> . loop_cond_expr
    (14) loop_struct -> . loop_instruction
    (15) expr -> . INTNUM
    (16) expr -> . FLOATNUM
    (17) expr -> . STRING
    (18) expr -> . lvalue
    (19) expr -> . ( expr )
    (20) expr -> . - expr
    (21) expr -> . expr '
    (24) expr -> . [ array_interior ]
    (28) expr -> . lvalue = expr
    (29) expr -> . lvalue PLUSASSIGN expr
    (30) expr -> . lvalue MINASSIGN expr
    (31) expr -> . lvalue MULTASSIGN expr
    (32) expr -> . lvalue DIVASSIGN expr
    (33) expr -> . lvalue = ZEROS ( expr )
    (34) expr -> . lvalue = ONES ( expr )
    (35) expr -> . lvalue = EYE ( expr )
    (36) expr -> . expr + expr
    (37) expr -> . expr - expr
    (38) expr -> . expr * expr
    (39) expr -> . expr / expr
    (40) expr -> . expr MPLUS expr
    (41) expr -> . expr MMINUS expr
    (42) expr -> . expr MMLTP expr
    (43) expr -> . expr MDIV expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr > expr
    (49) expr -> . expr < expr
    (57) loop_cond_expr -> . loop_cond_if
    (58) loop_cond_expr -> . cond_while
    (59) loop_cond_expr -> . cond_for
    (68) loop_instruction -> . BREAK ;
    (69) loop_instruction -> . CONTINUE ;
    (70) loop_instruction -> . RETURN expr ;
    (71) loop_instruction -> . PRINT array_interior ;
    (25) lvalue -> . ID
    (26) lvalue -> . ID [ expr ]
    (27) lvalue -> . ID [ expr , expr ]
    (62) loop_cond_if -> . IF ( expr ) loop_cond_block
    (63) loop_cond_if -> . loop_cond_if ELSE loop_cond_block
    (64) cond_while -> . WHILE ( expr ) loop_cond_block
    (65) cond_for -> . FOR ID = expr : expr loop_cond_block

    {               shift and go to state 114
    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13
    BREAK           shift and go to state 120
    CONTINUE        shift and go to state 121
    RETURN          shift and go to state 122
    PRINT           shift and go to state 123
    ID              shift and go to state 19
    IF              shift and go to state 124
    WHILE           shift and go to state 21
    FOR             shift and go to state 22

    expr                           shift and go to state 111
    loop_cond_block                shift and go to state 112
    loop_struct                    shift and go to state 113
    loop_cond_expr                 shift and go to state 115
    loop_instruction               shift and go to state 116
    lvalue                         shift and go to state 10
    loop_cond_if                   shift and go to state 117
    cond_while                     shift and go to state 118
    cond_for                       shift and go to state 119

state 104

    (65) cond_for -> FOR ID = expr . : expr loop_cond_block
    (21) expr -> expr . '
    (36) expr -> expr . + expr
    (37) expr -> expr . - expr
    (38) expr -> expr . * expr
    (39) expr -> expr . / expr
    (40) expr -> expr . MPLUS expr
    (41) expr -> expr . MMINUS expr
    (42) expr -> expr . MMLTP expr
    (43) expr -> expr . MDIV expr
    (44) expr -> expr . EQ expr
    (45) expr -> expr . NEQ expr
    (46) expr -> expr . GTEQ expr
    (47) expr -> expr . LTEQ expr
    (48) expr -> expr . > expr
    (49) expr -> expr . < expr

    :               shift and go to state 125
    '               shift and go to state 27
    +               shift and go to state 28
    -               shift and go to state 29
    *               shift and go to state 30
    /               shift and go to state 31
    MPLUS           shift and go to state 32
    MMINUS          shift and go to state 33
    MMLTP           shift and go to state 34
    MDIV            shift and go to state 35
    EQ              shift and go to state 36
    NEQ             shift and go to state 37
    GTEQ            shift and go to state 38
    LTEQ            shift and go to state 39
    >               shift and go to state 40
    <               shift and go to state 41


state 105

    (33) expr -> lvalue = ZEROS ( expr . )
    (21) expr -> expr . '
    (36) expr -> expr . + expr
    (37) expr -> expr . - expr
    (38) expr -> expr . * expr
    (39) expr -> expr . / expr
    (40) expr -> expr . MPLUS expr
    (41) expr -> expr . MMINUS expr
    (42) expr -> expr . MMLTP expr
    (43) expr -> expr . MDIV expr
    (44) expr -> expr . EQ expr
    (45) expr -> expr . NEQ expr
    (46) expr -> expr . GTEQ expr
    (47) expr -> expr . LTEQ expr
    (48) expr -> expr . > expr
    (49) expr -> expr . < expr

    )               shift and go to state 126
    '               shift and go to state 27
    +               shift and go to state 28
    -               shift and go to state 29
    *               shift and go to state 30
    /               shift and go to state 31
    MPLUS           shift and go to state 32
    MMINUS          shift and go to state 33
    MMLTP           shift and go to state 34
    MDIV            shift and go to state 35
    EQ              shift and go to state 36
    NEQ             shift and go to state 37
    GTEQ            shift and go to state 38
    LTEQ            shift and go to state 39
    >               shift and go to state 40
    <               shift and go to state 41


state 106

    (34) expr -> lvalue = ONES ( expr . )
    (21) expr -> expr . '
    (36) expr -> expr . + expr
    (37) expr -> expr . - expr
    (38) expr -> expr . * expr
    (39) expr -> expr . / expr
    (40) expr -> expr . MPLUS expr
    (41) expr -> expr . MMINUS expr
    (42) expr -> expr . MMLTP expr
    (43) expr -> expr . MDIV expr
    (44) expr -> expr . EQ expr
    (45) expr -> expr . NEQ expr
    (46) expr -> expr . GTEQ expr
    (47) expr -> expr . LTEQ expr
    (48) expr -> expr . > expr
    (49) expr -> expr . < expr

    )               shift and go to state 127
    '               shift and go to state 27
    +               shift and go to state 28
    -               shift and go to state 29
    *               shift and go to state 30
    /               shift and go to state 31
    MPLUS           shift and go to state 32
    MMINUS          shift and go to state 33
    MMLTP           shift and go to state 34
    MDIV            shift and go to state 35
    EQ              shift and go to state 36
    NEQ             shift and go to state 37
    GTEQ            shift and go to state 38
    LTEQ            shift and go to state 39
    >               shift and go to state 40
    <               shift and go to state 41


state 107

    (35) expr -> lvalue = EYE ( expr . )
    (21) expr -> expr . '
    (36) expr -> expr . + expr
    (37) expr -> expr . - expr
    (38) expr -> expr . * expr
    (39) expr -> expr . / expr
    (40) expr -> expr . MPLUS expr
    (41) expr -> expr . MMINUS expr
    (42) expr -> expr . MMLTP expr
    (43) expr -> expr . MDIV expr
    (44) expr -> expr . EQ expr
    (45) expr -> expr . NEQ expr
    (46) expr -> expr . GTEQ expr
    (47) expr -> expr . LTEQ expr
    (48) expr -> expr . > expr
    (49) expr -> expr . < expr

    )               shift and go to state 128
    '               shift and go to state 27
    +               shift and go to state 28
    -               shift and go to state 29
    *               shift and go to state 30
    /               shift and go to state 31
    MPLUS           shift and go to state 32
    MMINUS          shift and go to state 33
    MMLTP           shift and go to state 34
    MDIV            shift and go to state 35
    EQ              shift and go to state 36
    NEQ             shift and go to state 37
    GTEQ            shift and go to state 38
    LTEQ            shift and go to state 39
    >               shift and go to state 40
    <               shift and go to state 41


state 108

    (54) cond_block -> { start } .

    ELSE            reduce using rule 54 (cond_block -> { start } .)
    {               reduce using rule 54 (cond_block -> { start } .)
    INTNUM          reduce using rule 54 (cond_block -> { start } .)
    FLOATNUM        reduce using rule 54 (cond_block -> { start } .)
    STRING          reduce using rule 54 (cond_block -> { start } .)
    (               reduce using rule 54 (cond_block -> { start } .)
    -               reduce using rule 54 (cond_block -> { start } .)
    [               reduce using rule 54 (cond_block -> { start } .)
    RETURN          reduce using rule 54 (cond_block -> { start } .)
    PRINT           reduce using rule 54 (cond_block -> { start } .)
    ID              reduce using rule 54 (cond_block -> { start } .)
    IF              reduce using rule 54 (cond_block -> { start } .)
    WHILE           reduce using rule 54 (cond_block -> { start } .)
    FOR             reduce using rule 54 (cond_block -> { start } .)
    $end            reduce using rule 54 (cond_block -> { start } .)
    }               reduce using rule 54 (cond_block -> { start } .)


state 109

    (27) lvalue -> ID [ expr , expr . ]
    (21) expr -> expr . '
    (36) expr -> expr . + expr
    (37) expr -> expr . - expr
    (38) expr -> expr . * expr
    (39) expr -> expr . / expr
    (40) expr -> expr . MPLUS expr
    (41) expr -> expr . MMINUS expr
    (42) expr -> expr . MMLTP expr
    (43) expr -> expr . MDIV expr
    (44) expr -> expr . EQ expr
    (45) expr -> expr . NEQ expr
    (46) expr -> expr . GTEQ expr
    (47) expr -> expr . LTEQ expr
    (48) expr -> expr . > expr
    (49) expr -> expr . < expr

    ]               shift and go to state 129
    '               shift and go to state 27
    +               shift and go to state 28
    -               shift and go to state 29
    *               shift and go to state 30
    /               shift and go to state 31
    MPLUS           shift and go to state 32
    MMINUS          shift and go to state 33
    MMLTP           shift and go to state 34
    MDIV            shift and go to state 35
    EQ              shift and go to state 36
    NEQ             shift and go to state 37
    GTEQ            shift and go to state 38
    LTEQ            shift and go to state 39
    >               shift and go to state 40
    <               shift and go to state 41


state 110

    (55) cond_if -> IF ( expr ) cond_block .

    ELSE            reduce using rule 55 (cond_if -> IF ( expr ) cond_block .)
    {               reduce using rule 55 (cond_if -> IF ( expr ) cond_block .)
    INTNUM          reduce using rule 55 (cond_if -> IF ( expr ) cond_block .)
    FLOATNUM        reduce using rule 55 (cond_if -> IF ( expr ) cond_block .)
    STRING          reduce using rule 55 (cond_if -> IF ( expr ) cond_block .)
    (               reduce using rule 55 (cond_if -> IF ( expr ) cond_block .)
    -               reduce using rule 55 (cond_if -> IF ( expr ) cond_block .)
    [               reduce using rule 55 (cond_if -> IF ( expr ) cond_block .)
    RETURN          reduce using rule 55 (cond_if -> IF ( expr ) cond_block .)
    PRINT           reduce using rule 55 (cond_if -> IF ( expr ) cond_block .)
    ID              reduce using rule 55 (cond_if -> IF ( expr ) cond_block .)
    IF              reduce using rule 55 (cond_if -> IF ( expr ) cond_block .)
    WHILE           reduce using rule 55 (cond_if -> IF ( expr ) cond_block .)
    FOR             reduce using rule 55 (cond_if -> IF ( expr ) cond_block .)
    $end            reduce using rule 55 (cond_if -> IF ( expr ) cond_block .)
    }               reduce using rule 55 (cond_if -> IF ( expr ) cond_block .)


state 111

    (12) loop_struct -> expr . ;
    (21) expr -> expr . '
    (36) expr -> expr . + expr
    (37) expr -> expr . - expr
    (38) expr -> expr . * expr
    (39) expr -> expr . / expr
    (40) expr -> expr . MPLUS expr
    (41) expr -> expr . MMINUS expr
    (42) expr -> expr . MMLTP expr
    (43) expr -> expr . MDIV expr
    (44) expr -> expr . EQ expr
    (45) expr -> expr . NEQ expr
    (46) expr -> expr . GTEQ expr
    (47) expr -> expr . LTEQ expr
    (48) expr -> expr . > expr
    (49) expr -> expr . < expr

    ;               shift and go to state 130
    '               shift and go to state 27
    +               shift and go to state 28
    -               shift and go to state 29
    *               shift and go to state 30
    /               shift and go to state 31
    MPLUS           shift and go to state 32
    MMINUS          shift and go to state 33
    MMLTP           shift and go to state 34
    MDIV            shift and go to state 35
    EQ              shift and go to state 36
    NEQ             shift and go to state 37
    GTEQ            shift and go to state 38
    LTEQ            shift and go to state 39
    >               shift and go to state 40
    <               shift and go to state 41


state 112

    (64) cond_while -> WHILE ( expr ) loop_cond_block .

    {               reduce using rule 64 (cond_while -> WHILE ( expr ) loop_cond_block .)
    INTNUM          reduce using rule 64 (cond_while -> WHILE ( expr ) loop_cond_block .)
    FLOATNUM        reduce using rule 64 (cond_while -> WHILE ( expr ) loop_cond_block .)
    STRING          reduce using rule 64 (cond_while -> WHILE ( expr ) loop_cond_block .)
    (               reduce using rule 64 (cond_while -> WHILE ( expr ) loop_cond_block .)
    -               reduce using rule 64 (cond_while -> WHILE ( expr ) loop_cond_block .)
    [               reduce using rule 64 (cond_while -> WHILE ( expr ) loop_cond_block .)
    RETURN          reduce using rule 64 (cond_while -> WHILE ( expr ) loop_cond_block .)
    PRINT           reduce using rule 64 (cond_while -> WHILE ( expr ) loop_cond_block .)
    ID              reduce using rule 64 (cond_while -> WHILE ( expr ) loop_cond_block .)
    IF              reduce using rule 64 (cond_while -> WHILE ( expr ) loop_cond_block .)
    WHILE           reduce using rule 64 (cond_while -> WHILE ( expr ) loop_cond_block .)
    FOR             reduce using rule 64 (cond_while -> WHILE ( expr ) loop_cond_block .)
    $end            reduce using rule 64 (cond_while -> WHILE ( expr ) loop_cond_block .)
    }               reduce using rule 64 (cond_while -> WHILE ( expr ) loop_cond_block .)
    ELSE            reduce using rule 64 (cond_while -> WHILE ( expr ) loop_cond_block .)
    BREAK           reduce using rule 64 (cond_while -> WHILE ( expr ) loop_cond_block .)
    CONTINUE        reduce using rule 64 (cond_while -> WHILE ( expr ) loop_cond_block .)


state 113

    (60) loop_cond_block -> loop_struct .

    {               reduce using rule 60 (loop_cond_block -> loop_struct .)
    INTNUM          reduce using rule 60 (loop_cond_block -> loop_struct .)
    FLOATNUM        reduce using rule 60 (loop_cond_block -> loop_struct .)
    STRING          reduce using rule 60 (loop_cond_block -> loop_struct .)
    (               reduce using rule 60 (loop_cond_block -> loop_struct .)
    -               reduce using rule 60 (loop_cond_block -> loop_struct .)
    [               reduce using rule 60 (loop_cond_block -> loop_struct .)
    RETURN          reduce using rule 60 (loop_cond_block -> loop_struct .)
    PRINT           reduce using rule 60 (loop_cond_block -> loop_struct .)
    ID              reduce using rule 60 (loop_cond_block -> loop_struct .)
    IF              reduce using rule 60 (loop_cond_block -> loop_struct .)
    WHILE           reduce using rule 60 (loop_cond_block -> loop_struct .)
    FOR             reduce using rule 60 (loop_cond_block -> loop_struct .)
    $end            reduce using rule 60 (loop_cond_block -> loop_struct .)
    }               reduce using rule 60 (loop_cond_block -> loop_struct .)
    ELSE            reduce using rule 60 (loop_cond_block -> loop_struct .)
    BREAK           reduce using rule 60 (loop_cond_block -> loop_struct .)
    CONTINUE        reduce using rule 60 (loop_cond_block -> loop_struct .)


state 114

    (61) loop_cond_block -> { . loop_start }
    (8) loop_start -> . loop_struct
    (9) loop_start -> . loop_start loop_struct
    (10) loop_start -> . { loop_start }
    (11) loop_start -> . loop_start { loop_start }
    (12) loop_struct -> . expr ;
    (13) loop_struct -> . loop_cond_expr
    (14) loop_struct -> . loop_instruction
    (15) expr -> . INTNUM
    (16) expr -> . FLOATNUM
    (17) expr -> . STRING
    (18) expr -> . lvalue
    (19) expr -> . ( expr )
    (20) expr -> . - expr
    (21) expr -> . expr '
    (24) expr -> . [ array_interior ]
    (28) expr -> . lvalue = expr
    (29) expr -> . lvalue PLUSASSIGN expr
    (30) expr -> . lvalue MINASSIGN expr
    (31) expr -> . lvalue MULTASSIGN expr
    (32) expr -> . lvalue DIVASSIGN expr
    (33) expr -> . lvalue = ZEROS ( expr )
    (34) expr -> . lvalue = ONES ( expr )
    (35) expr -> . lvalue = EYE ( expr )
    (36) expr -> . expr + expr
    (37) expr -> . expr - expr
    (38) expr -> . expr * expr
    (39) expr -> . expr / expr
    (40) expr -> . expr MPLUS expr
    (41) expr -> . expr MMINUS expr
    (42) expr -> . expr MMLTP expr
    (43) expr -> . expr MDIV expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr > expr
    (49) expr -> . expr < expr
    (57) loop_cond_expr -> . loop_cond_if
    (58) loop_cond_expr -> . cond_while
    (59) loop_cond_expr -> . cond_for
    (68) loop_instruction -> . BREAK ;
    (69) loop_instruction -> . CONTINUE ;
    (70) loop_instruction -> . RETURN expr ;
    (71) loop_instruction -> . PRINT array_interior ;
    (25) lvalue -> . ID
    (26) lvalue -> . ID [ expr ]
    (27) lvalue -> . ID [ expr , expr ]
    (62) loop_cond_if -> . IF ( expr ) loop_cond_block
    (63) loop_cond_if -> . loop_cond_if ELSE loop_cond_block
    (64) cond_while -> . WHILE ( expr ) loop_cond_block
    (65) cond_for -> . FOR ID = expr : expr loop_cond_block

    {               shift and go to state 131
    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13
    BREAK           shift and go to state 120
    CONTINUE        shift and go to state 121
    RETURN          shift and go to state 122
    PRINT           shift and go to state 123
    ID              shift and go to state 19
    IF              shift and go to state 124
    WHILE           shift and go to state 21
    FOR             shift and go to state 22

    loop_start                     shift and go to state 132
    loop_struct                    shift and go to state 133
    expr                           shift and go to state 111
    loop_cond_expr                 shift and go to state 115
    loop_instruction               shift and go to state 116
    lvalue                         shift and go to state 10
    loop_cond_if                   shift and go to state 117
    cond_while                     shift and go to state 118
    cond_for                       shift and go to state 119

state 115

    (13) loop_struct -> loop_cond_expr .

    {               reduce using rule 13 (loop_struct -> loop_cond_expr .)
    INTNUM          reduce using rule 13 (loop_struct -> loop_cond_expr .)
    FLOATNUM        reduce using rule 13 (loop_struct -> loop_cond_expr .)
    STRING          reduce using rule 13 (loop_struct -> loop_cond_expr .)
    (               reduce using rule 13 (loop_struct -> loop_cond_expr .)
    -               reduce using rule 13 (loop_struct -> loop_cond_expr .)
    [               reduce using rule 13 (loop_struct -> loop_cond_expr .)
    RETURN          reduce using rule 13 (loop_struct -> loop_cond_expr .)
    PRINT           reduce using rule 13 (loop_struct -> loop_cond_expr .)
    ID              reduce using rule 13 (loop_struct -> loop_cond_expr .)
    IF              reduce using rule 13 (loop_struct -> loop_cond_expr .)
    WHILE           reduce using rule 13 (loop_struct -> loop_cond_expr .)
    FOR             reduce using rule 13 (loop_struct -> loop_cond_expr .)
    $end            reduce using rule 13 (loop_struct -> loop_cond_expr .)
    }               reduce using rule 13 (loop_struct -> loop_cond_expr .)
    ELSE            reduce using rule 13 (loop_struct -> loop_cond_expr .)
    BREAK           reduce using rule 13 (loop_struct -> loop_cond_expr .)
    CONTINUE        reduce using rule 13 (loop_struct -> loop_cond_expr .)


state 116

    (14) loop_struct -> loop_instruction .

    {               reduce using rule 14 (loop_struct -> loop_instruction .)
    INTNUM          reduce using rule 14 (loop_struct -> loop_instruction .)
    FLOATNUM        reduce using rule 14 (loop_struct -> loop_instruction .)
    STRING          reduce using rule 14 (loop_struct -> loop_instruction .)
    (               reduce using rule 14 (loop_struct -> loop_instruction .)
    -               reduce using rule 14 (loop_struct -> loop_instruction .)
    [               reduce using rule 14 (loop_struct -> loop_instruction .)
    RETURN          reduce using rule 14 (loop_struct -> loop_instruction .)
    PRINT           reduce using rule 14 (loop_struct -> loop_instruction .)
    ID              reduce using rule 14 (loop_struct -> loop_instruction .)
    IF              reduce using rule 14 (loop_struct -> loop_instruction .)
    WHILE           reduce using rule 14 (loop_struct -> loop_instruction .)
    FOR             reduce using rule 14 (loop_struct -> loop_instruction .)
    $end            reduce using rule 14 (loop_struct -> loop_instruction .)
    }               reduce using rule 14 (loop_struct -> loop_instruction .)
    ELSE            reduce using rule 14 (loop_struct -> loop_instruction .)
    BREAK           reduce using rule 14 (loop_struct -> loop_instruction .)
    CONTINUE        reduce using rule 14 (loop_struct -> loop_instruction .)


state 117

    (57) loop_cond_expr -> loop_cond_if .
    (63) loop_cond_if -> loop_cond_if . ELSE loop_cond_block

  ! shift/reduce conflict for ELSE resolved as shift
    {               reduce using rule 57 (loop_cond_expr -> loop_cond_if .)
    INTNUM          reduce using rule 57 (loop_cond_expr -> loop_cond_if .)
    FLOATNUM        reduce using rule 57 (loop_cond_expr -> loop_cond_if .)
    STRING          reduce using rule 57 (loop_cond_expr -> loop_cond_if .)
    (               reduce using rule 57 (loop_cond_expr -> loop_cond_if .)
    -               reduce using rule 57 (loop_cond_expr -> loop_cond_if .)
    [               reduce using rule 57 (loop_cond_expr -> loop_cond_if .)
    RETURN          reduce using rule 57 (loop_cond_expr -> loop_cond_if .)
    PRINT           reduce using rule 57 (loop_cond_expr -> loop_cond_if .)
    ID              reduce using rule 57 (loop_cond_expr -> loop_cond_if .)
    IF              reduce using rule 57 (loop_cond_expr -> loop_cond_if .)
    WHILE           reduce using rule 57 (loop_cond_expr -> loop_cond_if .)
    FOR             reduce using rule 57 (loop_cond_expr -> loop_cond_if .)
    $end            reduce using rule 57 (loop_cond_expr -> loop_cond_if .)
    }               reduce using rule 57 (loop_cond_expr -> loop_cond_if .)
    BREAK           reduce using rule 57 (loop_cond_expr -> loop_cond_if .)
    CONTINUE        reduce using rule 57 (loop_cond_expr -> loop_cond_if .)
    ELSE            shift and go to state 134

  ! ELSE            [ reduce using rule 57 (loop_cond_expr -> loop_cond_if .) ]


state 118

    (58) loop_cond_expr -> cond_while .

    {               reduce using rule 58 (loop_cond_expr -> cond_while .)
    INTNUM          reduce using rule 58 (loop_cond_expr -> cond_while .)
    FLOATNUM        reduce using rule 58 (loop_cond_expr -> cond_while .)
    STRING          reduce using rule 58 (loop_cond_expr -> cond_while .)
    (               reduce using rule 58 (loop_cond_expr -> cond_while .)
    -               reduce using rule 58 (loop_cond_expr -> cond_while .)
    [               reduce using rule 58 (loop_cond_expr -> cond_while .)
    RETURN          reduce using rule 58 (loop_cond_expr -> cond_while .)
    PRINT           reduce using rule 58 (loop_cond_expr -> cond_while .)
    ID              reduce using rule 58 (loop_cond_expr -> cond_while .)
    IF              reduce using rule 58 (loop_cond_expr -> cond_while .)
    WHILE           reduce using rule 58 (loop_cond_expr -> cond_while .)
    FOR             reduce using rule 58 (loop_cond_expr -> cond_while .)
    $end            reduce using rule 58 (loop_cond_expr -> cond_while .)
    }               reduce using rule 58 (loop_cond_expr -> cond_while .)
    ELSE            reduce using rule 58 (loop_cond_expr -> cond_while .)
    BREAK           reduce using rule 58 (loop_cond_expr -> cond_while .)
    CONTINUE        reduce using rule 58 (loop_cond_expr -> cond_while .)


state 119

    (59) loop_cond_expr -> cond_for .

    {               reduce using rule 59 (loop_cond_expr -> cond_for .)
    INTNUM          reduce using rule 59 (loop_cond_expr -> cond_for .)
    FLOATNUM        reduce using rule 59 (loop_cond_expr -> cond_for .)
    STRING          reduce using rule 59 (loop_cond_expr -> cond_for .)
    (               reduce using rule 59 (loop_cond_expr -> cond_for .)
    -               reduce using rule 59 (loop_cond_expr -> cond_for .)
    [               reduce using rule 59 (loop_cond_expr -> cond_for .)
    RETURN          reduce using rule 59 (loop_cond_expr -> cond_for .)
    PRINT           reduce using rule 59 (loop_cond_expr -> cond_for .)
    ID              reduce using rule 59 (loop_cond_expr -> cond_for .)
    IF              reduce using rule 59 (loop_cond_expr -> cond_for .)
    WHILE           reduce using rule 59 (loop_cond_expr -> cond_for .)
    FOR             reduce using rule 59 (loop_cond_expr -> cond_for .)
    $end            reduce using rule 59 (loop_cond_expr -> cond_for .)
    }               reduce using rule 59 (loop_cond_expr -> cond_for .)
    ELSE            reduce using rule 59 (loop_cond_expr -> cond_for .)
    BREAK           reduce using rule 59 (loop_cond_expr -> cond_for .)
    CONTINUE        reduce using rule 59 (loop_cond_expr -> cond_for .)


state 120

    (68) loop_instruction -> BREAK . ;

    ;               shift and go to state 135


state 121

    (69) loop_instruction -> CONTINUE . ;

    ;               shift and go to state 136


state 122

    (70) loop_instruction -> RETURN . expr ;
    (15) expr -> . INTNUM
    (16) expr -> . FLOATNUM
    (17) expr -> . STRING
    (18) expr -> . lvalue
    (19) expr -> . ( expr )
    (20) expr -> . - expr
    (21) expr -> . expr '
    (24) expr -> . [ array_interior ]
    (28) expr -> . lvalue = expr
    (29) expr -> . lvalue PLUSASSIGN expr
    (30) expr -> . lvalue MINASSIGN expr
    (31) expr -> . lvalue MULTASSIGN expr
    (32) expr -> . lvalue DIVASSIGN expr
    (33) expr -> . lvalue = ZEROS ( expr )
    (34) expr -> . lvalue = ONES ( expr )
    (35) expr -> . lvalue = EYE ( expr )
    (36) expr -> . expr + expr
    (37) expr -> . expr - expr
    (38) expr -> . expr * expr
    (39) expr -> . expr / expr
    (40) expr -> . expr MPLUS expr
    (41) expr -> . expr MMINUS expr
    (42) expr -> . expr MMLTP expr
    (43) expr -> . expr MDIV expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr > expr
    (49) expr -> . expr < expr
    (25) lvalue -> . ID
    (26) lvalue -> . ID [ expr ]
    (27) lvalue -> . ID [ expr , expr ]

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13
    ID              shift and go to state 19

    expr                           shift and go to state 137
    lvalue                         shift and go to state 10

state 123

    (71) loop_instruction -> PRINT . array_interior ;
    (22) array_interior -> . array_interior , expr
    (23) array_interior -> . expr
    (15) expr -> . INTNUM
    (16) expr -> . FLOATNUM
    (17) expr -> . STRING
    (18) expr -> . lvalue
    (19) expr -> . ( expr )
    (20) expr -> . - expr
    (21) expr -> . expr '
    (24) expr -> . [ array_interior ]
    (28) expr -> . lvalue = expr
    (29) expr -> . lvalue PLUSASSIGN expr
    (30) expr -> . lvalue MINASSIGN expr
    (31) expr -> . lvalue MULTASSIGN expr
    (32) expr -> . lvalue DIVASSIGN expr
    (33) expr -> . lvalue = ZEROS ( expr )
    (34) expr -> . lvalue = ONES ( expr )
    (35) expr -> . lvalue = EYE ( expr )
    (36) expr -> . expr + expr
    (37) expr -> . expr - expr
    (38) expr -> . expr * expr
    (39) expr -> . expr / expr
    (40) expr -> . expr MPLUS expr
    (41) expr -> . expr MMINUS expr
    (42) expr -> . expr MMLTP expr
    (43) expr -> . expr MDIV expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr > expr
    (49) expr -> . expr < expr
    (25) lvalue -> . ID
    (26) lvalue -> . ID [ expr ]
    (27) lvalue -> . ID [ expr , expr ]

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13
    ID              shift and go to state 19

    array_interior                 shift and go to state 138
    expr                           shift and go to state 50
    lvalue                         shift and go to state 10

state 124

    (62) loop_cond_if -> IF . ( expr ) loop_cond_block

    (               shift and go to state 139


state 125

    (65) cond_for -> FOR ID = expr : . expr loop_cond_block
    (15) expr -> . INTNUM
    (16) expr -> . FLOATNUM
    (17) expr -> . STRING
    (18) expr -> . lvalue
    (19) expr -> . ( expr )
    (20) expr -> . - expr
    (21) expr -> . expr '
    (24) expr -> . [ array_interior ]
    (28) expr -> . lvalue = expr
    (29) expr -> . lvalue PLUSASSIGN expr
    (30) expr -> . lvalue MINASSIGN expr
    (31) expr -> . lvalue MULTASSIGN expr
    (32) expr -> . lvalue DIVASSIGN expr
    (33) expr -> . lvalue = ZEROS ( expr )
    (34) expr -> . lvalue = ONES ( expr )
    (35) expr -> . lvalue = EYE ( expr )
    (36) expr -> . expr + expr
    (37) expr -> . expr - expr
    (38) expr -> . expr * expr
    (39) expr -> . expr / expr
    (40) expr -> . expr MPLUS expr
    (41) expr -> . expr MMINUS expr
    (42) expr -> . expr MMLTP expr
    (43) expr -> . expr MDIV expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr > expr
    (49) expr -> . expr < expr
    (25) lvalue -> . ID
    (26) lvalue -> . ID [ expr ]
    (27) lvalue -> . ID [ expr , expr ]

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13
    ID              shift and go to state 19

    expr                           shift and go to state 140
    lvalue                         shift and go to state 10

state 126

    (33) expr -> lvalue = ZEROS ( expr ) .

    ;               reduce using rule 33 (expr -> lvalue = ZEROS ( expr ) .)
    '               reduce using rule 33 (expr -> lvalue = ZEROS ( expr ) .)
    +               reduce using rule 33 (expr -> lvalue = ZEROS ( expr ) .)
    -               reduce using rule 33 (expr -> lvalue = ZEROS ( expr ) .)
    *               reduce using rule 33 (expr -> lvalue = ZEROS ( expr ) .)
    /               reduce using rule 33 (expr -> lvalue = ZEROS ( expr ) .)
    MPLUS           reduce using rule 33 (expr -> lvalue = ZEROS ( expr ) .)
    MMINUS          reduce using rule 33 (expr -> lvalue = ZEROS ( expr ) .)
    MMLTP           reduce using rule 33 (expr -> lvalue = ZEROS ( expr ) .)
    MDIV            reduce using rule 33 (expr -> lvalue = ZEROS ( expr ) .)
    EQ              reduce using rule 33 (expr -> lvalue = ZEROS ( expr ) .)
    NEQ             reduce using rule 33 (expr -> lvalue = ZEROS ( expr ) .)
    GTEQ            reduce using rule 33 (expr -> lvalue = ZEROS ( expr ) .)
    LTEQ            reduce using rule 33 (expr -> lvalue = ZEROS ( expr ) .)
    >               reduce using rule 33 (expr -> lvalue = ZEROS ( expr ) .)
    <               reduce using rule 33 (expr -> lvalue = ZEROS ( expr ) .)
    )               reduce using rule 33 (expr -> lvalue = ZEROS ( expr ) .)
    ]               reduce using rule 33 (expr -> lvalue = ZEROS ( expr ) .)
    ,               reduce using rule 33 (expr -> lvalue = ZEROS ( expr ) .)
    :               reduce using rule 33 (expr -> lvalue = ZEROS ( expr ) .)
    {               reduce using rule 33 (expr -> lvalue = ZEROS ( expr ) .)
    INTNUM          reduce using rule 33 (expr -> lvalue = ZEROS ( expr ) .)
    FLOATNUM        reduce using rule 33 (expr -> lvalue = ZEROS ( expr ) .)
    STRING          reduce using rule 33 (expr -> lvalue = ZEROS ( expr ) .)
    (               reduce using rule 33 (expr -> lvalue = ZEROS ( expr ) .)
    [               reduce using rule 33 (expr -> lvalue = ZEROS ( expr ) .)
    BREAK           reduce using rule 33 (expr -> lvalue = ZEROS ( expr ) .)
    CONTINUE        reduce using rule 33 (expr -> lvalue = ZEROS ( expr ) .)
    RETURN          reduce using rule 33 (expr -> lvalue = ZEROS ( expr ) .)
    PRINT           reduce using rule 33 (expr -> lvalue = ZEROS ( expr ) .)
    ID              reduce using rule 33 (expr -> lvalue = ZEROS ( expr ) .)
    IF              reduce using rule 33 (expr -> lvalue = ZEROS ( expr ) .)
    WHILE           reduce using rule 33 (expr -> lvalue = ZEROS ( expr ) .)
    FOR             reduce using rule 33 (expr -> lvalue = ZEROS ( expr ) .)


state 127

    (34) expr -> lvalue = ONES ( expr ) .

    ;               reduce using rule 34 (expr -> lvalue = ONES ( expr ) .)
    '               reduce using rule 34 (expr -> lvalue = ONES ( expr ) .)
    +               reduce using rule 34 (expr -> lvalue = ONES ( expr ) .)
    -               reduce using rule 34 (expr -> lvalue = ONES ( expr ) .)
    *               reduce using rule 34 (expr -> lvalue = ONES ( expr ) .)
    /               reduce using rule 34 (expr -> lvalue = ONES ( expr ) .)
    MPLUS           reduce using rule 34 (expr -> lvalue = ONES ( expr ) .)
    MMINUS          reduce using rule 34 (expr -> lvalue = ONES ( expr ) .)
    MMLTP           reduce using rule 34 (expr -> lvalue = ONES ( expr ) .)
    MDIV            reduce using rule 34 (expr -> lvalue = ONES ( expr ) .)
    EQ              reduce using rule 34 (expr -> lvalue = ONES ( expr ) .)
    NEQ             reduce using rule 34 (expr -> lvalue = ONES ( expr ) .)
    GTEQ            reduce using rule 34 (expr -> lvalue = ONES ( expr ) .)
    LTEQ            reduce using rule 34 (expr -> lvalue = ONES ( expr ) .)
    >               reduce using rule 34 (expr -> lvalue = ONES ( expr ) .)
    <               reduce using rule 34 (expr -> lvalue = ONES ( expr ) .)
    )               reduce using rule 34 (expr -> lvalue = ONES ( expr ) .)
    ]               reduce using rule 34 (expr -> lvalue = ONES ( expr ) .)
    ,               reduce using rule 34 (expr -> lvalue = ONES ( expr ) .)
    :               reduce using rule 34 (expr -> lvalue = ONES ( expr ) .)
    {               reduce using rule 34 (expr -> lvalue = ONES ( expr ) .)
    INTNUM          reduce using rule 34 (expr -> lvalue = ONES ( expr ) .)
    FLOATNUM        reduce using rule 34 (expr -> lvalue = ONES ( expr ) .)
    STRING          reduce using rule 34 (expr -> lvalue = ONES ( expr ) .)
    (               reduce using rule 34 (expr -> lvalue = ONES ( expr ) .)
    [               reduce using rule 34 (expr -> lvalue = ONES ( expr ) .)
    BREAK           reduce using rule 34 (expr -> lvalue = ONES ( expr ) .)
    CONTINUE        reduce using rule 34 (expr -> lvalue = ONES ( expr ) .)
    RETURN          reduce using rule 34 (expr -> lvalue = ONES ( expr ) .)
    PRINT           reduce using rule 34 (expr -> lvalue = ONES ( expr ) .)
    ID              reduce using rule 34 (expr -> lvalue = ONES ( expr ) .)
    IF              reduce using rule 34 (expr -> lvalue = ONES ( expr ) .)
    WHILE           reduce using rule 34 (expr -> lvalue = ONES ( expr ) .)
    FOR             reduce using rule 34 (expr -> lvalue = ONES ( expr ) .)


state 128

    (35) expr -> lvalue = EYE ( expr ) .

    ;               reduce using rule 35 (expr -> lvalue = EYE ( expr ) .)
    '               reduce using rule 35 (expr -> lvalue = EYE ( expr ) .)
    +               reduce using rule 35 (expr -> lvalue = EYE ( expr ) .)
    -               reduce using rule 35 (expr -> lvalue = EYE ( expr ) .)
    *               reduce using rule 35 (expr -> lvalue = EYE ( expr ) .)
    /               reduce using rule 35 (expr -> lvalue = EYE ( expr ) .)
    MPLUS           reduce using rule 35 (expr -> lvalue = EYE ( expr ) .)
    MMINUS          reduce using rule 35 (expr -> lvalue = EYE ( expr ) .)
    MMLTP           reduce using rule 35 (expr -> lvalue = EYE ( expr ) .)
    MDIV            reduce using rule 35 (expr -> lvalue = EYE ( expr ) .)
    EQ              reduce using rule 35 (expr -> lvalue = EYE ( expr ) .)
    NEQ             reduce using rule 35 (expr -> lvalue = EYE ( expr ) .)
    GTEQ            reduce using rule 35 (expr -> lvalue = EYE ( expr ) .)
    LTEQ            reduce using rule 35 (expr -> lvalue = EYE ( expr ) .)
    >               reduce using rule 35 (expr -> lvalue = EYE ( expr ) .)
    <               reduce using rule 35 (expr -> lvalue = EYE ( expr ) .)
    )               reduce using rule 35 (expr -> lvalue = EYE ( expr ) .)
    ]               reduce using rule 35 (expr -> lvalue = EYE ( expr ) .)
    ,               reduce using rule 35 (expr -> lvalue = EYE ( expr ) .)
    :               reduce using rule 35 (expr -> lvalue = EYE ( expr ) .)
    {               reduce using rule 35 (expr -> lvalue = EYE ( expr ) .)
    INTNUM          reduce using rule 35 (expr -> lvalue = EYE ( expr ) .)
    FLOATNUM        reduce using rule 35 (expr -> lvalue = EYE ( expr ) .)
    STRING          reduce using rule 35 (expr -> lvalue = EYE ( expr ) .)
    (               reduce using rule 35 (expr -> lvalue = EYE ( expr ) .)
    [               reduce using rule 35 (expr -> lvalue = EYE ( expr ) .)
    BREAK           reduce using rule 35 (expr -> lvalue = EYE ( expr ) .)
    CONTINUE        reduce using rule 35 (expr -> lvalue = EYE ( expr ) .)
    RETURN          reduce using rule 35 (expr -> lvalue = EYE ( expr ) .)
    PRINT           reduce using rule 35 (expr -> lvalue = EYE ( expr ) .)
    ID              reduce using rule 35 (expr -> lvalue = EYE ( expr ) .)
    IF              reduce using rule 35 (expr -> lvalue = EYE ( expr ) .)
    WHILE           reduce using rule 35 (expr -> lvalue = EYE ( expr ) .)
    FOR             reduce using rule 35 (expr -> lvalue = EYE ( expr ) .)


state 129

    (27) lvalue -> ID [ expr , expr ] .

    =               reduce using rule 27 (lvalue -> ID [ expr , expr ] .)
    PLUSASSIGN      reduce using rule 27 (lvalue -> ID [ expr , expr ] .)
    MINASSIGN       reduce using rule 27 (lvalue -> ID [ expr , expr ] .)
    MULTASSIGN      reduce using rule 27 (lvalue -> ID [ expr , expr ] .)
    DIVASSIGN       reduce using rule 27 (lvalue -> ID [ expr , expr ] .)
    ;               reduce using rule 27 (lvalue -> ID [ expr , expr ] .)
    '               reduce using rule 27 (lvalue -> ID [ expr , expr ] .)
    +               reduce using rule 27 (lvalue -> ID [ expr , expr ] .)
    -               reduce using rule 27 (lvalue -> ID [ expr , expr ] .)
    *               reduce using rule 27 (lvalue -> ID [ expr , expr ] .)
    /               reduce using rule 27 (lvalue -> ID [ expr , expr ] .)
    MPLUS           reduce using rule 27 (lvalue -> ID [ expr , expr ] .)
    MMINUS          reduce using rule 27 (lvalue -> ID [ expr , expr ] .)
    MMLTP           reduce using rule 27 (lvalue -> ID [ expr , expr ] .)
    MDIV            reduce using rule 27 (lvalue -> ID [ expr , expr ] .)
    EQ              reduce using rule 27 (lvalue -> ID [ expr , expr ] .)
    NEQ             reduce using rule 27 (lvalue -> ID [ expr , expr ] .)
    GTEQ            reduce using rule 27 (lvalue -> ID [ expr , expr ] .)
    LTEQ            reduce using rule 27 (lvalue -> ID [ expr , expr ] .)
    >               reduce using rule 27 (lvalue -> ID [ expr , expr ] .)
    <               reduce using rule 27 (lvalue -> ID [ expr , expr ] .)
    )               reduce using rule 27 (lvalue -> ID [ expr , expr ] .)
    ]               reduce using rule 27 (lvalue -> ID [ expr , expr ] .)
    ,               reduce using rule 27 (lvalue -> ID [ expr , expr ] .)
    :               reduce using rule 27 (lvalue -> ID [ expr , expr ] .)
    {               reduce using rule 27 (lvalue -> ID [ expr , expr ] .)
    INTNUM          reduce using rule 27 (lvalue -> ID [ expr , expr ] .)
    FLOATNUM        reduce using rule 27 (lvalue -> ID [ expr , expr ] .)
    STRING          reduce using rule 27 (lvalue -> ID [ expr , expr ] .)
    (               reduce using rule 27 (lvalue -> ID [ expr , expr ] .)
    [               reduce using rule 27 (lvalue -> ID [ expr , expr ] .)
    BREAK           reduce using rule 27 (lvalue -> ID [ expr , expr ] .)
    CONTINUE        reduce using rule 27 (lvalue -> ID [ expr , expr ] .)
    RETURN          reduce using rule 27 (lvalue -> ID [ expr , expr ] .)
    PRINT           reduce using rule 27 (lvalue -> ID [ expr , expr ] .)
    ID              reduce using rule 27 (lvalue -> ID [ expr , expr ] .)
    IF              reduce using rule 27 (lvalue -> ID [ expr , expr ] .)
    WHILE           reduce using rule 27 (lvalue -> ID [ expr , expr ] .)
    FOR             reduce using rule 27 (lvalue -> ID [ expr , expr ] .)


state 130

    (12) loop_struct -> expr ; .

    {               reduce using rule 12 (loop_struct -> expr ; .)
    INTNUM          reduce using rule 12 (loop_struct -> expr ; .)
    FLOATNUM        reduce using rule 12 (loop_struct -> expr ; .)
    STRING          reduce using rule 12 (loop_struct -> expr ; .)
    (               reduce using rule 12 (loop_struct -> expr ; .)
    -               reduce using rule 12 (loop_struct -> expr ; .)
    [               reduce using rule 12 (loop_struct -> expr ; .)
    RETURN          reduce using rule 12 (loop_struct -> expr ; .)
    PRINT           reduce using rule 12 (loop_struct -> expr ; .)
    ID              reduce using rule 12 (loop_struct -> expr ; .)
    IF              reduce using rule 12 (loop_struct -> expr ; .)
    WHILE           reduce using rule 12 (loop_struct -> expr ; .)
    FOR             reduce using rule 12 (loop_struct -> expr ; .)
    $end            reduce using rule 12 (loop_struct -> expr ; .)
    }               reduce using rule 12 (loop_struct -> expr ; .)
    ELSE            reduce using rule 12 (loop_struct -> expr ; .)
    BREAK           reduce using rule 12 (loop_struct -> expr ; .)
    CONTINUE        reduce using rule 12 (loop_struct -> expr ; .)


state 131

    (10) loop_start -> { . loop_start }
    (8) loop_start -> . loop_struct
    (9) loop_start -> . loop_start loop_struct
    (10) loop_start -> . { loop_start }
    (11) loop_start -> . loop_start { loop_start }
    (12) loop_struct -> . expr ;
    (13) loop_struct -> . loop_cond_expr
    (14) loop_struct -> . loop_instruction
    (15) expr -> . INTNUM
    (16) expr -> . FLOATNUM
    (17) expr -> . STRING
    (18) expr -> . lvalue
    (19) expr -> . ( expr )
    (20) expr -> . - expr
    (21) expr -> . expr '
    (24) expr -> . [ array_interior ]
    (28) expr -> . lvalue = expr
    (29) expr -> . lvalue PLUSASSIGN expr
    (30) expr -> . lvalue MINASSIGN expr
    (31) expr -> . lvalue MULTASSIGN expr
    (32) expr -> . lvalue DIVASSIGN expr
    (33) expr -> . lvalue = ZEROS ( expr )
    (34) expr -> . lvalue = ONES ( expr )
    (35) expr -> . lvalue = EYE ( expr )
    (36) expr -> . expr + expr
    (37) expr -> . expr - expr
    (38) expr -> . expr * expr
    (39) expr -> . expr / expr
    (40) expr -> . expr MPLUS expr
    (41) expr -> . expr MMINUS expr
    (42) expr -> . expr MMLTP expr
    (43) expr -> . expr MDIV expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr > expr
    (49) expr -> . expr < expr
    (57) loop_cond_expr -> . loop_cond_if
    (58) loop_cond_expr -> . cond_while
    (59) loop_cond_expr -> . cond_for
    (68) loop_instruction -> . BREAK ;
    (69) loop_instruction -> . CONTINUE ;
    (70) loop_instruction -> . RETURN expr ;
    (71) loop_instruction -> . PRINT array_interior ;
    (25) lvalue -> . ID
    (26) lvalue -> . ID [ expr ]
    (27) lvalue -> . ID [ expr , expr ]
    (62) loop_cond_if -> . IF ( expr ) loop_cond_block
    (63) loop_cond_if -> . loop_cond_if ELSE loop_cond_block
    (64) cond_while -> . WHILE ( expr ) loop_cond_block
    (65) cond_for -> . FOR ID = expr : expr loop_cond_block

    {               shift and go to state 131
    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13
    BREAK           shift and go to state 120
    CONTINUE        shift and go to state 121
    RETURN          shift and go to state 122
    PRINT           shift and go to state 123
    ID              shift and go to state 19
    IF              shift and go to state 124
    WHILE           shift and go to state 21
    FOR             shift and go to state 22

    loop_start                     shift and go to state 141
    loop_struct                    shift and go to state 133
    expr                           shift and go to state 111
    loop_cond_expr                 shift and go to state 115
    loop_instruction               shift and go to state 116
    lvalue                         shift and go to state 10
    loop_cond_if                   shift and go to state 117
    cond_while                     shift and go to state 118
    cond_for                       shift and go to state 119

state 132

    (61) loop_cond_block -> { loop_start . }
    (9) loop_start -> loop_start . loop_struct
    (11) loop_start -> loop_start . { loop_start }
    (12) loop_struct -> . expr ;
    (13) loop_struct -> . loop_cond_expr
    (14) loop_struct -> . loop_instruction
    (15) expr -> . INTNUM
    (16) expr -> . FLOATNUM
    (17) expr -> . STRING
    (18) expr -> . lvalue
    (19) expr -> . ( expr )
    (20) expr -> . - expr
    (21) expr -> . expr '
    (24) expr -> . [ array_interior ]
    (28) expr -> . lvalue = expr
    (29) expr -> . lvalue PLUSASSIGN expr
    (30) expr -> . lvalue MINASSIGN expr
    (31) expr -> . lvalue MULTASSIGN expr
    (32) expr -> . lvalue DIVASSIGN expr
    (33) expr -> . lvalue = ZEROS ( expr )
    (34) expr -> . lvalue = ONES ( expr )
    (35) expr -> . lvalue = EYE ( expr )
    (36) expr -> . expr + expr
    (37) expr -> . expr - expr
    (38) expr -> . expr * expr
    (39) expr -> . expr / expr
    (40) expr -> . expr MPLUS expr
    (41) expr -> . expr MMINUS expr
    (42) expr -> . expr MMLTP expr
    (43) expr -> . expr MDIV expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr > expr
    (49) expr -> . expr < expr
    (57) loop_cond_expr -> . loop_cond_if
    (58) loop_cond_expr -> . cond_while
    (59) loop_cond_expr -> . cond_for
    (68) loop_instruction -> . BREAK ;
    (69) loop_instruction -> . CONTINUE ;
    (70) loop_instruction -> . RETURN expr ;
    (71) loop_instruction -> . PRINT array_interior ;
    (25) lvalue -> . ID
    (26) lvalue -> . ID [ expr ]
    (27) lvalue -> . ID [ expr , expr ]
    (62) loop_cond_if -> . IF ( expr ) loop_cond_block
    (63) loop_cond_if -> . loop_cond_if ELSE loop_cond_block
    (64) cond_while -> . WHILE ( expr ) loop_cond_block
    (65) cond_for -> . FOR ID = expr : expr loop_cond_block

    }               shift and go to state 143
    {               shift and go to state 142
    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13
    BREAK           shift and go to state 120
    CONTINUE        shift and go to state 121
    RETURN          shift and go to state 122
    PRINT           shift and go to state 123
    ID              shift and go to state 19
    IF              shift and go to state 124
    WHILE           shift and go to state 21
    FOR             shift and go to state 22

    loop_struct                    shift and go to state 144
    expr                           shift and go to state 111
    loop_cond_expr                 shift and go to state 115
    loop_instruction               shift and go to state 116
    lvalue                         shift and go to state 10
    loop_cond_if                   shift and go to state 117
    cond_while                     shift and go to state 118
    cond_for                       shift and go to state 119

state 133

    (8) loop_start -> loop_struct .

    }               reduce using rule 8 (loop_start -> loop_struct .)
    {               reduce using rule 8 (loop_start -> loop_struct .)
    INTNUM          reduce using rule 8 (loop_start -> loop_struct .)
    FLOATNUM        reduce using rule 8 (loop_start -> loop_struct .)
    STRING          reduce using rule 8 (loop_start -> loop_struct .)
    (               reduce using rule 8 (loop_start -> loop_struct .)
    -               reduce using rule 8 (loop_start -> loop_struct .)
    [               reduce using rule 8 (loop_start -> loop_struct .)
    BREAK           reduce using rule 8 (loop_start -> loop_struct .)
    CONTINUE        reduce using rule 8 (loop_start -> loop_struct .)
    RETURN          reduce using rule 8 (loop_start -> loop_struct .)
    PRINT           reduce using rule 8 (loop_start -> loop_struct .)
    ID              reduce using rule 8 (loop_start -> loop_struct .)
    IF              reduce using rule 8 (loop_start -> loop_struct .)
    WHILE           reduce using rule 8 (loop_start -> loop_struct .)
    FOR             reduce using rule 8 (loop_start -> loop_struct .)


state 134

    (63) loop_cond_if -> loop_cond_if ELSE . loop_cond_block
    (60) loop_cond_block -> . loop_struct
    (61) loop_cond_block -> . { loop_start }
    (12) loop_struct -> . expr ;
    (13) loop_struct -> . loop_cond_expr
    (14) loop_struct -> . loop_instruction
    (15) expr -> . INTNUM
    (16) expr -> . FLOATNUM
    (17) expr -> . STRING
    (18) expr -> . lvalue
    (19) expr -> . ( expr )
    (20) expr -> . - expr
    (21) expr -> . expr '
    (24) expr -> . [ array_interior ]
    (28) expr -> . lvalue = expr
    (29) expr -> . lvalue PLUSASSIGN expr
    (30) expr -> . lvalue MINASSIGN expr
    (31) expr -> . lvalue MULTASSIGN expr
    (32) expr -> . lvalue DIVASSIGN expr
    (33) expr -> . lvalue = ZEROS ( expr )
    (34) expr -> . lvalue = ONES ( expr )
    (35) expr -> . lvalue = EYE ( expr )
    (36) expr -> . expr + expr
    (37) expr -> . expr - expr
    (38) expr -> . expr * expr
    (39) expr -> . expr / expr
    (40) expr -> . expr MPLUS expr
    (41) expr -> . expr MMINUS expr
    (42) expr -> . expr MMLTP expr
    (43) expr -> . expr MDIV expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr > expr
    (49) expr -> . expr < expr
    (57) loop_cond_expr -> . loop_cond_if
    (58) loop_cond_expr -> . cond_while
    (59) loop_cond_expr -> . cond_for
    (68) loop_instruction -> . BREAK ;
    (69) loop_instruction -> . CONTINUE ;
    (70) loop_instruction -> . RETURN expr ;
    (71) loop_instruction -> . PRINT array_interior ;
    (25) lvalue -> . ID
    (26) lvalue -> . ID [ expr ]
    (27) lvalue -> . ID [ expr , expr ]
    (62) loop_cond_if -> . IF ( expr ) loop_cond_block
    (63) loop_cond_if -> . loop_cond_if ELSE loop_cond_block
    (64) cond_while -> . WHILE ( expr ) loop_cond_block
    (65) cond_for -> . FOR ID = expr : expr loop_cond_block

    {               shift and go to state 114
    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13
    BREAK           shift and go to state 120
    CONTINUE        shift and go to state 121
    RETURN          shift and go to state 122
    PRINT           shift and go to state 123
    ID              shift and go to state 19
    IF              shift and go to state 124
    WHILE           shift and go to state 21
    FOR             shift and go to state 22

    loop_cond_if                   shift and go to state 117
    loop_cond_block                shift and go to state 145
    loop_struct                    shift and go to state 113
    expr                           shift and go to state 111
    loop_cond_expr                 shift and go to state 115
    loop_instruction               shift and go to state 116
    lvalue                         shift and go to state 10
    cond_while                     shift and go to state 118
    cond_for                       shift and go to state 119

state 135

    (68) loop_instruction -> BREAK ; .

    {               reduce using rule 68 (loop_instruction -> BREAK ; .)
    INTNUM          reduce using rule 68 (loop_instruction -> BREAK ; .)
    FLOATNUM        reduce using rule 68 (loop_instruction -> BREAK ; .)
    STRING          reduce using rule 68 (loop_instruction -> BREAK ; .)
    (               reduce using rule 68 (loop_instruction -> BREAK ; .)
    -               reduce using rule 68 (loop_instruction -> BREAK ; .)
    [               reduce using rule 68 (loop_instruction -> BREAK ; .)
    RETURN          reduce using rule 68 (loop_instruction -> BREAK ; .)
    PRINT           reduce using rule 68 (loop_instruction -> BREAK ; .)
    ID              reduce using rule 68 (loop_instruction -> BREAK ; .)
    IF              reduce using rule 68 (loop_instruction -> BREAK ; .)
    WHILE           reduce using rule 68 (loop_instruction -> BREAK ; .)
    FOR             reduce using rule 68 (loop_instruction -> BREAK ; .)
    $end            reduce using rule 68 (loop_instruction -> BREAK ; .)
    }               reduce using rule 68 (loop_instruction -> BREAK ; .)
    ELSE            reduce using rule 68 (loop_instruction -> BREAK ; .)
    BREAK           reduce using rule 68 (loop_instruction -> BREAK ; .)
    CONTINUE        reduce using rule 68 (loop_instruction -> BREAK ; .)


state 136

    (69) loop_instruction -> CONTINUE ; .

    {               reduce using rule 69 (loop_instruction -> CONTINUE ; .)
    INTNUM          reduce using rule 69 (loop_instruction -> CONTINUE ; .)
    FLOATNUM        reduce using rule 69 (loop_instruction -> CONTINUE ; .)
    STRING          reduce using rule 69 (loop_instruction -> CONTINUE ; .)
    (               reduce using rule 69 (loop_instruction -> CONTINUE ; .)
    -               reduce using rule 69 (loop_instruction -> CONTINUE ; .)
    [               reduce using rule 69 (loop_instruction -> CONTINUE ; .)
    RETURN          reduce using rule 69 (loop_instruction -> CONTINUE ; .)
    PRINT           reduce using rule 69 (loop_instruction -> CONTINUE ; .)
    ID              reduce using rule 69 (loop_instruction -> CONTINUE ; .)
    IF              reduce using rule 69 (loop_instruction -> CONTINUE ; .)
    WHILE           reduce using rule 69 (loop_instruction -> CONTINUE ; .)
    FOR             reduce using rule 69 (loop_instruction -> CONTINUE ; .)
    $end            reduce using rule 69 (loop_instruction -> CONTINUE ; .)
    }               reduce using rule 69 (loop_instruction -> CONTINUE ; .)
    ELSE            reduce using rule 69 (loop_instruction -> CONTINUE ; .)
    BREAK           reduce using rule 69 (loop_instruction -> CONTINUE ; .)
    CONTINUE        reduce using rule 69 (loop_instruction -> CONTINUE ; .)


state 137

    (70) loop_instruction -> RETURN expr . ;
    (21) expr -> expr . '
    (36) expr -> expr . + expr
    (37) expr -> expr . - expr
    (38) expr -> expr . * expr
    (39) expr -> expr . / expr
    (40) expr -> expr . MPLUS expr
    (41) expr -> expr . MMINUS expr
    (42) expr -> expr . MMLTP expr
    (43) expr -> expr . MDIV expr
    (44) expr -> expr . EQ expr
    (45) expr -> expr . NEQ expr
    (46) expr -> expr . GTEQ expr
    (47) expr -> expr . LTEQ expr
    (48) expr -> expr . > expr
    (49) expr -> expr . < expr

    ;               shift and go to state 146
    '               shift and go to state 27
    +               shift and go to state 28
    -               shift and go to state 29
    *               shift and go to state 30
    /               shift and go to state 31
    MPLUS           shift and go to state 32
    MMINUS          shift and go to state 33
    MMLTP           shift and go to state 34
    MDIV            shift and go to state 35
    EQ              shift and go to state 36
    NEQ             shift and go to state 37
    GTEQ            shift and go to state 38
    LTEQ            shift and go to state 39
    >               shift and go to state 40
    <               shift and go to state 41


state 138

    (71) loop_instruction -> PRINT array_interior . ;
    (22) array_interior -> array_interior . , expr

    ;               shift and go to state 147
    ,               shift and go to state 84


state 139

    (62) loop_cond_if -> IF ( . expr ) loop_cond_block
    (15) expr -> . INTNUM
    (16) expr -> . FLOATNUM
    (17) expr -> . STRING
    (18) expr -> . lvalue
    (19) expr -> . ( expr )
    (20) expr -> . - expr
    (21) expr -> . expr '
    (24) expr -> . [ array_interior ]
    (28) expr -> . lvalue = expr
    (29) expr -> . lvalue PLUSASSIGN expr
    (30) expr -> . lvalue MINASSIGN expr
    (31) expr -> . lvalue MULTASSIGN expr
    (32) expr -> . lvalue DIVASSIGN expr
    (33) expr -> . lvalue = ZEROS ( expr )
    (34) expr -> . lvalue = ONES ( expr )
    (35) expr -> . lvalue = EYE ( expr )
    (36) expr -> . expr + expr
    (37) expr -> . expr - expr
    (38) expr -> . expr * expr
    (39) expr -> . expr / expr
    (40) expr -> . expr MPLUS expr
    (41) expr -> . expr MMINUS expr
    (42) expr -> . expr MMLTP expr
    (43) expr -> . expr MDIV expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr > expr
    (49) expr -> . expr < expr
    (25) lvalue -> . ID
    (26) lvalue -> . ID [ expr ]
    (27) lvalue -> . ID [ expr , expr ]

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13
    ID              shift and go to state 19

    expr                           shift and go to state 148
    lvalue                         shift and go to state 10

state 140

    (65) cond_for -> FOR ID = expr : expr . loop_cond_block
    (21) expr -> expr . '
    (36) expr -> expr . + expr
    (37) expr -> expr . - expr
    (38) expr -> expr . * expr
    (39) expr -> expr . / expr
    (40) expr -> expr . MPLUS expr
    (41) expr -> expr . MMINUS expr
    (42) expr -> expr . MMLTP expr
    (43) expr -> expr . MDIV expr
    (44) expr -> expr . EQ expr
    (45) expr -> expr . NEQ expr
    (46) expr -> expr . GTEQ expr
    (47) expr -> expr . LTEQ expr
    (48) expr -> expr . > expr
    (49) expr -> expr . < expr
    (60) loop_cond_block -> . loop_struct
    (61) loop_cond_block -> . { loop_start }
    (12) loop_struct -> . expr ;
    (13) loop_struct -> . loop_cond_expr
    (14) loop_struct -> . loop_instruction
    (15) expr -> . INTNUM
    (16) expr -> . FLOATNUM
    (17) expr -> . STRING
    (18) expr -> . lvalue
    (19) expr -> . ( expr )
    (20) expr -> . - expr
    (21) expr -> . expr '
    (24) expr -> . [ array_interior ]
    (28) expr -> . lvalue = expr
    (29) expr -> . lvalue PLUSASSIGN expr
    (30) expr -> . lvalue MINASSIGN expr
    (31) expr -> . lvalue MULTASSIGN expr
    (32) expr -> . lvalue DIVASSIGN expr
    (33) expr -> . lvalue = ZEROS ( expr )
    (34) expr -> . lvalue = ONES ( expr )
    (35) expr -> . lvalue = EYE ( expr )
    (36) expr -> . expr + expr
    (37) expr -> . expr - expr
    (38) expr -> . expr * expr
    (39) expr -> . expr / expr
    (40) expr -> . expr MPLUS expr
    (41) expr -> . expr MMINUS expr
    (42) expr -> . expr MMLTP expr
    (43) expr -> . expr MDIV expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr > expr
    (49) expr -> . expr < expr
    (57) loop_cond_expr -> . loop_cond_if
    (58) loop_cond_expr -> . cond_while
    (59) loop_cond_expr -> . cond_for
    (68) loop_instruction -> . BREAK ;
    (69) loop_instruction -> . CONTINUE ;
    (70) loop_instruction -> . RETURN expr ;
    (71) loop_instruction -> . PRINT array_interior ;
    (25) lvalue -> . ID
    (26) lvalue -> . ID [ expr ]
    (27) lvalue -> . ID [ expr , expr ]
    (62) loop_cond_if -> . IF ( expr ) loop_cond_block
    (63) loop_cond_if -> . loop_cond_if ELSE loop_cond_block
    (64) cond_while -> . WHILE ( expr ) loop_cond_block
    (65) cond_for -> . FOR ID = expr : expr loop_cond_block

    '               shift and go to state 27
    +               shift and go to state 28
    -               shift and go to state 150
    *               shift and go to state 30
    /               shift and go to state 31
    MPLUS           shift and go to state 32
    MMINUS          shift and go to state 33
    MMLTP           shift and go to state 34
    MDIV            shift and go to state 35
    EQ              shift and go to state 36
    NEQ             shift and go to state 37
    GTEQ            shift and go to state 38
    LTEQ            shift and go to state 39
    >               shift and go to state 40
    <               shift and go to state 41
    {               shift and go to state 114
    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    (               shift and go to state 11
    [               shift and go to state 13
    BREAK           shift and go to state 120
    CONTINUE        shift and go to state 121
    RETURN          shift and go to state 122
    PRINT           shift and go to state 123
    ID              shift and go to state 19
    IF              shift and go to state 124
    WHILE           shift and go to state 21
    FOR             shift and go to state 22

    expr                           shift and go to state 111
    loop_cond_block                shift and go to state 149
    loop_struct                    shift and go to state 113
    loop_cond_expr                 shift and go to state 115
    loop_instruction               shift and go to state 116
    lvalue                         shift and go to state 10
    loop_cond_if                   shift and go to state 117
    cond_while                     shift and go to state 118
    cond_for                       shift and go to state 119

state 141

    (10) loop_start -> { loop_start . }
    (9) loop_start -> loop_start . loop_struct
    (11) loop_start -> loop_start . { loop_start }
    (12) loop_struct -> . expr ;
    (13) loop_struct -> . loop_cond_expr
    (14) loop_struct -> . loop_instruction
    (15) expr -> . INTNUM
    (16) expr -> . FLOATNUM
    (17) expr -> . STRING
    (18) expr -> . lvalue
    (19) expr -> . ( expr )
    (20) expr -> . - expr
    (21) expr -> . expr '
    (24) expr -> . [ array_interior ]
    (28) expr -> . lvalue = expr
    (29) expr -> . lvalue PLUSASSIGN expr
    (30) expr -> . lvalue MINASSIGN expr
    (31) expr -> . lvalue MULTASSIGN expr
    (32) expr -> . lvalue DIVASSIGN expr
    (33) expr -> . lvalue = ZEROS ( expr )
    (34) expr -> . lvalue = ONES ( expr )
    (35) expr -> . lvalue = EYE ( expr )
    (36) expr -> . expr + expr
    (37) expr -> . expr - expr
    (38) expr -> . expr * expr
    (39) expr -> . expr / expr
    (40) expr -> . expr MPLUS expr
    (41) expr -> . expr MMINUS expr
    (42) expr -> . expr MMLTP expr
    (43) expr -> . expr MDIV expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr > expr
    (49) expr -> . expr < expr
    (57) loop_cond_expr -> . loop_cond_if
    (58) loop_cond_expr -> . cond_while
    (59) loop_cond_expr -> . cond_for
    (68) loop_instruction -> . BREAK ;
    (69) loop_instruction -> . CONTINUE ;
    (70) loop_instruction -> . RETURN expr ;
    (71) loop_instruction -> . PRINT array_interior ;
    (25) lvalue -> . ID
    (26) lvalue -> . ID [ expr ]
    (27) lvalue -> . ID [ expr , expr ]
    (62) loop_cond_if -> . IF ( expr ) loop_cond_block
    (63) loop_cond_if -> . loop_cond_if ELSE loop_cond_block
    (64) cond_while -> . WHILE ( expr ) loop_cond_block
    (65) cond_for -> . FOR ID = expr : expr loop_cond_block

    }               shift and go to state 151
    {               shift and go to state 142
    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13
    BREAK           shift and go to state 120
    CONTINUE        shift and go to state 121
    RETURN          shift and go to state 122
    PRINT           shift and go to state 123
    ID              shift and go to state 19
    IF              shift and go to state 124
    WHILE           shift and go to state 21
    FOR             shift and go to state 22

    loop_struct                    shift and go to state 144
    expr                           shift and go to state 111
    loop_cond_expr                 shift and go to state 115
    loop_instruction               shift and go to state 116
    lvalue                         shift and go to state 10
    loop_cond_if                   shift and go to state 117
    cond_while                     shift and go to state 118
    cond_for                       shift and go to state 119

state 142

    (11) loop_start -> loop_start { . loop_start }
    (8) loop_start -> . loop_struct
    (9) loop_start -> . loop_start loop_struct
    (10) loop_start -> . { loop_start }
    (11) loop_start -> . loop_start { loop_start }
    (12) loop_struct -> . expr ;
    (13) loop_struct -> . loop_cond_expr
    (14) loop_struct -> . loop_instruction
    (15) expr -> . INTNUM
    (16) expr -> . FLOATNUM
    (17) expr -> . STRING
    (18) expr -> . lvalue
    (19) expr -> . ( expr )
    (20) expr -> . - expr
    (21) expr -> . expr '
    (24) expr -> . [ array_interior ]
    (28) expr -> . lvalue = expr
    (29) expr -> . lvalue PLUSASSIGN expr
    (30) expr -> . lvalue MINASSIGN expr
    (31) expr -> . lvalue MULTASSIGN expr
    (32) expr -> . lvalue DIVASSIGN expr
    (33) expr -> . lvalue = ZEROS ( expr )
    (34) expr -> . lvalue = ONES ( expr )
    (35) expr -> . lvalue = EYE ( expr )
    (36) expr -> . expr + expr
    (37) expr -> . expr - expr
    (38) expr -> . expr * expr
    (39) expr -> . expr / expr
    (40) expr -> . expr MPLUS expr
    (41) expr -> . expr MMINUS expr
    (42) expr -> . expr MMLTP expr
    (43) expr -> . expr MDIV expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr > expr
    (49) expr -> . expr < expr
    (57) loop_cond_expr -> . loop_cond_if
    (58) loop_cond_expr -> . cond_while
    (59) loop_cond_expr -> . cond_for
    (68) loop_instruction -> . BREAK ;
    (69) loop_instruction -> . CONTINUE ;
    (70) loop_instruction -> . RETURN expr ;
    (71) loop_instruction -> . PRINT array_interior ;
    (25) lvalue -> . ID
    (26) lvalue -> . ID [ expr ]
    (27) lvalue -> . ID [ expr , expr ]
    (62) loop_cond_if -> . IF ( expr ) loop_cond_block
    (63) loop_cond_if -> . loop_cond_if ELSE loop_cond_block
    (64) cond_while -> . WHILE ( expr ) loop_cond_block
    (65) cond_for -> . FOR ID = expr : expr loop_cond_block

    {               shift and go to state 131
    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13
    BREAK           shift and go to state 120
    CONTINUE        shift and go to state 121
    RETURN          shift and go to state 122
    PRINT           shift and go to state 123
    ID              shift and go to state 19
    IF              shift and go to state 124
    WHILE           shift and go to state 21
    FOR             shift and go to state 22

    loop_start                     shift and go to state 152
    loop_struct                    shift and go to state 133
    expr                           shift and go to state 111
    loop_cond_expr                 shift and go to state 115
    loop_instruction               shift and go to state 116
    lvalue                         shift and go to state 10
    loop_cond_if                   shift and go to state 117
    cond_while                     shift and go to state 118
    cond_for                       shift and go to state 119

state 143

    (61) loop_cond_block -> { loop_start } .

    {               reduce using rule 61 (loop_cond_block -> { loop_start } .)
    INTNUM          reduce using rule 61 (loop_cond_block -> { loop_start } .)
    FLOATNUM        reduce using rule 61 (loop_cond_block -> { loop_start } .)
    STRING          reduce using rule 61 (loop_cond_block -> { loop_start } .)
    (               reduce using rule 61 (loop_cond_block -> { loop_start } .)
    -               reduce using rule 61 (loop_cond_block -> { loop_start } .)
    [               reduce using rule 61 (loop_cond_block -> { loop_start } .)
    RETURN          reduce using rule 61 (loop_cond_block -> { loop_start } .)
    PRINT           reduce using rule 61 (loop_cond_block -> { loop_start } .)
    ID              reduce using rule 61 (loop_cond_block -> { loop_start } .)
    IF              reduce using rule 61 (loop_cond_block -> { loop_start } .)
    WHILE           reduce using rule 61 (loop_cond_block -> { loop_start } .)
    FOR             reduce using rule 61 (loop_cond_block -> { loop_start } .)
    $end            reduce using rule 61 (loop_cond_block -> { loop_start } .)
    }               reduce using rule 61 (loop_cond_block -> { loop_start } .)
    ELSE            reduce using rule 61 (loop_cond_block -> { loop_start } .)
    BREAK           reduce using rule 61 (loop_cond_block -> { loop_start } .)
    CONTINUE        reduce using rule 61 (loop_cond_block -> { loop_start } .)


state 144

    (9) loop_start -> loop_start loop_struct .

    }               reduce using rule 9 (loop_start -> loop_start loop_struct .)
    {               reduce using rule 9 (loop_start -> loop_start loop_struct .)
    INTNUM          reduce using rule 9 (loop_start -> loop_start loop_struct .)
    FLOATNUM        reduce using rule 9 (loop_start -> loop_start loop_struct .)
    STRING          reduce using rule 9 (loop_start -> loop_start loop_struct .)
    (               reduce using rule 9 (loop_start -> loop_start loop_struct .)
    -               reduce using rule 9 (loop_start -> loop_start loop_struct .)
    [               reduce using rule 9 (loop_start -> loop_start loop_struct .)
    BREAK           reduce using rule 9 (loop_start -> loop_start loop_struct .)
    CONTINUE        reduce using rule 9 (loop_start -> loop_start loop_struct .)
    RETURN          reduce using rule 9 (loop_start -> loop_start loop_struct .)
    PRINT           reduce using rule 9 (loop_start -> loop_start loop_struct .)
    ID              reduce using rule 9 (loop_start -> loop_start loop_struct .)
    IF              reduce using rule 9 (loop_start -> loop_start loop_struct .)
    WHILE           reduce using rule 9 (loop_start -> loop_start loop_struct .)
    FOR             reduce using rule 9 (loop_start -> loop_start loop_struct .)


state 145

    (63) loop_cond_if -> loop_cond_if ELSE loop_cond_block .

    {               reduce using rule 63 (loop_cond_if -> loop_cond_if ELSE loop_cond_block .)
    INTNUM          reduce using rule 63 (loop_cond_if -> loop_cond_if ELSE loop_cond_block .)
    FLOATNUM        reduce using rule 63 (loop_cond_if -> loop_cond_if ELSE loop_cond_block .)
    STRING          reduce using rule 63 (loop_cond_if -> loop_cond_if ELSE loop_cond_block .)
    (               reduce using rule 63 (loop_cond_if -> loop_cond_if ELSE loop_cond_block .)
    -               reduce using rule 63 (loop_cond_if -> loop_cond_if ELSE loop_cond_block .)
    [               reduce using rule 63 (loop_cond_if -> loop_cond_if ELSE loop_cond_block .)
    RETURN          reduce using rule 63 (loop_cond_if -> loop_cond_if ELSE loop_cond_block .)
    PRINT           reduce using rule 63 (loop_cond_if -> loop_cond_if ELSE loop_cond_block .)
    ID              reduce using rule 63 (loop_cond_if -> loop_cond_if ELSE loop_cond_block .)
    IF              reduce using rule 63 (loop_cond_if -> loop_cond_if ELSE loop_cond_block .)
    WHILE           reduce using rule 63 (loop_cond_if -> loop_cond_if ELSE loop_cond_block .)
    FOR             reduce using rule 63 (loop_cond_if -> loop_cond_if ELSE loop_cond_block .)
    $end            reduce using rule 63 (loop_cond_if -> loop_cond_if ELSE loop_cond_block .)
    }               reduce using rule 63 (loop_cond_if -> loop_cond_if ELSE loop_cond_block .)
    ELSE            reduce using rule 63 (loop_cond_if -> loop_cond_if ELSE loop_cond_block .)
    BREAK           reduce using rule 63 (loop_cond_if -> loop_cond_if ELSE loop_cond_block .)
    CONTINUE        reduce using rule 63 (loop_cond_if -> loop_cond_if ELSE loop_cond_block .)


state 146

    (70) loop_instruction -> RETURN expr ; .

    {               reduce using rule 70 (loop_instruction -> RETURN expr ; .)
    INTNUM          reduce using rule 70 (loop_instruction -> RETURN expr ; .)
    FLOATNUM        reduce using rule 70 (loop_instruction -> RETURN expr ; .)
    STRING          reduce using rule 70 (loop_instruction -> RETURN expr ; .)
    (               reduce using rule 70 (loop_instruction -> RETURN expr ; .)
    -               reduce using rule 70 (loop_instruction -> RETURN expr ; .)
    [               reduce using rule 70 (loop_instruction -> RETURN expr ; .)
    RETURN          reduce using rule 70 (loop_instruction -> RETURN expr ; .)
    PRINT           reduce using rule 70 (loop_instruction -> RETURN expr ; .)
    ID              reduce using rule 70 (loop_instruction -> RETURN expr ; .)
    IF              reduce using rule 70 (loop_instruction -> RETURN expr ; .)
    WHILE           reduce using rule 70 (loop_instruction -> RETURN expr ; .)
    FOR             reduce using rule 70 (loop_instruction -> RETURN expr ; .)
    $end            reduce using rule 70 (loop_instruction -> RETURN expr ; .)
    }               reduce using rule 70 (loop_instruction -> RETURN expr ; .)
    ELSE            reduce using rule 70 (loop_instruction -> RETURN expr ; .)
    BREAK           reduce using rule 70 (loop_instruction -> RETURN expr ; .)
    CONTINUE        reduce using rule 70 (loop_instruction -> RETURN expr ; .)


state 147

    (71) loop_instruction -> PRINT array_interior ; .

    {               reduce using rule 71 (loop_instruction -> PRINT array_interior ; .)
    INTNUM          reduce using rule 71 (loop_instruction -> PRINT array_interior ; .)
    FLOATNUM        reduce using rule 71 (loop_instruction -> PRINT array_interior ; .)
    STRING          reduce using rule 71 (loop_instruction -> PRINT array_interior ; .)
    (               reduce using rule 71 (loop_instruction -> PRINT array_interior ; .)
    -               reduce using rule 71 (loop_instruction -> PRINT array_interior ; .)
    [               reduce using rule 71 (loop_instruction -> PRINT array_interior ; .)
    RETURN          reduce using rule 71 (loop_instruction -> PRINT array_interior ; .)
    PRINT           reduce using rule 71 (loop_instruction -> PRINT array_interior ; .)
    ID              reduce using rule 71 (loop_instruction -> PRINT array_interior ; .)
    IF              reduce using rule 71 (loop_instruction -> PRINT array_interior ; .)
    WHILE           reduce using rule 71 (loop_instruction -> PRINT array_interior ; .)
    FOR             reduce using rule 71 (loop_instruction -> PRINT array_interior ; .)
    $end            reduce using rule 71 (loop_instruction -> PRINT array_interior ; .)
    }               reduce using rule 71 (loop_instruction -> PRINT array_interior ; .)
    ELSE            reduce using rule 71 (loop_instruction -> PRINT array_interior ; .)
    BREAK           reduce using rule 71 (loop_instruction -> PRINT array_interior ; .)
    CONTINUE        reduce using rule 71 (loop_instruction -> PRINT array_interior ; .)


state 148

    (62) loop_cond_if -> IF ( expr . ) loop_cond_block
    (21) expr -> expr . '
    (36) expr -> expr . + expr
    (37) expr -> expr . - expr
    (38) expr -> expr . * expr
    (39) expr -> expr . / expr
    (40) expr -> expr . MPLUS expr
    (41) expr -> expr . MMINUS expr
    (42) expr -> expr . MMLTP expr
    (43) expr -> expr . MDIV expr
    (44) expr -> expr . EQ expr
    (45) expr -> expr . NEQ expr
    (46) expr -> expr . GTEQ expr
    (47) expr -> expr . LTEQ expr
    (48) expr -> expr . > expr
    (49) expr -> expr . < expr

    )               shift and go to state 153
    '               shift and go to state 27
    +               shift and go to state 28
    -               shift and go to state 29
    *               shift and go to state 30
    /               shift and go to state 31
    MPLUS           shift and go to state 32
    MMINUS          shift and go to state 33
    MMLTP           shift and go to state 34
    MDIV            shift and go to state 35
    EQ              shift and go to state 36
    NEQ             shift and go to state 37
    GTEQ            shift and go to state 38
    LTEQ            shift and go to state 39
    >               shift and go to state 40
    <               shift and go to state 41


state 149

    (65) cond_for -> FOR ID = expr : expr loop_cond_block .

    {               reduce using rule 65 (cond_for -> FOR ID = expr : expr loop_cond_block .)
    INTNUM          reduce using rule 65 (cond_for -> FOR ID = expr : expr loop_cond_block .)
    FLOATNUM        reduce using rule 65 (cond_for -> FOR ID = expr : expr loop_cond_block .)
    STRING          reduce using rule 65 (cond_for -> FOR ID = expr : expr loop_cond_block .)
    (               reduce using rule 65 (cond_for -> FOR ID = expr : expr loop_cond_block .)
    -               reduce using rule 65 (cond_for -> FOR ID = expr : expr loop_cond_block .)
    [               reduce using rule 65 (cond_for -> FOR ID = expr : expr loop_cond_block .)
    RETURN          reduce using rule 65 (cond_for -> FOR ID = expr : expr loop_cond_block .)
    PRINT           reduce using rule 65 (cond_for -> FOR ID = expr : expr loop_cond_block .)
    ID              reduce using rule 65 (cond_for -> FOR ID = expr : expr loop_cond_block .)
    IF              reduce using rule 65 (cond_for -> FOR ID = expr : expr loop_cond_block .)
    WHILE           reduce using rule 65 (cond_for -> FOR ID = expr : expr loop_cond_block .)
    FOR             reduce using rule 65 (cond_for -> FOR ID = expr : expr loop_cond_block .)
    $end            reduce using rule 65 (cond_for -> FOR ID = expr : expr loop_cond_block .)
    }               reduce using rule 65 (cond_for -> FOR ID = expr : expr loop_cond_block .)
    ELSE            reduce using rule 65 (cond_for -> FOR ID = expr : expr loop_cond_block .)
    BREAK           reduce using rule 65 (cond_for -> FOR ID = expr : expr loop_cond_block .)
    CONTINUE        reduce using rule 65 (cond_for -> FOR ID = expr : expr loop_cond_block .)


state 150

    (37) expr -> expr - . expr
    (20) expr -> - . expr
    (15) expr -> . INTNUM
    (16) expr -> . FLOATNUM
    (17) expr -> . STRING
    (18) expr -> . lvalue
    (19) expr -> . ( expr )
    (20) expr -> . - expr
    (21) expr -> . expr '
    (24) expr -> . [ array_interior ]
    (28) expr -> . lvalue = expr
    (29) expr -> . lvalue PLUSASSIGN expr
    (30) expr -> . lvalue MINASSIGN expr
    (31) expr -> . lvalue MULTASSIGN expr
    (32) expr -> . lvalue DIVASSIGN expr
    (33) expr -> . lvalue = ZEROS ( expr )
    (34) expr -> . lvalue = ONES ( expr )
    (35) expr -> . lvalue = EYE ( expr )
    (36) expr -> . expr + expr
    (37) expr -> . expr - expr
    (38) expr -> . expr * expr
    (39) expr -> . expr / expr
    (40) expr -> . expr MPLUS expr
    (41) expr -> . expr MMINUS expr
    (42) expr -> . expr MMLTP expr
    (43) expr -> . expr MDIV expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr > expr
    (49) expr -> . expr < expr
    (25) lvalue -> . ID
    (26) lvalue -> . ID [ expr ]
    (27) lvalue -> . ID [ expr , expr ]

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13
    ID              shift and go to state 19

    expr                           shift and go to state 154
    lvalue                         shift and go to state 10

state 151

    (10) loop_start -> { loop_start } .

    }               reduce using rule 10 (loop_start -> { loop_start } .)
    {               reduce using rule 10 (loop_start -> { loop_start } .)
    INTNUM          reduce using rule 10 (loop_start -> { loop_start } .)
    FLOATNUM        reduce using rule 10 (loop_start -> { loop_start } .)
    STRING          reduce using rule 10 (loop_start -> { loop_start } .)
    (               reduce using rule 10 (loop_start -> { loop_start } .)
    -               reduce using rule 10 (loop_start -> { loop_start } .)
    [               reduce using rule 10 (loop_start -> { loop_start } .)
    BREAK           reduce using rule 10 (loop_start -> { loop_start } .)
    CONTINUE        reduce using rule 10 (loop_start -> { loop_start } .)
    RETURN          reduce using rule 10 (loop_start -> { loop_start } .)
    PRINT           reduce using rule 10 (loop_start -> { loop_start } .)
    ID              reduce using rule 10 (loop_start -> { loop_start } .)
    IF              reduce using rule 10 (loop_start -> { loop_start } .)
    WHILE           reduce using rule 10 (loop_start -> { loop_start } .)
    FOR             reduce using rule 10 (loop_start -> { loop_start } .)


state 152

    (11) loop_start -> loop_start { loop_start . }
    (9) loop_start -> loop_start . loop_struct
    (11) loop_start -> loop_start . { loop_start }
    (12) loop_struct -> . expr ;
    (13) loop_struct -> . loop_cond_expr
    (14) loop_struct -> . loop_instruction
    (15) expr -> . INTNUM
    (16) expr -> . FLOATNUM
    (17) expr -> . STRING
    (18) expr -> . lvalue
    (19) expr -> . ( expr )
    (20) expr -> . - expr
    (21) expr -> . expr '
    (24) expr -> . [ array_interior ]
    (28) expr -> . lvalue = expr
    (29) expr -> . lvalue PLUSASSIGN expr
    (30) expr -> . lvalue MINASSIGN expr
    (31) expr -> . lvalue MULTASSIGN expr
    (32) expr -> . lvalue DIVASSIGN expr
    (33) expr -> . lvalue = ZEROS ( expr )
    (34) expr -> . lvalue = ONES ( expr )
    (35) expr -> . lvalue = EYE ( expr )
    (36) expr -> . expr + expr
    (37) expr -> . expr - expr
    (38) expr -> . expr * expr
    (39) expr -> . expr / expr
    (40) expr -> . expr MPLUS expr
    (41) expr -> . expr MMINUS expr
    (42) expr -> . expr MMLTP expr
    (43) expr -> . expr MDIV expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr > expr
    (49) expr -> . expr < expr
    (57) loop_cond_expr -> . loop_cond_if
    (58) loop_cond_expr -> . cond_while
    (59) loop_cond_expr -> . cond_for
    (68) loop_instruction -> . BREAK ;
    (69) loop_instruction -> . CONTINUE ;
    (70) loop_instruction -> . RETURN expr ;
    (71) loop_instruction -> . PRINT array_interior ;
    (25) lvalue -> . ID
    (26) lvalue -> . ID [ expr ]
    (27) lvalue -> . ID [ expr , expr ]
    (62) loop_cond_if -> . IF ( expr ) loop_cond_block
    (63) loop_cond_if -> . loop_cond_if ELSE loop_cond_block
    (64) cond_while -> . WHILE ( expr ) loop_cond_block
    (65) cond_for -> . FOR ID = expr : expr loop_cond_block

    }               shift and go to state 155
    {               shift and go to state 142
    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13
    BREAK           shift and go to state 120
    CONTINUE        shift and go to state 121
    RETURN          shift and go to state 122
    PRINT           shift and go to state 123
    ID              shift and go to state 19
    IF              shift and go to state 124
    WHILE           shift and go to state 21
    FOR             shift and go to state 22

    loop_struct                    shift and go to state 144
    expr                           shift and go to state 111
    loop_cond_expr                 shift and go to state 115
    loop_instruction               shift and go to state 116
    lvalue                         shift and go to state 10
    loop_cond_if                   shift and go to state 117
    cond_while                     shift and go to state 118
    cond_for                       shift and go to state 119

state 153

    (62) loop_cond_if -> IF ( expr ) . loop_cond_block
    (60) loop_cond_block -> . loop_struct
    (61) loop_cond_block -> . { loop_start }
    (12) loop_struct -> . expr ;
    (13) loop_struct -> . loop_cond_expr
    (14) loop_struct -> . loop_instruction
    (15) expr -> . INTNUM
    (16) expr -> . FLOATNUM
    (17) expr -> . STRING
    (18) expr -> . lvalue
    (19) expr -> . ( expr )
    (20) expr -> . - expr
    (21) expr -> . expr '
    (24) expr -> . [ array_interior ]
    (28) expr -> . lvalue = expr
    (29) expr -> . lvalue PLUSASSIGN expr
    (30) expr -> . lvalue MINASSIGN expr
    (31) expr -> . lvalue MULTASSIGN expr
    (32) expr -> . lvalue DIVASSIGN expr
    (33) expr -> . lvalue = ZEROS ( expr )
    (34) expr -> . lvalue = ONES ( expr )
    (35) expr -> . lvalue = EYE ( expr )
    (36) expr -> . expr + expr
    (37) expr -> . expr - expr
    (38) expr -> . expr * expr
    (39) expr -> . expr / expr
    (40) expr -> . expr MPLUS expr
    (41) expr -> . expr MMINUS expr
    (42) expr -> . expr MMLTP expr
    (43) expr -> . expr MDIV expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr > expr
    (49) expr -> . expr < expr
    (57) loop_cond_expr -> . loop_cond_if
    (58) loop_cond_expr -> . cond_while
    (59) loop_cond_expr -> . cond_for
    (68) loop_instruction -> . BREAK ;
    (69) loop_instruction -> . CONTINUE ;
    (70) loop_instruction -> . RETURN expr ;
    (71) loop_instruction -> . PRINT array_interior ;
    (25) lvalue -> . ID
    (26) lvalue -> . ID [ expr ]
    (27) lvalue -> . ID [ expr , expr ]
    (62) loop_cond_if -> . IF ( expr ) loop_cond_block
    (63) loop_cond_if -> . loop_cond_if ELSE loop_cond_block
    (64) cond_while -> . WHILE ( expr ) loop_cond_block
    (65) cond_for -> . FOR ID = expr : expr loop_cond_block

    {               shift and go to state 114
    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13
    BREAK           shift and go to state 120
    CONTINUE        shift and go to state 121
    RETURN          shift and go to state 122
    PRINT           shift and go to state 123
    ID              shift and go to state 19
    IF              shift and go to state 124
    WHILE           shift and go to state 21
    FOR             shift and go to state 22

    expr                           shift and go to state 111
    loop_cond_block                shift and go to state 156
    loop_struct                    shift and go to state 113
    loop_cond_expr                 shift and go to state 115
    loop_instruction               shift and go to state 116
    lvalue                         shift and go to state 10
    loop_cond_if                   shift and go to state 117
    cond_while                     shift and go to state 118
    cond_for                       shift and go to state 119

state 154

    (37) expr -> expr - expr .
    (20) expr -> - expr .
    (21) expr -> expr . '
    (36) expr -> expr . + expr
    (37) expr -> expr . - expr
    (38) expr -> expr . * expr
    (39) expr -> expr . / expr
    (40) expr -> expr . MPLUS expr
    (41) expr -> expr . MMINUS expr
    (42) expr -> expr . MMLTP expr
    (43) expr -> expr . MDIV expr
    (44) expr -> expr . EQ expr
    (45) expr -> expr . NEQ expr
    (46) expr -> expr . GTEQ expr
    (47) expr -> expr . LTEQ expr
    (48) expr -> expr . > expr
    (49) expr -> expr . < expr

  ! reduce/reduce conflict for ' resolved using rule 20 (expr -> - expr .)
  ! reduce/reduce conflict for + resolved using rule 20 (expr -> - expr .)
  ! reduce/reduce conflict for - resolved using rule 20 (expr -> - expr .)
  ! reduce/reduce conflict for * resolved using rule 20 (expr -> - expr .)
  ! reduce/reduce conflict for / resolved using rule 20 (expr -> - expr .)
  ! reduce/reduce conflict for MPLUS resolved using rule 20 (expr -> - expr .)
  ! reduce/reduce conflict for MMINUS resolved using rule 20 (expr -> - expr .)
  ! reduce/reduce conflict for MMLTP resolved using rule 20 (expr -> - expr .)
  ! reduce/reduce conflict for MDIV resolved using rule 20 (expr -> - expr .)
  ! reduce/reduce conflict for EQ resolved using rule 20 (expr -> - expr .)
  ! reduce/reduce conflict for NEQ resolved using rule 20 (expr -> - expr .)
  ! reduce/reduce conflict for GTEQ resolved using rule 20 (expr -> - expr .)
  ! reduce/reduce conflict for LTEQ resolved using rule 20 (expr -> - expr .)
  ! reduce/reduce conflict for > resolved using rule 20 (expr -> - expr .)
  ! reduce/reduce conflict for < resolved using rule 20 (expr -> - expr .)
    {               reduce using rule 37 (expr -> expr - expr .)
    INTNUM          reduce using rule 37 (expr -> expr - expr .)
    FLOATNUM        reduce using rule 37 (expr -> expr - expr .)
    STRING          reduce using rule 37 (expr -> expr - expr .)
    (               reduce using rule 37 (expr -> expr - expr .)
    [               reduce using rule 37 (expr -> expr - expr .)
    BREAK           reduce using rule 37 (expr -> expr - expr .)
    CONTINUE        reduce using rule 37 (expr -> expr - expr .)
    RETURN          reduce using rule 37 (expr -> expr - expr .)
    PRINT           reduce using rule 37 (expr -> expr - expr .)
    ID              reduce using rule 37 (expr -> expr - expr .)
    IF              reduce using rule 37 (expr -> expr - expr .)
    WHILE           reduce using rule 37 (expr -> expr - expr .)
    FOR             reduce using rule 37 (expr -> expr - expr .)
    ;               reduce using rule 20 (expr -> - expr .)
    +               reduce using rule 20 (expr -> - expr .)
    -               reduce using rule 20 (expr -> - expr .)
    *               reduce using rule 20 (expr -> - expr .)
    /               reduce using rule 20 (expr -> - expr .)
    MPLUS           reduce using rule 20 (expr -> - expr .)
    MMINUS          reduce using rule 20 (expr -> - expr .)
    MMLTP           reduce using rule 20 (expr -> - expr .)
    MDIV            reduce using rule 20 (expr -> - expr .)
    EQ              reduce using rule 20 (expr -> - expr .)
    NEQ             reduce using rule 20 (expr -> - expr .)
    GTEQ            reduce using rule 20 (expr -> - expr .)
    LTEQ            reduce using rule 20 (expr -> - expr .)
    >               reduce using rule 20 (expr -> - expr .)
    <               reduce using rule 20 (expr -> - expr .)
    '               shift and go to state 27

  ! '               [ reduce using rule 37 (expr -> expr - expr .) ]
  ! +               [ reduce using rule 37 (expr -> expr - expr .) ]
  ! -               [ reduce using rule 37 (expr -> expr - expr .) ]
  ! *               [ reduce using rule 37 (expr -> expr - expr .) ]
  ! /               [ reduce using rule 37 (expr -> expr - expr .) ]
  ! MPLUS           [ reduce using rule 37 (expr -> expr - expr .) ]
  ! MMINUS          [ reduce using rule 37 (expr -> expr - expr .) ]
  ! MMLTP           [ reduce using rule 37 (expr -> expr - expr .) ]
  ! MDIV            [ reduce using rule 37 (expr -> expr - expr .) ]
  ! EQ              [ reduce using rule 37 (expr -> expr - expr .) ]
  ! NEQ             [ reduce using rule 37 (expr -> expr - expr .) ]
  ! GTEQ            [ reduce using rule 37 (expr -> expr - expr .) ]
  ! LTEQ            [ reduce using rule 37 (expr -> expr - expr .) ]
  ! >               [ reduce using rule 37 (expr -> expr - expr .) ]
  ! <               [ reduce using rule 37 (expr -> expr - expr .) ]
  ! '               [ reduce using rule 20 (expr -> - expr .) ]
  ! +               [ shift and go to state 28 ]
  ! -               [ shift and go to state 29 ]
  ! *               [ shift and go to state 30 ]
  ! /               [ shift and go to state 31 ]
  ! MPLUS           [ shift and go to state 32 ]
  ! MMINUS          [ shift and go to state 33 ]
  ! MMLTP           [ shift and go to state 34 ]
  ! MDIV            [ shift and go to state 35 ]
  ! EQ              [ shift and go to state 36 ]
  ! NEQ             [ shift and go to state 37 ]
  ! GTEQ            [ shift and go to state 38 ]
  ! LTEQ            [ shift and go to state 39 ]
  ! >               [ shift and go to state 40 ]
  ! <               [ shift and go to state 41 ]


state 155

    (11) loop_start -> loop_start { loop_start } .

    }               reduce using rule 11 (loop_start -> loop_start { loop_start } .)
    {               reduce using rule 11 (loop_start -> loop_start { loop_start } .)
    INTNUM          reduce using rule 11 (loop_start -> loop_start { loop_start } .)
    FLOATNUM        reduce using rule 11 (loop_start -> loop_start { loop_start } .)
    STRING          reduce using rule 11 (loop_start -> loop_start { loop_start } .)
    (               reduce using rule 11 (loop_start -> loop_start { loop_start } .)
    -               reduce using rule 11 (loop_start -> loop_start { loop_start } .)
    [               reduce using rule 11 (loop_start -> loop_start { loop_start } .)
    BREAK           reduce using rule 11 (loop_start -> loop_start { loop_start } .)
    CONTINUE        reduce using rule 11 (loop_start -> loop_start { loop_start } .)
    RETURN          reduce using rule 11 (loop_start -> loop_start { loop_start } .)
    PRINT           reduce using rule 11 (loop_start -> loop_start { loop_start } .)
    ID              reduce using rule 11 (loop_start -> loop_start { loop_start } .)
    IF              reduce using rule 11 (loop_start -> loop_start { loop_start } .)
    WHILE           reduce using rule 11 (loop_start -> loop_start { loop_start } .)
    FOR             reduce using rule 11 (loop_start -> loop_start { loop_start } .)


state 156

    (62) loop_cond_if -> IF ( expr ) loop_cond_block .

    {               reduce using rule 62 (loop_cond_if -> IF ( expr ) loop_cond_block .)
    INTNUM          reduce using rule 62 (loop_cond_if -> IF ( expr ) loop_cond_block .)
    FLOATNUM        reduce using rule 62 (loop_cond_if -> IF ( expr ) loop_cond_block .)
    STRING          reduce using rule 62 (loop_cond_if -> IF ( expr ) loop_cond_block .)
    (               reduce using rule 62 (loop_cond_if -> IF ( expr ) loop_cond_block .)
    -               reduce using rule 62 (loop_cond_if -> IF ( expr ) loop_cond_block .)
    [               reduce using rule 62 (loop_cond_if -> IF ( expr ) loop_cond_block .)
    RETURN          reduce using rule 62 (loop_cond_if -> IF ( expr ) loop_cond_block .)
    PRINT           reduce using rule 62 (loop_cond_if -> IF ( expr ) loop_cond_block .)
    ID              reduce using rule 62 (loop_cond_if -> IF ( expr ) loop_cond_block .)
    IF              reduce using rule 62 (loop_cond_if -> IF ( expr ) loop_cond_block .)
    WHILE           reduce using rule 62 (loop_cond_if -> IF ( expr ) loop_cond_block .)
    FOR             reduce using rule 62 (loop_cond_if -> IF ( expr ) loop_cond_block .)
    $end            reduce using rule 62 (loop_cond_if -> IF ( expr ) loop_cond_block .)
    }               reduce using rule 62 (loop_cond_if -> IF ( expr ) loop_cond_block .)
    ELSE            reduce using rule 62 (loop_cond_if -> IF ( expr ) loop_cond_block .)
    BREAK           reduce using rule 62 (loop_cond_if -> IF ( expr ) loop_cond_block .)
    CONTINUE        reduce using rule 62 (loop_cond_if -> IF ( expr ) loop_cond_block .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ELSE in state 14 resolved as shift
WARNING: shift/reduce conflict for [ in state 19 resolved as shift
WARNING: shift/reduce conflict for ' in state 68 resolved as shift
WARNING: shift/reduce conflict for + in state 68 resolved as shift
WARNING: shift/reduce conflict for - in state 68 resolved as shift
WARNING: shift/reduce conflict for * in state 68 resolved as shift
WARNING: shift/reduce conflict for / in state 68 resolved as shift
WARNING: shift/reduce conflict for MPLUS in state 68 resolved as shift
WARNING: shift/reduce conflict for MMINUS in state 68 resolved as shift
WARNING: shift/reduce conflict for MMLTP in state 68 resolved as shift
WARNING: shift/reduce conflict for MDIV in state 68 resolved as shift
WARNING: shift/reduce conflict for EQ in state 68 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 68 resolved as shift
WARNING: shift/reduce conflict for GTEQ in state 68 resolved as shift
WARNING: shift/reduce conflict for LTEQ in state 68 resolved as shift
WARNING: shift/reduce conflict for > in state 68 resolved as shift
WARNING: shift/reduce conflict for < in state 68 resolved as shift
WARNING: shift/reduce conflict for ' in state 69 resolved as shift
WARNING: shift/reduce conflict for + in state 69 resolved as shift
WARNING: shift/reduce conflict for - in state 69 resolved as shift
WARNING: shift/reduce conflict for * in state 69 resolved as shift
WARNING: shift/reduce conflict for / in state 69 resolved as shift
WARNING: shift/reduce conflict for MPLUS in state 69 resolved as shift
WARNING: shift/reduce conflict for MMINUS in state 69 resolved as shift
WARNING: shift/reduce conflict for MMLTP in state 69 resolved as shift
WARNING: shift/reduce conflict for MDIV in state 69 resolved as shift
WARNING: shift/reduce conflict for EQ in state 69 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 69 resolved as shift
WARNING: shift/reduce conflict for GTEQ in state 69 resolved as shift
WARNING: shift/reduce conflict for LTEQ in state 69 resolved as shift
WARNING: shift/reduce conflict for > in state 69 resolved as shift
WARNING: shift/reduce conflict for < in state 69 resolved as shift
WARNING: shift/reduce conflict for ' in state 70 resolved as shift
WARNING: shift/reduce conflict for + in state 70 resolved as shift
WARNING: shift/reduce conflict for - in state 70 resolved as shift
WARNING: shift/reduce conflict for * in state 70 resolved as shift
WARNING: shift/reduce conflict for / in state 70 resolved as shift
WARNING: shift/reduce conflict for MPLUS in state 70 resolved as shift
WARNING: shift/reduce conflict for MMINUS in state 70 resolved as shift
WARNING: shift/reduce conflict for MMLTP in state 70 resolved as shift
WARNING: shift/reduce conflict for MDIV in state 70 resolved as shift
WARNING: shift/reduce conflict for EQ in state 70 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 70 resolved as shift
WARNING: shift/reduce conflict for GTEQ in state 70 resolved as shift
WARNING: shift/reduce conflict for LTEQ in state 70 resolved as shift
WARNING: shift/reduce conflict for > in state 70 resolved as shift
WARNING: shift/reduce conflict for < in state 70 resolved as shift
WARNING: shift/reduce conflict for ' in state 71 resolved as shift
WARNING: shift/reduce conflict for + in state 71 resolved as shift
WARNING: shift/reduce conflict for - in state 71 resolved as shift
WARNING: shift/reduce conflict for * in state 71 resolved as shift
WARNING: shift/reduce conflict for / in state 71 resolved as shift
WARNING: shift/reduce conflict for MPLUS in state 71 resolved as shift
WARNING: shift/reduce conflict for MMINUS in state 71 resolved as shift
WARNING: shift/reduce conflict for MMLTP in state 71 resolved as shift
WARNING: shift/reduce conflict for MDIV in state 71 resolved as shift
WARNING: shift/reduce conflict for EQ in state 71 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 71 resolved as shift
WARNING: shift/reduce conflict for GTEQ in state 71 resolved as shift
WARNING: shift/reduce conflict for LTEQ in state 71 resolved as shift
WARNING: shift/reduce conflict for > in state 71 resolved as shift
WARNING: shift/reduce conflict for < in state 71 resolved as shift
WARNING: shift/reduce conflict for ' in state 72 resolved as shift
WARNING: shift/reduce conflict for + in state 72 resolved as shift
WARNING: shift/reduce conflict for - in state 72 resolved as shift
WARNING: shift/reduce conflict for * in state 72 resolved as shift
WARNING: shift/reduce conflict for / in state 72 resolved as shift
WARNING: shift/reduce conflict for MPLUS in state 72 resolved as shift
WARNING: shift/reduce conflict for MMINUS in state 72 resolved as shift
WARNING: shift/reduce conflict for MMLTP in state 72 resolved as shift
WARNING: shift/reduce conflict for MDIV in state 72 resolved as shift
WARNING: shift/reduce conflict for EQ in state 72 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 72 resolved as shift
WARNING: shift/reduce conflict for GTEQ in state 72 resolved as shift
WARNING: shift/reduce conflict for LTEQ in state 72 resolved as shift
WARNING: shift/reduce conflict for > in state 72 resolved as shift
WARNING: shift/reduce conflict for < in state 72 resolved as shift
WARNING: shift/reduce conflict for ' in state 73 resolved as shift
WARNING: shift/reduce conflict for + in state 73 resolved as shift
WARNING: shift/reduce conflict for - in state 73 resolved as shift
WARNING: shift/reduce conflict for * in state 73 resolved as shift
WARNING: shift/reduce conflict for / in state 73 resolved as shift
WARNING: shift/reduce conflict for MPLUS in state 73 resolved as shift
WARNING: shift/reduce conflict for MMINUS in state 73 resolved as shift
WARNING: shift/reduce conflict for MMLTP in state 73 resolved as shift
WARNING: shift/reduce conflict for MDIV in state 73 resolved as shift
WARNING: shift/reduce conflict for EQ in state 73 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 73 resolved as shift
WARNING: shift/reduce conflict for GTEQ in state 73 resolved as shift
WARNING: shift/reduce conflict for LTEQ in state 73 resolved as shift
WARNING: shift/reduce conflict for > in state 73 resolved as shift
WARNING: shift/reduce conflict for < in state 73 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 117 resolved as shift
WARNING: reduce/reduce conflict in state 154 resolved using rule (expr -> - expr)
WARNING: rejected rule (expr -> expr - expr) in state 154
