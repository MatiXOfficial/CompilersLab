
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "left=PLUSASSIGNMINASSIGNMULTASSIGNDIVASSIGNleft+-MPLUSMMINUSleft*/MMLTPMDIVright-left'BREAK CONTINUE DIVASSIGN ELSE EQ EYE FLOATNUM FOR GTEQ ID IF INTNUM LTEQ MDIV MINASSIGN MMINUS MMLTP MPLUS MULTASSIGN NEQ ONES PLUSASSIGN PRINT RETURN STRING WHILE ZEROSstart : struct\n             | start struct\n             | '{' start '}'\n             | start '{' start '}'struct : expr ';'\n              | cond_expr\n              | instructionexpr : INTNUM\n            | FLOATNUM\n            | STRINGexpr : IDexpr : '(' expr ')'expr : '-' exprexpr : expr '\\''array_interior : array_interior ',' expr\n                      | exprexpr : '[' array_interior ']'expr : ID '=' expr\n            | ID PLUSASSIGN expr\n            | ID MINASSIGN expr\n            | ID MULTASSIGN expr\n            | ID DIVASSIGN exprexpr : ID '[' INTNUM ']' '=' expr\n            | ID '[' INTNUM ']' PLUSASSIGN expr\n            | ID '[' INTNUM ']' MINASSIGN expr\n            | ID '[' INTNUM ']' MULTASSIGN expr    \n            | ID '[' INTNUM ']' DIVASSIGN exprexpr : ID '[' INTNUM ',' INTNUM ']' '=' expr\n            | ID '[' INTNUM ',' INTNUM ']' PLUSASSIGN expr\n            | ID '[' INTNUM ',' INTNUM ']' MINASSIGN expr\n            | ID '[' INTNUM ',' INTNUM ']' MULTASSIGN expr    \n            | ID '[' INTNUM ',' INTNUM ']' DIVASSIGN exprexpr : ID '=' ZEROS '(' INTNUM ')'\n            | ID '=' ONES '(' INTNUM ')'\n            | ID '=' EYE '(' INTNUM ')'expr : expr '+' expr\n            | expr '-' expr\n            | expr '*' expr\n            | expr '/' exprexpr : expr MPLUS expr\n            | expr MMINUS expr\n            | expr MMLTP expr\n            | expr MDIV exprexpr : expr EQ expr\n            | expr NEQ expr\n            | expr GTEQ expr\n            | expr LTEQ expr\n            | expr '>' expr\n            | expr '<' exprcond_expr : cond_if\n                 | cond_while\n                 | cond_forcond_block : struct\n                  | '{' start '}'cond_if : IF '(' expr ')' cond_block\n               | cond_if ELSE cond_blockcond_while : WHILE '(' expr ')' cond_blockcond_for : FOR ID '=' expr ':' expr cond_blockinstruction : BREAK ';'\n                   | CONTINUE ';'\n                   | RETURN expr ';'\n                   | PRINT array_interior ';'"
    
_lr_action_items = {'{':([0,1,2,3,5,6,7,8,9,10,14,15,16,24,25,26,27,28,50,53,54,55,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,81,82,83,84,86,87,89,90,91,92,93,97,104,105,106,117,118,119,121,122,123,124,125,126,127,128,130,136,138,139,140,141,142,143,],[3,25,-1,3,-6,-7,-8,-9,-10,-11,-50,-51,-52,-2,3,25,-5,-14,-13,91,-59,-60,25,-3,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-18,-19,-20,-21,-22,-12,-17,-56,-53,3,-61,-62,-4,25,91,91,-54,-55,-57,-33,-34,-35,-23,-24,-25,-26,-27,91,-58,-28,-29,-30,-31,-32,-37,]),'INTNUM':([0,1,2,3,5,6,7,8,9,10,11,12,13,14,15,16,19,20,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,50,53,54,55,58,59,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,81,82,83,84,86,87,88,89,90,91,92,93,96,97,98,99,100,102,104,105,106,111,112,113,114,115,117,118,119,120,121,122,123,124,125,126,127,128,130,131,132,133,134,135,136,137,138,139,140,141,142,143,],[7,7,-1,7,-6,-7,-8,-9,-10,-11,7,7,7,-50,-51,-52,7,7,-2,7,7,-5,-14,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,85,-13,7,-59,-60,7,7,7,-3,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-18,-19,-20,-21,-22,-12,-17,7,-56,-53,7,-61,-62,7,-4,108,109,110,116,7,7,7,7,7,7,7,7,-54,-55,-57,7,-33,-34,-35,-23,-24,-25,-26,-27,7,7,7,7,7,7,-58,7,-28,-29,-30,-31,-32,-37,]),'FLOATNUM':([0,1,2,3,5,6,7,8,9,10,11,12,13,14,15,16,19,20,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,50,53,54,55,58,59,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,81,82,83,84,86,87,88,89,90,91,92,93,96,97,104,105,106,111,112,113,114,115,117,118,119,120,121,122,123,124,125,126,127,128,130,131,132,133,134,135,136,137,138,139,140,141,142,143,],[8,8,-1,8,-6,-7,-8,-9,-10,-11,8,8,8,-50,-51,-52,8,8,-2,8,8,-5,-14,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,-13,8,-59,-60,8,8,8,-3,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-18,-19,-20,-21,-22,-12,-17,8,-56,-53,8,-61,-62,8,-4,8,8,8,8,8,8,8,8,-54,-55,-57,8,-33,-34,-35,-23,-24,-25,-26,-27,8,8,8,8,8,8,-58,8,-28,-29,-30,-31,-32,-37,]),'STRING':([0,1,2,3,5,6,7,8,9,10,11,12,13,14,15,16,19,20,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,50,53,54,55,58,59,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,81,82,83,84,86,87,88,89,90,91,92,93,96,97,104,105,106,111,112,113,114,115,117,118,119,120,121,122,123,124,125,126,127,128,130,131,132,133,134,135,136,137,138,139,140,141,142,143,],[9,9,-1,9,-6,-7,-8,-9,-10,-11,9,9,9,-50,-51,-52,9,9,-2,9,9,-5,-14,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,-13,9,-59,-60,9,9,9,-3,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-18,-19,-20,-21,-22,-12,-17,9,-56,-53,9,-61,-62,9,-4,9,9,9,9,9,9,9,9,-54,-55,-57,9,-33,-34,-35,-23,-24,-25,-26,-27,9,9,9,9,9,9,-58,9,-28,-29,-30,-31,-32,-37,]),'ID':([0,1,2,3,5,6,7,8,9,10,11,12,13,14,15,16,19,20,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,50,53,54,55,58,59,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,81,82,83,84,86,87,88,89,90,91,92,93,96,97,104,105,106,111,112,113,114,115,117,118,119,120,121,122,123,124,125,126,127,128,130,131,132,133,134,135,136,137,138,139,140,141,142,143,],[10,10,-1,10,-6,-7,-8,-9,-10,-11,10,10,10,-50,-51,-52,10,10,60,-2,10,10,-5,-14,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,-13,10,-59,-60,10,10,10,-3,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-18,-19,-20,-21,-22,-12,-17,10,-56,-53,10,-61,-62,10,-4,10,10,10,10,10,10,10,10,-54,-55,-57,10,-33,-34,-35,-23,-24,-25,-26,-27,10,10,10,10,10,10,-58,10,-28,-29,-30,-31,-32,-37,]),'(':([0,1,2,3,5,6,7,8,9,10,11,12,13,14,15,16,19,20,21,22,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,50,53,54,55,58,59,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,86,87,88,89,90,91,92,93,96,97,104,105,106,111,112,113,114,115,117,118,119,120,121,122,123,124,125,126,127,128,130,131,132,133,134,135,136,137,138,139,140,141,142,143,],[11,11,-1,11,-6,-7,-8,-9,-10,-11,11,11,11,-50,-51,-52,11,11,58,59,-2,11,11,-5,-14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,-13,11,-59,-60,11,11,11,-3,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-18,98,99,100,-19,-20,-21,-22,-12,-17,11,-56,-53,11,-61,-62,11,-4,11,11,11,11,11,11,11,11,-54,-55,-57,11,-33,-34,-35,-23,-24,-25,-26,-27,11,11,11,11,11,11,-58,11,-28,-29,-30,-31,-32,-37,]),'-':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,19,20,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,49,50,52,53,54,55,56,58,59,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,81,82,83,84,86,87,88,89,90,91,92,93,94,95,96,97,103,104,105,106,107,111,112,113,114,115,117,118,119,120,121,122,123,124,125,126,127,128,130,131,132,133,134,135,136,137,138,139,140,141,142,143,],[12,12,-1,12,30,-6,-7,-8,-9,-10,-11,12,12,12,-50,-51,-52,12,12,-2,12,12,-5,-14,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,30,-13,30,12,-59,-60,30,12,12,12,-3,-36,-37,-38,-39,-40,-41,-42,-43,30,30,30,30,30,30,30,30,30,30,30,-12,-17,12,-56,-53,12,-61,-62,30,30,12,-4,30,12,12,12,30,12,12,12,12,12,-54,-55,-57,12,-33,-34,-35,30,30,30,30,30,137,12,12,12,12,12,-58,12,30,30,30,30,30,-13,]),'[':([0,1,2,3,5,6,7,8,9,10,11,12,13,14,15,16,19,20,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,50,53,54,55,58,59,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,81,82,83,84,86,87,88,89,90,91,92,93,96,97,104,105,106,111,112,113,114,115,117,118,119,120,121,122,123,124,125,126,127,128,130,131,132,133,134,135,136,137,138,139,140,141,142,143,],[13,13,-1,13,-6,-7,-8,-9,-10,48,13,13,13,-50,-51,-52,13,13,-2,13,13,-5,-14,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,-13,13,-59,-60,13,13,13,-3,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-18,-19,-20,-21,-22,-12,-17,13,-56,-53,13,-61,-62,13,-4,13,13,13,13,13,13,13,13,-54,-55,-57,13,-33,-34,-35,-23,-24,-25,-26,-27,13,13,13,13,13,13,-58,13,-28,-29,-30,-31,-32,-37,]),'BREAK':([0,1,2,3,5,6,7,8,9,10,14,15,16,24,25,26,27,28,50,53,54,55,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,81,82,83,84,86,87,89,90,91,92,93,97,104,105,106,117,118,119,121,122,123,124,125,126,127,128,130,136,138,139,140,141,142,143,],[17,17,-1,17,-6,-7,-8,-9,-10,-11,-50,-51,-52,-2,17,17,-5,-14,-13,17,-59,-60,17,-3,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-18,-19,-20,-21,-22,-12,-17,-56,-53,17,-61,-62,-4,17,17,17,-54,-55,-57,-33,-34,-35,-23,-24,-25,-26,-27,17,-58,-28,-29,-30,-31,-32,-37,]),'CONTINUE':([0,1,2,3,5,6,7,8,9,10,14,15,16,24,25,26,27,28,50,53,54,55,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,81,82,83,84,86,87,89,90,91,92,93,97,104,105,106,117,118,119,121,122,123,124,125,126,127,128,130,136,138,139,140,141,142,143,],[18,18,-1,18,-6,-7,-8,-9,-10,-11,-50,-51,-52,-2,18,18,-5,-14,-13,18,-59,-60,18,-3,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-18,-19,-20,-21,-22,-12,-17,-56,-53,18,-61,-62,-4,18,18,18,-54,-55,-57,-33,-34,-35,-23,-24,-25,-26,-27,18,-58,-28,-29,-30,-31,-32,-37,]),'RETURN':([0,1,2,3,5,6,7,8,9,10,14,15,16,24,25,26,27,28,50,53,54,55,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,81,82,83,84,86,87,89,90,91,92,93,97,104,105,106,117,118,119,121,122,123,124,125,126,127,128,130,136,138,139,140,141,142,143,],[19,19,-1,19,-6,-7,-8,-9,-10,-11,-50,-51,-52,-2,19,19,-5,-14,-13,19,-59,-60,19,-3,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-18,-19,-20,-21,-22,-12,-17,-56,-53,19,-61,-62,-4,19,19,19,-54,-55,-57,-33,-34,-35,-23,-24,-25,-26,-27,19,-58,-28,-29,-30,-31,-32,-37,]),'PRINT':([0,1,2,3,5,6,7,8,9,10,14,15,16,24,25,26,27,28,50,53,54,55,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,81,82,83,84,86,87,89,90,91,92,93,97,104,105,106,117,118,119,121,122,123,124,125,126,127,128,130,136,138,139,140,141,142,143,],[20,20,-1,20,-6,-7,-8,-9,-10,-11,-50,-51,-52,-2,20,20,-5,-14,-13,20,-59,-60,20,-3,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-18,-19,-20,-21,-22,-12,-17,-56,-53,20,-61,-62,-4,20,20,20,-54,-55,-57,-33,-34,-35,-23,-24,-25,-26,-27,20,-58,-28,-29,-30,-31,-32,-37,]),'IF':([0,1,2,3,5,6,7,8,9,10,14,15,16,24,25,26,27,28,50,53,54,55,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,81,82,83,84,86,87,89,90,91,92,93,97,104,105,106,117,118,119,121,122,123,124,125,126,127,128,130,136,138,139,140,141,142,143,],[21,21,-1,21,-6,-7,-8,-9,-10,-11,-50,-51,-52,-2,21,21,-5,-14,-13,21,-59,-60,21,-3,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-18,-19,-20,-21,-22,-12,-17,-56,-53,21,-61,-62,-4,21,21,21,-54,-55,-57,-33,-34,-35,-23,-24,-25,-26,-27,21,-58,-28,-29,-30,-31,-32,-37,]),'WHILE':([0,1,2,3,5,6,7,8,9,10,14,15,16,24,25,26,27,28,50,53,54,55,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,81,82,83,84,86,87,89,90,91,92,93,97,104,105,106,117,118,119,121,122,123,124,125,126,127,128,130,136,138,139,140,141,142,143,],[22,22,-1,22,-6,-7,-8,-9,-10,-11,-50,-51,-52,-2,22,22,-5,-14,-13,22,-59,-60,22,-3,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-18,-19,-20,-21,-22,-12,-17,-56,-53,22,-61,-62,-4,22,22,22,-54,-55,-57,-33,-34,-35,-23,-24,-25,-26,-27,22,-58,-28,-29,-30,-31,-32,-37,]),'FOR':([0,1,2,3,5,6,7,8,9,10,14,15,16,24,25,26,27,28,50,53,54,55,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,81,82,83,84,86,87,89,90,91,92,93,97,104,105,106,117,118,119,121,122,123,124,125,126,127,128,130,136,138,139,140,141,142,143,],[23,23,-1,23,-6,-7,-8,-9,-10,-11,-50,-51,-52,-2,23,23,-5,-14,-13,23,-59,-60,23,-3,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-18,-19,-20,-21,-22,-12,-17,-56,-53,23,-61,-62,-4,23,23,23,-54,-55,-57,-33,-34,-35,-23,-24,-25,-26,-27,23,-58,-28,-29,-30,-31,-32,-37,]),'$end':([1,2,5,6,14,15,16,24,27,54,55,62,89,90,92,93,97,117,118,119,136,],[0,-1,-6,-7,-50,-51,-52,-2,-5,-59,-60,-3,-56,-53,-61,-62,-4,-54,-55,-57,-58,]),'}':([2,5,6,14,15,16,24,26,27,54,55,61,62,89,90,92,93,97,104,117,118,119,136,],[-1,-6,-7,-50,-51,-52,-2,62,-5,-59,-60,97,-3,-56,-53,-61,-62,-4,117,-54,-55,-57,-58,]),';':([4,7,8,9,10,17,18,28,50,52,56,57,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,81,82,83,84,86,87,103,121,122,123,124,125,126,127,128,138,139,140,141,142,143,],[27,-8,-9,-10,-11,54,55,-14,-13,-16,92,93,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-18,-19,-20,-21,-22,-12,-17,-15,-33,-34,-35,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-13,]),"'":([4,7,8,9,10,28,49,50,52,56,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,81,82,83,84,86,87,94,95,103,107,121,122,123,124,125,126,127,128,130,138,139,140,141,142,143,],[28,-8,-9,-10,-11,-14,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,-12,-17,28,28,28,28,-33,-34,-35,28,28,28,28,28,28,28,28,28,28,28,28,]),'+':([4,7,8,9,10,28,49,50,52,56,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,81,82,83,84,86,87,94,95,103,107,121,122,123,124,125,126,127,128,130,138,139,140,141,142,143,],[29,-8,-9,-10,-11,-14,29,-13,29,29,-36,-37,-38,-39,-40,-41,-42,-43,29,29,29,29,29,29,29,29,29,29,29,-12,-17,29,29,29,29,-33,-34,-35,29,29,29,29,29,29,29,29,29,29,29,-13,]),'*':([4,7,8,9,10,28,49,50,52,56,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,81,82,83,84,86,87,94,95,103,107,121,122,123,124,125,126,127,128,130,138,139,140,141,142,143,],[31,-8,-9,-10,-11,-14,31,31,31,31,31,31,-38,-39,31,31,-42,-43,31,31,31,31,31,31,31,31,31,31,31,-12,-17,31,31,31,31,-33,-34,-35,31,31,31,31,31,31,31,31,31,31,31,31,]),'/':([4,7,8,9,10,28,49,50,52,56,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,81,82,83,84,86,87,94,95,103,107,121,122,123,124,125,126,127,128,130,138,139,140,141,142,143,],[32,-8,-9,-10,-11,-14,32,32,32,32,32,32,-38,-39,32,32,-42,-43,32,32,32,32,32,32,32,32,32,32,32,-12,-17,32,32,32,32,-33,-34,-35,32,32,32,32,32,32,32,32,32,32,32,32,]),'MPLUS':([4,7,8,9,10,28,49,50,52,56,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,81,82,83,84,86,87,94,95,103,107,121,122,123,124,125,126,127,128,130,138,139,140,141,142,143,],[33,-8,-9,-10,-11,-14,33,-13,33,33,-36,-37,-38,-39,-40,-41,-42,-43,33,33,33,33,33,33,33,33,33,33,33,-12,-17,33,33,33,33,-33,-34,-35,33,33,33,33,33,33,33,33,33,33,33,-13,]),'MMINUS':([4,7,8,9,10,28,49,50,52,56,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,81,82,83,84,86,87,94,95,103,107,121,122,123,124,125,126,127,128,130,138,139,140,141,142,143,],[34,-8,-9,-10,-11,-14,34,-13,34,34,-36,-37,-38,-39,-40,-41,-42,-43,34,34,34,34,34,34,34,34,34,34,34,-12,-17,34,34,34,34,-33,-34,-35,34,34,34,34,34,34,34,34,34,34,34,-13,]),'MMLTP':([4,7,8,9,10,28,49,50,52,56,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,81,82,83,84,86,87,94,95,103,107,121,122,123,124,125,126,127,128,130,138,139,140,141,142,143,],[35,-8,-9,-10,-11,-14,35,35,35,35,35,35,-38,-39,35,35,-42,-43,35,35,35,35,35,35,35,35,35,35,35,-12,-17,35,35,35,35,-33,-34,-35,35,35,35,35,35,35,35,35,35,35,35,35,]),'MDIV':([4,7,8,9,10,28,49,50,52,56,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,81,82,83,84,86,87,94,95,103,107,121,122,123,124,125,126,127,128,130,138,139,140,141,142,143,],[36,-8,-9,-10,-11,-14,36,36,36,36,36,36,-38,-39,36,36,-42,-43,36,36,36,36,36,36,36,36,36,36,36,-12,-17,36,36,36,36,-33,-34,-35,36,36,36,36,36,36,36,36,36,36,36,36,]),'EQ':([4,7,8,9,10,28,49,50,52,56,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,81,82,83,84,86,87,94,95,103,107,121,122,123,124,125,126,127,128,130,138,139,140,141,142,143,],[37,-8,-9,-10,-11,-14,37,-13,37,37,-36,-37,-38,-39,-40,-41,-42,-43,37,37,37,37,37,37,-18,-19,-20,-21,-22,-12,-17,37,37,37,37,-33,-34,-35,-23,-24,-25,-26,-27,37,-28,-29,-30,-31,-32,-13,]),'NEQ':([4,7,8,9,10,28,49,50,52,56,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,81,82,83,84,86,87,94,95,103,107,121,122,123,124,125,126,127,128,130,138,139,140,141,142,143,],[38,-8,-9,-10,-11,-14,38,-13,38,38,-36,-37,-38,-39,-40,-41,-42,-43,38,38,38,38,38,38,-18,-19,-20,-21,-22,-12,-17,38,38,38,38,-33,-34,-35,-23,-24,-25,-26,-27,38,-28,-29,-30,-31,-32,-13,]),'GTEQ':([4,7,8,9,10,28,49,50,52,56,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,81,82,83,84,86,87,94,95,103,107,121,122,123,124,125,126,127,128,130,138,139,140,141,142,143,],[39,-8,-9,-10,-11,-14,39,-13,39,39,-36,-37,-38,-39,-40,-41,-42,-43,39,39,39,39,39,39,-18,-19,-20,-21,-22,-12,-17,39,39,39,39,-33,-34,-35,-23,-24,-25,-26,-27,39,-28,-29,-30,-31,-32,-13,]),'LTEQ':([4,7,8,9,10,28,49,50,52,56,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,81,82,83,84,86,87,94,95,103,107,121,122,123,124,125,126,127,128,130,138,139,140,141,142,143,],[40,-8,-9,-10,-11,-14,40,-13,40,40,-36,-37,-38,-39,-40,-41,-42,-43,40,40,40,40,40,40,-18,-19,-20,-21,-22,-12,-17,40,40,40,40,-33,-34,-35,-23,-24,-25,-26,-27,40,-28,-29,-30,-31,-32,-13,]),'>':([4,7,8,9,10,28,49,50,52,56,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,81,82,83,84,86,87,94,95,103,107,121,122,123,124,125,126,127,128,130,138,139,140,141,142,143,],[41,-8,-9,-10,-11,-14,41,-13,41,41,-36,-37,-38,-39,-40,-41,-42,-43,41,41,41,41,41,41,-18,-19,-20,-21,-22,-12,-17,41,41,41,41,-33,-34,-35,-23,-24,-25,-26,-27,41,-28,-29,-30,-31,-32,-13,]),'<':([4,7,8,9,10,28,49,50,52,56,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,81,82,83,84,86,87,94,95,103,107,121,122,123,124,125,126,127,128,130,138,139,140,141,142,143,],[42,-8,-9,-10,-11,-14,42,-13,42,42,-36,-37,-38,-39,-40,-41,-42,-43,42,42,42,42,42,42,-18,-19,-20,-21,-22,-12,-17,42,42,42,42,-33,-34,-35,-23,-24,-25,-26,-27,42,-28,-29,-30,-31,-32,-13,]),'ELSE':([5,6,14,15,16,27,54,55,89,90,92,93,117,118,119,136,],[-6,-7,53,-51,-52,-5,-59,-60,-56,-53,-61,-62,-54,-55,-57,-58,]),')':([7,8,9,10,28,49,50,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,81,82,83,84,86,87,94,95,108,109,110,121,122,123,124,125,126,127,128,138,139,140,141,142,],[-8,-9,-10,-11,-14,86,-13,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-18,-19,-20,-21,-22,-12,-17,105,106,121,122,123,-33,-34,-35,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,]),']':([7,8,9,10,28,50,51,52,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,81,82,83,84,85,86,87,103,116,121,122,123,124,125,126,127,128,138,139,140,141,142,],[-8,-9,-10,-11,-14,-13,87,-16,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-18,-19,-20,-21,-22,101,-12,-17,-15,129,-33,-34,-35,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,]),',':([7,8,9,10,28,50,51,52,57,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,81,82,83,84,85,86,87,103,121,122,123,124,125,126,127,128,138,139,140,141,142,],[-8,-9,-10,-11,-14,-13,88,-16,88,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-18,-19,-20,-21,-22,102,-12,-17,-15,-33,-34,-35,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,]),':':([7,8,9,10,28,50,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,81,82,83,84,86,87,107,121,122,123,124,125,126,127,128,138,139,140,141,142,],[-8,-9,-10,-11,-14,-13,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-18,-19,-20,-21,-22,-12,-17,120,-33,-34,-35,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,]),'=':([10,60,101,129,],[43,96,111,131,]),'PLUSASSIGN':([10,101,129,],[44,112,132,]),'MINASSIGN':([10,101,129,],[45,113,133,]),'MULTASSIGN':([10,101,129,],[46,114,134,]),'DIVASSIGN':([10,101,129,],[47,115,135,]),'ZEROS':([43,],[78,]),'ONES':([43,],[79,]),'EYE':([43,],[80,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'start':([0,3,25,91,],[1,26,61,104,]),'struct':([0,1,3,25,26,53,61,91,104,105,106,130,],[2,24,2,2,24,90,24,2,24,90,90,90,]),'expr':([0,1,3,11,12,13,19,20,25,26,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,53,58,59,61,88,91,96,104,105,106,111,112,113,114,115,120,130,131,132,133,134,135,137,],[4,4,4,49,50,52,56,52,4,4,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,81,82,83,84,4,94,95,4,103,4,107,4,4,4,124,125,126,127,128,130,4,138,139,140,141,142,143,]),'cond_expr':([0,1,3,25,26,53,61,91,104,105,106,130,],[5,5,5,5,5,5,5,5,5,5,5,5,]),'instruction':([0,1,3,25,26,53,61,91,104,105,106,130,],[6,6,6,6,6,6,6,6,6,6,6,6,]),'cond_if':([0,1,3,25,26,53,61,91,104,105,106,130,],[14,14,14,14,14,14,14,14,14,14,14,14,]),'cond_while':([0,1,3,25,26,53,61,91,104,105,106,130,],[15,15,15,15,15,15,15,15,15,15,15,15,]),'cond_for':([0,1,3,25,26,53,61,91,104,105,106,130,],[16,16,16,16,16,16,16,16,16,16,16,16,]),'array_interior':([13,20,],[51,57,]),'cond_block':([53,105,106,130,],[89,118,119,136,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> start","S'",1,None,None,None),
  ('start -> struct','start',1,'p_start','Mparser.py',18),
  ('start -> start struct','start',2,'p_start','Mparser.py',19),
  ('start -> { start }','start',3,'p_start','Mparser.py',20),
  ('start -> start { start }','start',4,'p_start','Mparser.py',21),
  ('struct -> expr ;','struct',2,'p_struct','Mparser.py',24),
  ('struct -> cond_expr','struct',1,'p_struct','Mparser.py',25),
  ('struct -> instruction','struct',1,'p_struct','Mparser.py',26),
  ('expr -> INTNUM','expr',1,'p_expr_const','Mparser.py',31),
  ('expr -> FLOATNUM','expr',1,'p_expr_const','Mparser.py',32),
  ('expr -> STRING','expr',1,'p_expr_const','Mparser.py',33),
  ('expr -> ID','expr',1,'p_expr_id','Mparser.py',36),
  ('expr -> ( expr )','expr',3,'p_expr_group','Mparser.py',39),
  ('expr -> - expr','expr',2,'p_expr_unmin','Mparser.py',44),
  ("expr -> expr '",'expr',2,'p_expr_transpose','Mparser.py',47),
  ('array_interior -> array_interior , expr','array_interior',3,'p_array_interior','Mparser.py',52),
  ('array_interior -> expr','array_interior',1,'p_array_interior','Mparser.py',53),
  ('expr -> [ array_interior ]','expr',3,'p_expr_array','Mparser.py',56),
  ('expr -> ID = expr','expr',3,'p_expr_assign','Mparser.py',61),
  ('expr -> ID PLUSASSIGN expr','expr',3,'p_expr_assign','Mparser.py',62),
  ('expr -> ID MINASSIGN expr','expr',3,'p_expr_assign','Mparser.py',63),
  ('expr -> ID MULTASSIGN expr','expr',3,'p_expr_assign','Mparser.py',64),
  ('expr -> ID DIVASSIGN expr','expr',3,'p_expr_assign','Mparser.py',65),
  ('expr -> ID [ INTNUM ] = expr','expr',6,'p_expr_arrassign','Mparser.py',68),
  ('expr -> ID [ INTNUM ] PLUSASSIGN expr','expr',6,'p_expr_arrassign','Mparser.py',69),
  ('expr -> ID [ INTNUM ] MINASSIGN expr','expr',6,'p_expr_arrassign','Mparser.py',70),
  ('expr -> ID [ INTNUM ] MULTASSIGN expr','expr',6,'p_expr_arrassign','Mparser.py',71),
  ('expr -> ID [ INTNUM ] DIVASSIGN expr','expr',6,'p_expr_arrassign','Mparser.py',72),
  ('expr -> ID [ INTNUM , INTNUM ] = expr','expr',8,'p_expr_matassign','Mparser.py',75),
  ('expr -> ID [ INTNUM , INTNUM ] PLUSASSIGN expr','expr',8,'p_expr_matassign','Mparser.py',76),
  ('expr -> ID [ INTNUM , INTNUM ] MINASSIGN expr','expr',8,'p_expr_matassign','Mparser.py',77),
  ('expr -> ID [ INTNUM , INTNUM ] MULTASSIGN expr','expr',8,'p_expr_matassign','Mparser.py',78),
  ('expr -> ID [ INTNUM , INTNUM ] DIVASSIGN expr','expr',8,'p_expr_matassign','Mparser.py',79),
  ('expr -> ID = ZEROS ( INTNUM )','expr',6,'p_expr_matinit_special','Mparser.py',82),
  ('expr -> ID = ONES ( INTNUM )','expr',6,'p_expr_matinit_special','Mparser.py',83),
  ('expr -> ID = EYE ( INTNUM )','expr',6,'p_expr_matinit_special','Mparser.py',84),
  ('expr -> expr + expr','expr',3,'p_expr_binop','Mparser.py',89),
  ('expr -> expr - expr','expr',3,'p_expr_binop','Mparser.py',90),
  ('expr -> expr * expr','expr',3,'p_expr_binop','Mparser.py',91),
  ('expr -> expr / expr','expr',3,'p_expr_binop','Mparser.py',92),
  ('expr -> expr MPLUS expr','expr',3,'p_expr_matop','Mparser.py',95),
  ('expr -> expr MMINUS expr','expr',3,'p_expr_matop','Mparser.py',96),
  ('expr -> expr MMLTP expr','expr',3,'p_expr_matop','Mparser.py',97),
  ('expr -> expr MDIV expr','expr',3,'p_expr_matop','Mparser.py',98),
  ('expr -> expr EQ expr','expr',3,'p_expr_logic','Mparser.py',103),
  ('expr -> expr NEQ expr','expr',3,'p_expr_logic','Mparser.py',104),
  ('expr -> expr GTEQ expr','expr',3,'p_expr_logic','Mparser.py',105),
  ('expr -> expr LTEQ expr','expr',3,'p_expr_logic','Mparser.py',106),
  ('expr -> expr > expr','expr',3,'p_expr_logic','Mparser.py',107),
  ('expr -> expr < expr','expr',3,'p_expr_logic','Mparser.py',108),
  ('cond_expr -> cond_if','cond_expr',1,'p_cond_expr','Mparser.py',113),
  ('cond_expr -> cond_while','cond_expr',1,'p_cond_expr','Mparser.py',114),
  ('cond_expr -> cond_for','cond_expr',1,'p_cond_expr','Mparser.py',115),
  ('cond_block -> struct','cond_block',1,'p_cond_block','Mparser.py',118),
  ('cond_block -> { start }','cond_block',3,'p_cond_block','Mparser.py',119),
  ('cond_if -> IF ( expr ) cond_block','cond_if',5,'p_cond_if','Mparser.py',122),
  ('cond_if -> cond_if ELSE cond_block','cond_if',3,'p_cond_if','Mparser.py',123),
  ('cond_while -> WHILE ( expr ) cond_block','cond_while',5,'p_cond_while','Mparser.py',126),
  ('cond_for -> FOR ID = expr : expr cond_block','cond_for',7,'p_cond_for','Mparser.py',129),
  ('instruction -> BREAK ;','instruction',2,'p_instruction','Mparser.py',134),
  ('instruction -> CONTINUE ;','instruction',2,'p_instruction','Mparser.py',135),
  ('instruction -> RETURN expr ;','instruction',3,'p_instruction','Mparser.py',136),
  ('instruction -> PRINT array_interior ;','instruction',3,'p_instruction','Mparser.py',137),
]
