Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> start
Rule 1     start -> struct
Rule 2     start -> start struct
Rule 3     start -> { start }
Rule 4     start -> start { start }
Rule 5     struct -> expr ;
Rule 6     struct -> cond_expr
Rule 7     struct -> instruction
Rule 8     loop_start -> loop_struct
Rule 9     loop_start -> loop_start loop_struct
Rule 10    loop_start -> { loop_start }
Rule 11    loop_start -> loop_start { loop_start }
Rule 12    loop_struct -> expr ;
Rule 13    loop_struct -> loop_cond_expr
Rule 14    loop_struct -> loop_instruction
Rule 15    expr -> INTNUM
Rule 16    expr -> FLOATNUM
Rule 17    expr -> STRING
Rule 18    expr -> ID
Rule 19    expr -> ( expr )
Rule 20    expr -> - expr
Rule 21    expr -> expr '
Rule 22    array_interior -> array_interior , expr
Rule 23    array_interior -> expr
Rule 24    expr -> [ array_interior ]
Rule 25    expr -> ID = expr
Rule 26    expr -> ID PLUSASSIGN expr
Rule 27    expr -> ID MINASSIGN expr
Rule 28    expr -> ID MULTASSIGN expr
Rule 29    expr -> ID DIVASSIGN expr
Rule 30    expr -> ID [ expr ] = expr
Rule 31    expr -> ID [ expr ] PLUSASSIGN expr
Rule 32    expr -> ID [ expr ] MINASSIGN expr
Rule 33    expr -> ID [ expr ] MULTASSIGN expr
Rule 34    expr -> ID [ expr ] DIVASSIGN expr
Rule 35    expr -> ID [ expr , expr ] = expr
Rule 36    expr -> ID [ expr , expr ] PLUSASSIGN expr
Rule 37    expr -> ID [ expr , expr ] MINASSIGN expr
Rule 38    expr -> ID [ expr , expr ] MULTASSIGN expr
Rule 39    expr -> ID [ expr , expr ] DIVASSIGN expr
Rule 40    expr -> ID = ZEROS ( expr )
Rule 41    expr -> ID = ONES ( expr )
Rule 42    expr -> ID = EYE ( expr )
Rule 43    expr -> expr + expr
Rule 44    expr -> expr - expr
Rule 45    expr -> expr * expr
Rule 46    expr -> expr / expr
Rule 47    expr -> expr MPLUS expr
Rule 48    expr -> expr MMINUS expr
Rule 49    expr -> expr MMLTP expr
Rule 50    expr -> expr MDIV expr
Rule 51    expr -> expr EQ expr
Rule 52    expr -> expr NEQ expr
Rule 53    expr -> expr GTEQ expr
Rule 54    expr -> expr LTEQ expr
Rule 55    expr -> expr > expr
Rule 56    expr -> expr < expr
Rule 57    cond_expr -> cond_if
Rule 58    cond_expr -> cond_while
Rule 59    cond_expr -> cond_for
Rule 60    cond_block -> struct
Rule 61    cond_block -> { start }
Rule 62    cond_if -> IF ( expr ) cond_block
Rule 63    cond_if -> cond_if ELSE cond_block
Rule 64    loop_cond_expr -> loop_cond_if
Rule 65    loop_cond_expr -> cond_while
Rule 66    loop_cond_expr -> cond_for
Rule 67    loop_cond_block -> loop_struct
Rule 68    loop_cond_block -> { loop_start }
Rule 69    loop_cond_if -> IF ( expr ) loop_cond_block
Rule 70    loop_cond_if -> loop_cond_if ELSE loop_cond_block
Rule 71    cond_while -> WHILE ( expr ) loop_cond_block
Rule 72    cond_for -> FOR ID = expr : expr loop_cond_block
Rule 73    instruction -> RETURN expr ;
Rule 74    instruction -> PRINT array_interior ;
Rule 75    loop_instruction -> BREAK ;
Rule 76    loop_instruction -> CONTINUE ;
Rule 77    loop_instruction -> RETURN expr ;
Rule 78    loop_instruction -> PRINT array_interior ;

Terminals, with rules where they appear

'                    : 21
(                    : 19 40 41 42 62 69 71
)                    : 19 40 41 42 62 69 71
*                    : 45
+                    : 43
,                    : 22 35 36 37 38 39
-                    : 20 44
/                    : 46
:                    : 72
;                    : 5 12 73 74 75 76 77 78
<                    : 56
=                    : 25 30 35 40 41 42 72
>                    : 55
BREAK                : 75
CONTINUE             : 76
DIVASSIGN            : 29 34 39
ELSE                 : 63 70
EQ                   : 51
EYE                  : 42
FLOATNUM             : 16
FOR                  : 72
GTEQ                 : 53
ID                   : 18 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 72
IF                   : 62 69
INTNUM               : 15
LTEQ                 : 54
MDIV                 : 50
MINASSIGN            : 27 32 37
MMINUS               : 48
MMLTP                : 49
MPLUS                : 47
MULTASSIGN           : 28 33 38
NEQ                  : 52
ONES                 : 41
PLUSASSIGN           : 26 31 36
PRINT                : 74 78
RETURN               : 73 77
STRING               : 17
WHILE                : 71
ZEROS                : 40
[                    : 24 30 31 32 33 34 35 36 37 38 39
]                    : 24 30 31 32 33 34 35 36 37 38 39
error                : 
{                    : 3 4 10 11 61 68
}                    : 3 4 10 11 61 68

Nonterminals, with rules where they appear

array_interior       : 22 24 74 78
cond_block           : 62 63
cond_expr            : 6
cond_for             : 59 66
cond_if              : 57 63
cond_while           : 58 65
expr                 : 5 12 19 20 21 22 23 25 26 27 28 29 30 30 31 31 32 32 33 33 34 34 35 35 35 36 36 36 37 37 37 38 38 38 39 39 39 40 41 42 43 43 44 44 45 45 46 46 47 47 48 48 49 49 50 50 51 51 52 52 53 53 54 54 55 55 56 56 62 69 71 72 72 73 77
instruction          : 7
loop_cond_block      : 69 70 71 72
loop_cond_expr       : 13
loop_cond_if         : 64 70
loop_instruction     : 14
loop_start           : 9 10 11 11 68
loop_struct          : 8 9 67
start                : 2 3 4 4 61 0
struct               : 1 2 60

Parsing method: LALR

state 0

    (0) S' -> . start
    (1) start -> . struct
    (2) start -> . start struct
    (3) start -> . { start }
    (4) start -> . start { start }
    (5) struct -> . expr ;
    (6) struct -> . cond_expr
    (7) struct -> . instruction
    (15) expr -> . INTNUM
    (16) expr -> . FLOATNUM
    (17) expr -> . STRING
    (18) expr -> . ID
    (19) expr -> . ( expr )
    (20) expr -> . - expr
    (21) expr -> . expr '
    (24) expr -> . [ array_interior ]
    (25) expr -> . ID = expr
    (26) expr -> . ID PLUSASSIGN expr
    (27) expr -> . ID MINASSIGN expr
    (28) expr -> . ID MULTASSIGN expr
    (29) expr -> . ID DIVASSIGN expr
    (30) expr -> . ID [ expr ] = expr
    (31) expr -> . ID [ expr ] PLUSASSIGN expr
    (32) expr -> . ID [ expr ] MINASSIGN expr
    (33) expr -> . ID [ expr ] MULTASSIGN expr
    (34) expr -> . ID [ expr ] DIVASSIGN expr
    (35) expr -> . ID [ expr , expr ] = expr
    (36) expr -> . ID [ expr , expr ] PLUSASSIGN expr
    (37) expr -> . ID [ expr , expr ] MINASSIGN expr
    (38) expr -> . ID [ expr , expr ] MULTASSIGN expr
    (39) expr -> . ID [ expr , expr ] DIVASSIGN expr
    (40) expr -> . ID = ZEROS ( expr )
    (41) expr -> . ID = ONES ( expr )
    (42) expr -> . ID = EYE ( expr )
    (43) expr -> . expr + expr
    (44) expr -> . expr - expr
    (45) expr -> . expr * expr
    (46) expr -> . expr / expr
    (47) expr -> . expr MPLUS expr
    (48) expr -> . expr MMINUS expr
    (49) expr -> . expr MMLTP expr
    (50) expr -> . expr MDIV expr
    (51) expr -> . expr EQ expr
    (52) expr -> . expr NEQ expr
    (53) expr -> . expr GTEQ expr
    (54) expr -> . expr LTEQ expr
    (55) expr -> . expr > expr
    (56) expr -> . expr < expr
    (57) cond_expr -> . cond_if
    (58) cond_expr -> . cond_while
    (59) cond_expr -> . cond_for
    (73) instruction -> . RETURN expr ;
    (74) instruction -> . PRINT array_interior ;
    (62) cond_if -> . IF ( expr ) cond_block
    (63) cond_if -> . cond_if ELSE cond_block
    (71) cond_while -> . WHILE ( expr ) loop_cond_block
    (72) cond_for -> . FOR ID = expr : expr loop_cond_block

    {               shift and go to state 3
    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ID              shift and go to state 10
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13
    RETURN          shift and go to state 17
    PRINT           shift and go to state 18
    IF              shift and go to state 19
    WHILE           shift and go to state 20
    FOR             shift and go to state 21

    start                          shift and go to state 1
    struct                         shift and go to state 2
    expr                           shift and go to state 4
    cond_expr                      shift and go to state 5
    instruction                    shift and go to state 6
    cond_if                        shift and go to state 14
    cond_while                     shift and go to state 15
    cond_for                       shift and go to state 16

state 1

    (0) S' -> start .
    (2) start -> start . struct
    (4) start -> start . { start }
    (5) struct -> . expr ;
    (6) struct -> . cond_expr
    (7) struct -> . instruction
    (15) expr -> . INTNUM
    (16) expr -> . FLOATNUM
    (17) expr -> . STRING
    (18) expr -> . ID
    (19) expr -> . ( expr )
    (20) expr -> . - expr
    (21) expr -> . expr '
    (24) expr -> . [ array_interior ]
    (25) expr -> . ID = expr
    (26) expr -> . ID PLUSASSIGN expr
    (27) expr -> . ID MINASSIGN expr
    (28) expr -> . ID MULTASSIGN expr
    (29) expr -> . ID DIVASSIGN expr
    (30) expr -> . ID [ expr ] = expr
    (31) expr -> . ID [ expr ] PLUSASSIGN expr
    (32) expr -> . ID [ expr ] MINASSIGN expr
    (33) expr -> . ID [ expr ] MULTASSIGN expr
    (34) expr -> . ID [ expr ] DIVASSIGN expr
    (35) expr -> . ID [ expr , expr ] = expr
    (36) expr -> . ID [ expr , expr ] PLUSASSIGN expr
    (37) expr -> . ID [ expr , expr ] MINASSIGN expr
    (38) expr -> . ID [ expr , expr ] MULTASSIGN expr
    (39) expr -> . ID [ expr , expr ] DIVASSIGN expr
    (40) expr -> . ID = ZEROS ( expr )
    (41) expr -> . ID = ONES ( expr )
    (42) expr -> . ID = EYE ( expr )
    (43) expr -> . expr + expr
    (44) expr -> . expr - expr
    (45) expr -> . expr * expr
    (46) expr -> . expr / expr
    (47) expr -> . expr MPLUS expr
    (48) expr -> . expr MMINUS expr
    (49) expr -> . expr MMLTP expr
    (50) expr -> . expr MDIV expr
    (51) expr -> . expr EQ expr
    (52) expr -> . expr NEQ expr
    (53) expr -> . expr GTEQ expr
    (54) expr -> . expr LTEQ expr
    (55) expr -> . expr > expr
    (56) expr -> . expr < expr
    (57) cond_expr -> . cond_if
    (58) cond_expr -> . cond_while
    (59) cond_expr -> . cond_for
    (73) instruction -> . RETURN expr ;
    (74) instruction -> . PRINT array_interior ;
    (62) cond_if -> . IF ( expr ) cond_block
    (63) cond_if -> . cond_if ELSE cond_block
    (71) cond_while -> . WHILE ( expr ) loop_cond_block
    (72) cond_for -> . FOR ID = expr : expr loop_cond_block

    {               shift and go to state 23
    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ID              shift and go to state 10
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13
    RETURN          shift and go to state 17
    PRINT           shift and go to state 18
    IF              shift and go to state 19
    WHILE           shift and go to state 20
    FOR             shift and go to state 21

    struct                         shift and go to state 22
    expr                           shift and go to state 4
    cond_expr                      shift and go to state 5
    instruction                    shift and go to state 6
    cond_if                        shift and go to state 14
    cond_while                     shift and go to state 15
    cond_for                       shift and go to state 16

state 2

    (1) start -> struct .

    {               reduce using rule 1 (start -> struct .)
    INTNUM          reduce using rule 1 (start -> struct .)
    FLOATNUM        reduce using rule 1 (start -> struct .)
    STRING          reduce using rule 1 (start -> struct .)
    ID              reduce using rule 1 (start -> struct .)
    (               reduce using rule 1 (start -> struct .)
    -               reduce using rule 1 (start -> struct .)
    [               reduce using rule 1 (start -> struct .)
    RETURN          reduce using rule 1 (start -> struct .)
    PRINT           reduce using rule 1 (start -> struct .)
    IF              reduce using rule 1 (start -> struct .)
    WHILE           reduce using rule 1 (start -> struct .)
    FOR             reduce using rule 1 (start -> struct .)
    $end            reduce using rule 1 (start -> struct .)
    }               reduce using rule 1 (start -> struct .)


state 3

    (3) start -> { . start }
    (1) start -> . struct
    (2) start -> . start struct
    (3) start -> . { start }
    (4) start -> . start { start }
    (5) struct -> . expr ;
    (6) struct -> . cond_expr
    (7) struct -> . instruction
    (15) expr -> . INTNUM
    (16) expr -> . FLOATNUM
    (17) expr -> . STRING
    (18) expr -> . ID
    (19) expr -> . ( expr )
    (20) expr -> . - expr
    (21) expr -> . expr '
    (24) expr -> . [ array_interior ]
    (25) expr -> . ID = expr
    (26) expr -> . ID PLUSASSIGN expr
    (27) expr -> . ID MINASSIGN expr
    (28) expr -> . ID MULTASSIGN expr
    (29) expr -> . ID DIVASSIGN expr
    (30) expr -> . ID [ expr ] = expr
    (31) expr -> . ID [ expr ] PLUSASSIGN expr
    (32) expr -> . ID [ expr ] MINASSIGN expr
    (33) expr -> . ID [ expr ] MULTASSIGN expr
    (34) expr -> . ID [ expr ] DIVASSIGN expr
    (35) expr -> . ID [ expr , expr ] = expr
    (36) expr -> . ID [ expr , expr ] PLUSASSIGN expr
    (37) expr -> . ID [ expr , expr ] MINASSIGN expr
    (38) expr -> . ID [ expr , expr ] MULTASSIGN expr
    (39) expr -> . ID [ expr , expr ] DIVASSIGN expr
    (40) expr -> . ID = ZEROS ( expr )
    (41) expr -> . ID = ONES ( expr )
    (42) expr -> . ID = EYE ( expr )
    (43) expr -> . expr + expr
    (44) expr -> . expr - expr
    (45) expr -> . expr * expr
    (46) expr -> . expr / expr
    (47) expr -> . expr MPLUS expr
    (48) expr -> . expr MMINUS expr
    (49) expr -> . expr MMLTP expr
    (50) expr -> . expr MDIV expr
    (51) expr -> . expr EQ expr
    (52) expr -> . expr NEQ expr
    (53) expr -> . expr GTEQ expr
    (54) expr -> . expr LTEQ expr
    (55) expr -> . expr > expr
    (56) expr -> . expr < expr
    (57) cond_expr -> . cond_if
    (58) cond_expr -> . cond_while
    (59) cond_expr -> . cond_for
    (73) instruction -> . RETURN expr ;
    (74) instruction -> . PRINT array_interior ;
    (62) cond_if -> . IF ( expr ) cond_block
    (63) cond_if -> . cond_if ELSE cond_block
    (71) cond_while -> . WHILE ( expr ) loop_cond_block
    (72) cond_for -> . FOR ID = expr : expr loop_cond_block

    {               shift and go to state 3
    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ID              shift and go to state 10
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13
    RETURN          shift and go to state 17
    PRINT           shift and go to state 18
    IF              shift and go to state 19
    WHILE           shift and go to state 20
    FOR             shift and go to state 21

    start                          shift and go to state 24
    struct                         shift and go to state 2
    expr                           shift and go to state 4
    cond_expr                      shift and go to state 5
    instruction                    shift and go to state 6
    cond_if                        shift and go to state 14
    cond_while                     shift and go to state 15
    cond_for                       shift and go to state 16

state 4

    (5) struct -> expr . ;
    (21) expr -> expr . '
    (43) expr -> expr . + expr
    (44) expr -> expr . - expr
    (45) expr -> expr . * expr
    (46) expr -> expr . / expr
    (47) expr -> expr . MPLUS expr
    (48) expr -> expr . MMINUS expr
    (49) expr -> expr . MMLTP expr
    (50) expr -> expr . MDIV expr
    (51) expr -> expr . EQ expr
    (52) expr -> expr . NEQ expr
    (53) expr -> expr . GTEQ expr
    (54) expr -> expr . LTEQ expr
    (55) expr -> expr . > expr
    (56) expr -> expr . < expr

    ;               shift and go to state 25
    '               shift and go to state 26
    +               shift and go to state 27
    -               shift and go to state 28
    *               shift and go to state 29
    /               shift and go to state 30
    MPLUS           shift and go to state 31
    MMINUS          shift and go to state 32
    MMLTP           shift and go to state 33
    MDIV            shift and go to state 34
    EQ              shift and go to state 35
    NEQ             shift and go to state 36
    GTEQ            shift and go to state 37
    LTEQ            shift and go to state 38
    >               shift and go to state 39
    <               shift and go to state 40


state 5

    (6) struct -> cond_expr .

    {               reduce using rule 6 (struct -> cond_expr .)
    INTNUM          reduce using rule 6 (struct -> cond_expr .)
    FLOATNUM        reduce using rule 6 (struct -> cond_expr .)
    STRING          reduce using rule 6 (struct -> cond_expr .)
    ID              reduce using rule 6 (struct -> cond_expr .)
    (               reduce using rule 6 (struct -> cond_expr .)
    -               reduce using rule 6 (struct -> cond_expr .)
    [               reduce using rule 6 (struct -> cond_expr .)
    RETURN          reduce using rule 6 (struct -> cond_expr .)
    PRINT           reduce using rule 6 (struct -> cond_expr .)
    IF              reduce using rule 6 (struct -> cond_expr .)
    WHILE           reduce using rule 6 (struct -> cond_expr .)
    FOR             reduce using rule 6 (struct -> cond_expr .)
    $end            reduce using rule 6 (struct -> cond_expr .)
    }               reduce using rule 6 (struct -> cond_expr .)
    ELSE            reduce using rule 6 (struct -> cond_expr .)


state 6

    (7) struct -> instruction .

    {               reduce using rule 7 (struct -> instruction .)
    INTNUM          reduce using rule 7 (struct -> instruction .)
    FLOATNUM        reduce using rule 7 (struct -> instruction .)
    STRING          reduce using rule 7 (struct -> instruction .)
    ID              reduce using rule 7 (struct -> instruction .)
    (               reduce using rule 7 (struct -> instruction .)
    -               reduce using rule 7 (struct -> instruction .)
    [               reduce using rule 7 (struct -> instruction .)
    RETURN          reduce using rule 7 (struct -> instruction .)
    PRINT           reduce using rule 7 (struct -> instruction .)
    IF              reduce using rule 7 (struct -> instruction .)
    WHILE           reduce using rule 7 (struct -> instruction .)
    FOR             reduce using rule 7 (struct -> instruction .)
    $end            reduce using rule 7 (struct -> instruction .)
    }               reduce using rule 7 (struct -> instruction .)
    ELSE            reduce using rule 7 (struct -> instruction .)


state 7

    (15) expr -> INTNUM .

    ;               reduce using rule 15 (expr -> INTNUM .)
    '               reduce using rule 15 (expr -> INTNUM .)
    +               reduce using rule 15 (expr -> INTNUM .)
    -               reduce using rule 15 (expr -> INTNUM .)
    *               reduce using rule 15 (expr -> INTNUM .)
    /               reduce using rule 15 (expr -> INTNUM .)
    MPLUS           reduce using rule 15 (expr -> INTNUM .)
    MMINUS          reduce using rule 15 (expr -> INTNUM .)
    MMLTP           reduce using rule 15 (expr -> INTNUM .)
    MDIV            reduce using rule 15 (expr -> INTNUM .)
    EQ              reduce using rule 15 (expr -> INTNUM .)
    NEQ             reduce using rule 15 (expr -> INTNUM .)
    GTEQ            reduce using rule 15 (expr -> INTNUM .)
    LTEQ            reduce using rule 15 (expr -> INTNUM .)
    >               reduce using rule 15 (expr -> INTNUM .)
    <               reduce using rule 15 (expr -> INTNUM .)
    )               reduce using rule 15 (expr -> INTNUM .)
    ]               reduce using rule 15 (expr -> INTNUM .)
    ,               reduce using rule 15 (expr -> INTNUM .)
    :               reduce using rule 15 (expr -> INTNUM .)
    {               reduce using rule 15 (expr -> INTNUM .)
    INTNUM          reduce using rule 15 (expr -> INTNUM .)
    FLOATNUM        reduce using rule 15 (expr -> INTNUM .)
    STRING          reduce using rule 15 (expr -> INTNUM .)
    ID              reduce using rule 15 (expr -> INTNUM .)
    (               reduce using rule 15 (expr -> INTNUM .)
    [               reduce using rule 15 (expr -> INTNUM .)
    BREAK           reduce using rule 15 (expr -> INTNUM .)
    CONTINUE        reduce using rule 15 (expr -> INTNUM .)
    RETURN          reduce using rule 15 (expr -> INTNUM .)
    PRINT           reduce using rule 15 (expr -> INTNUM .)
    IF              reduce using rule 15 (expr -> INTNUM .)
    WHILE           reduce using rule 15 (expr -> INTNUM .)
    FOR             reduce using rule 15 (expr -> INTNUM .)


state 8

    (16) expr -> FLOATNUM .

    ;               reduce using rule 16 (expr -> FLOATNUM .)
    '               reduce using rule 16 (expr -> FLOATNUM .)
    +               reduce using rule 16 (expr -> FLOATNUM .)
    -               reduce using rule 16 (expr -> FLOATNUM .)
    *               reduce using rule 16 (expr -> FLOATNUM .)
    /               reduce using rule 16 (expr -> FLOATNUM .)
    MPLUS           reduce using rule 16 (expr -> FLOATNUM .)
    MMINUS          reduce using rule 16 (expr -> FLOATNUM .)
    MMLTP           reduce using rule 16 (expr -> FLOATNUM .)
    MDIV            reduce using rule 16 (expr -> FLOATNUM .)
    EQ              reduce using rule 16 (expr -> FLOATNUM .)
    NEQ             reduce using rule 16 (expr -> FLOATNUM .)
    GTEQ            reduce using rule 16 (expr -> FLOATNUM .)
    LTEQ            reduce using rule 16 (expr -> FLOATNUM .)
    >               reduce using rule 16 (expr -> FLOATNUM .)
    <               reduce using rule 16 (expr -> FLOATNUM .)
    )               reduce using rule 16 (expr -> FLOATNUM .)
    ]               reduce using rule 16 (expr -> FLOATNUM .)
    ,               reduce using rule 16 (expr -> FLOATNUM .)
    :               reduce using rule 16 (expr -> FLOATNUM .)
    {               reduce using rule 16 (expr -> FLOATNUM .)
    INTNUM          reduce using rule 16 (expr -> FLOATNUM .)
    FLOATNUM        reduce using rule 16 (expr -> FLOATNUM .)
    STRING          reduce using rule 16 (expr -> FLOATNUM .)
    ID              reduce using rule 16 (expr -> FLOATNUM .)
    (               reduce using rule 16 (expr -> FLOATNUM .)
    [               reduce using rule 16 (expr -> FLOATNUM .)
    BREAK           reduce using rule 16 (expr -> FLOATNUM .)
    CONTINUE        reduce using rule 16 (expr -> FLOATNUM .)
    RETURN          reduce using rule 16 (expr -> FLOATNUM .)
    PRINT           reduce using rule 16 (expr -> FLOATNUM .)
    IF              reduce using rule 16 (expr -> FLOATNUM .)
    WHILE           reduce using rule 16 (expr -> FLOATNUM .)
    FOR             reduce using rule 16 (expr -> FLOATNUM .)


state 9

    (17) expr -> STRING .

    ;               reduce using rule 17 (expr -> STRING .)
    '               reduce using rule 17 (expr -> STRING .)
    +               reduce using rule 17 (expr -> STRING .)
    -               reduce using rule 17 (expr -> STRING .)
    *               reduce using rule 17 (expr -> STRING .)
    /               reduce using rule 17 (expr -> STRING .)
    MPLUS           reduce using rule 17 (expr -> STRING .)
    MMINUS          reduce using rule 17 (expr -> STRING .)
    MMLTP           reduce using rule 17 (expr -> STRING .)
    MDIV            reduce using rule 17 (expr -> STRING .)
    EQ              reduce using rule 17 (expr -> STRING .)
    NEQ             reduce using rule 17 (expr -> STRING .)
    GTEQ            reduce using rule 17 (expr -> STRING .)
    LTEQ            reduce using rule 17 (expr -> STRING .)
    >               reduce using rule 17 (expr -> STRING .)
    <               reduce using rule 17 (expr -> STRING .)
    )               reduce using rule 17 (expr -> STRING .)
    ]               reduce using rule 17 (expr -> STRING .)
    ,               reduce using rule 17 (expr -> STRING .)
    :               reduce using rule 17 (expr -> STRING .)
    {               reduce using rule 17 (expr -> STRING .)
    INTNUM          reduce using rule 17 (expr -> STRING .)
    FLOATNUM        reduce using rule 17 (expr -> STRING .)
    STRING          reduce using rule 17 (expr -> STRING .)
    ID              reduce using rule 17 (expr -> STRING .)
    (               reduce using rule 17 (expr -> STRING .)
    [               reduce using rule 17 (expr -> STRING .)
    BREAK           reduce using rule 17 (expr -> STRING .)
    CONTINUE        reduce using rule 17 (expr -> STRING .)
    RETURN          reduce using rule 17 (expr -> STRING .)
    PRINT           reduce using rule 17 (expr -> STRING .)
    IF              reduce using rule 17 (expr -> STRING .)
    WHILE           reduce using rule 17 (expr -> STRING .)
    FOR             reduce using rule 17 (expr -> STRING .)


state 10

    (18) expr -> ID .
    (25) expr -> ID . = expr
    (26) expr -> ID . PLUSASSIGN expr
    (27) expr -> ID . MINASSIGN expr
    (28) expr -> ID . MULTASSIGN expr
    (29) expr -> ID . DIVASSIGN expr
    (30) expr -> ID . [ expr ] = expr
    (31) expr -> ID . [ expr ] PLUSASSIGN expr
    (32) expr -> ID . [ expr ] MINASSIGN expr
    (33) expr -> ID . [ expr ] MULTASSIGN expr
    (34) expr -> ID . [ expr ] DIVASSIGN expr
    (35) expr -> ID . [ expr , expr ] = expr
    (36) expr -> ID . [ expr , expr ] PLUSASSIGN expr
    (37) expr -> ID . [ expr , expr ] MINASSIGN expr
    (38) expr -> ID . [ expr , expr ] MULTASSIGN expr
    (39) expr -> ID . [ expr , expr ] DIVASSIGN expr
    (40) expr -> ID . = ZEROS ( expr )
    (41) expr -> ID . = ONES ( expr )
    (42) expr -> ID . = EYE ( expr )

  ! shift/reduce conflict for [ resolved as shift
    ;               reduce using rule 18 (expr -> ID .)
    '               reduce using rule 18 (expr -> ID .)
    +               reduce using rule 18 (expr -> ID .)
    -               reduce using rule 18 (expr -> ID .)
    *               reduce using rule 18 (expr -> ID .)
    /               reduce using rule 18 (expr -> ID .)
    MPLUS           reduce using rule 18 (expr -> ID .)
    MMINUS          reduce using rule 18 (expr -> ID .)
    MMLTP           reduce using rule 18 (expr -> ID .)
    MDIV            reduce using rule 18 (expr -> ID .)
    EQ              reduce using rule 18 (expr -> ID .)
    NEQ             reduce using rule 18 (expr -> ID .)
    GTEQ            reduce using rule 18 (expr -> ID .)
    LTEQ            reduce using rule 18 (expr -> ID .)
    >               reduce using rule 18 (expr -> ID .)
    <               reduce using rule 18 (expr -> ID .)
    )               reduce using rule 18 (expr -> ID .)
    ]               reduce using rule 18 (expr -> ID .)
    ,               reduce using rule 18 (expr -> ID .)
    :               reduce using rule 18 (expr -> ID .)
    {               reduce using rule 18 (expr -> ID .)
    INTNUM          reduce using rule 18 (expr -> ID .)
    FLOATNUM        reduce using rule 18 (expr -> ID .)
    STRING          reduce using rule 18 (expr -> ID .)
    ID              reduce using rule 18 (expr -> ID .)
    (               reduce using rule 18 (expr -> ID .)
    BREAK           reduce using rule 18 (expr -> ID .)
    CONTINUE        reduce using rule 18 (expr -> ID .)
    RETURN          reduce using rule 18 (expr -> ID .)
    PRINT           reduce using rule 18 (expr -> ID .)
    IF              reduce using rule 18 (expr -> ID .)
    WHILE           reduce using rule 18 (expr -> ID .)
    FOR             reduce using rule 18 (expr -> ID .)
    =               shift and go to state 41
    PLUSASSIGN      shift and go to state 42
    MINASSIGN       shift and go to state 43
    MULTASSIGN      shift and go to state 44
    DIVASSIGN       shift and go to state 45
    [               shift and go to state 46

  ! [               [ reduce using rule 18 (expr -> ID .) ]


state 11

    (19) expr -> ( . expr )
    (15) expr -> . INTNUM
    (16) expr -> . FLOATNUM
    (17) expr -> . STRING
    (18) expr -> . ID
    (19) expr -> . ( expr )
    (20) expr -> . - expr
    (21) expr -> . expr '
    (24) expr -> . [ array_interior ]
    (25) expr -> . ID = expr
    (26) expr -> . ID PLUSASSIGN expr
    (27) expr -> . ID MINASSIGN expr
    (28) expr -> . ID MULTASSIGN expr
    (29) expr -> . ID DIVASSIGN expr
    (30) expr -> . ID [ expr ] = expr
    (31) expr -> . ID [ expr ] PLUSASSIGN expr
    (32) expr -> . ID [ expr ] MINASSIGN expr
    (33) expr -> . ID [ expr ] MULTASSIGN expr
    (34) expr -> . ID [ expr ] DIVASSIGN expr
    (35) expr -> . ID [ expr , expr ] = expr
    (36) expr -> . ID [ expr , expr ] PLUSASSIGN expr
    (37) expr -> . ID [ expr , expr ] MINASSIGN expr
    (38) expr -> . ID [ expr , expr ] MULTASSIGN expr
    (39) expr -> . ID [ expr , expr ] DIVASSIGN expr
    (40) expr -> . ID = ZEROS ( expr )
    (41) expr -> . ID = ONES ( expr )
    (42) expr -> . ID = EYE ( expr )
    (43) expr -> . expr + expr
    (44) expr -> . expr - expr
    (45) expr -> . expr * expr
    (46) expr -> . expr / expr
    (47) expr -> . expr MPLUS expr
    (48) expr -> . expr MMINUS expr
    (49) expr -> . expr MMLTP expr
    (50) expr -> . expr MDIV expr
    (51) expr -> . expr EQ expr
    (52) expr -> . expr NEQ expr
    (53) expr -> . expr GTEQ expr
    (54) expr -> . expr LTEQ expr
    (55) expr -> . expr > expr
    (56) expr -> . expr < expr

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ID              shift and go to state 10
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13

    expr                           shift and go to state 47

state 12

    (20) expr -> - . expr
    (15) expr -> . INTNUM
    (16) expr -> . FLOATNUM
    (17) expr -> . STRING
    (18) expr -> . ID
    (19) expr -> . ( expr )
    (20) expr -> . - expr
    (21) expr -> . expr '
    (24) expr -> . [ array_interior ]
    (25) expr -> . ID = expr
    (26) expr -> . ID PLUSASSIGN expr
    (27) expr -> . ID MINASSIGN expr
    (28) expr -> . ID MULTASSIGN expr
    (29) expr -> . ID DIVASSIGN expr
    (30) expr -> . ID [ expr ] = expr
    (31) expr -> . ID [ expr ] PLUSASSIGN expr
    (32) expr -> . ID [ expr ] MINASSIGN expr
    (33) expr -> . ID [ expr ] MULTASSIGN expr
    (34) expr -> . ID [ expr ] DIVASSIGN expr
    (35) expr -> . ID [ expr , expr ] = expr
    (36) expr -> . ID [ expr , expr ] PLUSASSIGN expr
    (37) expr -> . ID [ expr , expr ] MINASSIGN expr
    (38) expr -> . ID [ expr , expr ] MULTASSIGN expr
    (39) expr -> . ID [ expr , expr ] DIVASSIGN expr
    (40) expr -> . ID = ZEROS ( expr )
    (41) expr -> . ID = ONES ( expr )
    (42) expr -> . ID = EYE ( expr )
    (43) expr -> . expr + expr
    (44) expr -> . expr - expr
    (45) expr -> . expr * expr
    (46) expr -> . expr / expr
    (47) expr -> . expr MPLUS expr
    (48) expr -> . expr MMINUS expr
    (49) expr -> . expr MMLTP expr
    (50) expr -> . expr MDIV expr
    (51) expr -> . expr EQ expr
    (52) expr -> . expr NEQ expr
    (53) expr -> . expr GTEQ expr
    (54) expr -> . expr LTEQ expr
    (55) expr -> . expr > expr
    (56) expr -> . expr < expr

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ID              shift and go to state 10
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13

    expr                           shift and go to state 48

state 13

    (24) expr -> [ . array_interior ]
    (22) array_interior -> . array_interior , expr
    (23) array_interior -> . expr
    (15) expr -> . INTNUM
    (16) expr -> . FLOATNUM
    (17) expr -> . STRING
    (18) expr -> . ID
    (19) expr -> . ( expr )
    (20) expr -> . - expr
    (21) expr -> . expr '
    (24) expr -> . [ array_interior ]
    (25) expr -> . ID = expr
    (26) expr -> . ID PLUSASSIGN expr
    (27) expr -> . ID MINASSIGN expr
    (28) expr -> . ID MULTASSIGN expr
    (29) expr -> . ID DIVASSIGN expr
    (30) expr -> . ID [ expr ] = expr
    (31) expr -> . ID [ expr ] PLUSASSIGN expr
    (32) expr -> . ID [ expr ] MINASSIGN expr
    (33) expr -> . ID [ expr ] MULTASSIGN expr
    (34) expr -> . ID [ expr ] DIVASSIGN expr
    (35) expr -> . ID [ expr , expr ] = expr
    (36) expr -> . ID [ expr , expr ] PLUSASSIGN expr
    (37) expr -> . ID [ expr , expr ] MINASSIGN expr
    (38) expr -> . ID [ expr , expr ] MULTASSIGN expr
    (39) expr -> . ID [ expr , expr ] DIVASSIGN expr
    (40) expr -> . ID = ZEROS ( expr )
    (41) expr -> . ID = ONES ( expr )
    (42) expr -> . ID = EYE ( expr )
    (43) expr -> . expr + expr
    (44) expr -> . expr - expr
    (45) expr -> . expr * expr
    (46) expr -> . expr / expr
    (47) expr -> . expr MPLUS expr
    (48) expr -> . expr MMINUS expr
    (49) expr -> . expr MMLTP expr
    (50) expr -> . expr MDIV expr
    (51) expr -> . expr EQ expr
    (52) expr -> . expr NEQ expr
    (53) expr -> . expr GTEQ expr
    (54) expr -> . expr LTEQ expr
    (55) expr -> . expr > expr
    (56) expr -> . expr < expr

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ID              shift and go to state 10
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13

    array_interior                 shift and go to state 49
    expr                           shift and go to state 50

state 14

    (57) cond_expr -> cond_if .
    (63) cond_if -> cond_if . ELSE cond_block

  ! shift/reduce conflict for ELSE resolved as shift
    {               reduce using rule 57 (cond_expr -> cond_if .)
    INTNUM          reduce using rule 57 (cond_expr -> cond_if .)
    FLOATNUM        reduce using rule 57 (cond_expr -> cond_if .)
    STRING          reduce using rule 57 (cond_expr -> cond_if .)
    ID              reduce using rule 57 (cond_expr -> cond_if .)
    (               reduce using rule 57 (cond_expr -> cond_if .)
    -               reduce using rule 57 (cond_expr -> cond_if .)
    [               reduce using rule 57 (cond_expr -> cond_if .)
    RETURN          reduce using rule 57 (cond_expr -> cond_if .)
    PRINT           reduce using rule 57 (cond_expr -> cond_if .)
    IF              reduce using rule 57 (cond_expr -> cond_if .)
    WHILE           reduce using rule 57 (cond_expr -> cond_if .)
    FOR             reduce using rule 57 (cond_expr -> cond_if .)
    $end            reduce using rule 57 (cond_expr -> cond_if .)
    }               reduce using rule 57 (cond_expr -> cond_if .)
    ELSE            shift and go to state 51

  ! ELSE            [ reduce using rule 57 (cond_expr -> cond_if .) ]


state 15

    (58) cond_expr -> cond_while .

    {               reduce using rule 58 (cond_expr -> cond_while .)
    INTNUM          reduce using rule 58 (cond_expr -> cond_while .)
    FLOATNUM        reduce using rule 58 (cond_expr -> cond_while .)
    STRING          reduce using rule 58 (cond_expr -> cond_while .)
    ID              reduce using rule 58 (cond_expr -> cond_while .)
    (               reduce using rule 58 (cond_expr -> cond_while .)
    -               reduce using rule 58 (cond_expr -> cond_while .)
    [               reduce using rule 58 (cond_expr -> cond_while .)
    RETURN          reduce using rule 58 (cond_expr -> cond_while .)
    PRINT           reduce using rule 58 (cond_expr -> cond_while .)
    IF              reduce using rule 58 (cond_expr -> cond_while .)
    WHILE           reduce using rule 58 (cond_expr -> cond_while .)
    FOR             reduce using rule 58 (cond_expr -> cond_while .)
    $end            reduce using rule 58 (cond_expr -> cond_while .)
    }               reduce using rule 58 (cond_expr -> cond_while .)
    ELSE            reduce using rule 58 (cond_expr -> cond_while .)


state 16

    (59) cond_expr -> cond_for .

    {               reduce using rule 59 (cond_expr -> cond_for .)
    INTNUM          reduce using rule 59 (cond_expr -> cond_for .)
    FLOATNUM        reduce using rule 59 (cond_expr -> cond_for .)
    STRING          reduce using rule 59 (cond_expr -> cond_for .)
    ID              reduce using rule 59 (cond_expr -> cond_for .)
    (               reduce using rule 59 (cond_expr -> cond_for .)
    -               reduce using rule 59 (cond_expr -> cond_for .)
    [               reduce using rule 59 (cond_expr -> cond_for .)
    RETURN          reduce using rule 59 (cond_expr -> cond_for .)
    PRINT           reduce using rule 59 (cond_expr -> cond_for .)
    IF              reduce using rule 59 (cond_expr -> cond_for .)
    WHILE           reduce using rule 59 (cond_expr -> cond_for .)
    FOR             reduce using rule 59 (cond_expr -> cond_for .)
    $end            reduce using rule 59 (cond_expr -> cond_for .)
    }               reduce using rule 59 (cond_expr -> cond_for .)
    ELSE            reduce using rule 59 (cond_expr -> cond_for .)


state 17

    (73) instruction -> RETURN . expr ;
    (15) expr -> . INTNUM
    (16) expr -> . FLOATNUM
    (17) expr -> . STRING
    (18) expr -> . ID
    (19) expr -> . ( expr )
    (20) expr -> . - expr
    (21) expr -> . expr '
    (24) expr -> . [ array_interior ]
    (25) expr -> . ID = expr
    (26) expr -> . ID PLUSASSIGN expr
    (27) expr -> . ID MINASSIGN expr
    (28) expr -> . ID MULTASSIGN expr
    (29) expr -> . ID DIVASSIGN expr
    (30) expr -> . ID [ expr ] = expr
    (31) expr -> . ID [ expr ] PLUSASSIGN expr
    (32) expr -> . ID [ expr ] MINASSIGN expr
    (33) expr -> . ID [ expr ] MULTASSIGN expr
    (34) expr -> . ID [ expr ] DIVASSIGN expr
    (35) expr -> . ID [ expr , expr ] = expr
    (36) expr -> . ID [ expr , expr ] PLUSASSIGN expr
    (37) expr -> . ID [ expr , expr ] MINASSIGN expr
    (38) expr -> . ID [ expr , expr ] MULTASSIGN expr
    (39) expr -> . ID [ expr , expr ] DIVASSIGN expr
    (40) expr -> . ID = ZEROS ( expr )
    (41) expr -> . ID = ONES ( expr )
    (42) expr -> . ID = EYE ( expr )
    (43) expr -> . expr + expr
    (44) expr -> . expr - expr
    (45) expr -> . expr * expr
    (46) expr -> . expr / expr
    (47) expr -> . expr MPLUS expr
    (48) expr -> . expr MMINUS expr
    (49) expr -> . expr MMLTP expr
    (50) expr -> . expr MDIV expr
    (51) expr -> . expr EQ expr
    (52) expr -> . expr NEQ expr
    (53) expr -> . expr GTEQ expr
    (54) expr -> . expr LTEQ expr
    (55) expr -> . expr > expr
    (56) expr -> . expr < expr

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ID              shift and go to state 10
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13

    expr                           shift and go to state 52

state 18

    (74) instruction -> PRINT . array_interior ;
    (22) array_interior -> . array_interior , expr
    (23) array_interior -> . expr
    (15) expr -> . INTNUM
    (16) expr -> . FLOATNUM
    (17) expr -> . STRING
    (18) expr -> . ID
    (19) expr -> . ( expr )
    (20) expr -> . - expr
    (21) expr -> . expr '
    (24) expr -> . [ array_interior ]
    (25) expr -> . ID = expr
    (26) expr -> . ID PLUSASSIGN expr
    (27) expr -> . ID MINASSIGN expr
    (28) expr -> . ID MULTASSIGN expr
    (29) expr -> . ID DIVASSIGN expr
    (30) expr -> . ID [ expr ] = expr
    (31) expr -> . ID [ expr ] PLUSASSIGN expr
    (32) expr -> . ID [ expr ] MINASSIGN expr
    (33) expr -> . ID [ expr ] MULTASSIGN expr
    (34) expr -> . ID [ expr ] DIVASSIGN expr
    (35) expr -> . ID [ expr , expr ] = expr
    (36) expr -> . ID [ expr , expr ] PLUSASSIGN expr
    (37) expr -> . ID [ expr , expr ] MINASSIGN expr
    (38) expr -> . ID [ expr , expr ] MULTASSIGN expr
    (39) expr -> . ID [ expr , expr ] DIVASSIGN expr
    (40) expr -> . ID = ZEROS ( expr )
    (41) expr -> . ID = ONES ( expr )
    (42) expr -> . ID = EYE ( expr )
    (43) expr -> . expr + expr
    (44) expr -> . expr - expr
    (45) expr -> . expr * expr
    (46) expr -> . expr / expr
    (47) expr -> . expr MPLUS expr
    (48) expr -> . expr MMINUS expr
    (49) expr -> . expr MMLTP expr
    (50) expr -> . expr MDIV expr
    (51) expr -> . expr EQ expr
    (52) expr -> . expr NEQ expr
    (53) expr -> . expr GTEQ expr
    (54) expr -> . expr LTEQ expr
    (55) expr -> . expr > expr
    (56) expr -> . expr < expr

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ID              shift and go to state 10
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13

    array_interior                 shift and go to state 53
    expr                           shift and go to state 50

state 19

    (62) cond_if -> IF . ( expr ) cond_block

    (               shift and go to state 54


state 20

    (71) cond_while -> WHILE . ( expr ) loop_cond_block

    (               shift and go to state 55


state 21

    (72) cond_for -> FOR . ID = expr : expr loop_cond_block

    ID              shift and go to state 56


state 22

    (2) start -> start struct .

    {               reduce using rule 2 (start -> start struct .)
    INTNUM          reduce using rule 2 (start -> start struct .)
    FLOATNUM        reduce using rule 2 (start -> start struct .)
    STRING          reduce using rule 2 (start -> start struct .)
    ID              reduce using rule 2 (start -> start struct .)
    (               reduce using rule 2 (start -> start struct .)
    -               reduce using rule 2 (start -> start struct .)
    [               reduce using rule 2 (start -> start struct .)
    RETURN          reduce using rule 2 (start -> start struct .)
    PRINT           reduce using rule 2 (start -> start struct .)
    IF              reduce using rule 2 (start -> start struct .)
    WHILE           reduce using rule 2 (start -> start struct .)
    FOR             reduce using rule 2 (start -> start struct .)
    $end            reduce using rule 2 (start -> start struct .)
    }               reduce using rule 2 (start -> start struct .)


state 23

    (4) start -> start { . start }
    (1) start -> . struct
    (2) start -> . start struct
    (3) start -> . { start }
    (4) start -> . start { start }
    (5) struct -> . expr ;
    (6) struct -> . cond_expr
    (7) struct -> . instruction
    (15) expr -> . INTNUM
    (16) expr -> . FLOATNUM
    (17) expr -> . STRING
    (18) expr -> . ID
    (19) expr -> . ( expr )
    (20) expr -> . - expr
    (21) expr -> . expr '
    (24) expr -> . [ array_interior ]
    (25) expr -> . ID = expr
    (26) expr -> . ID PLUSASSIGN expr
    (27) expr -> . ID MINASSIGN expr
    (28) expr -> . ID MULTASSIGN expr
    (29) expr -> . ID DIVASSIGN expr
    (30) expr -> . ID [ expr ] = expr
    (31) expr -> . ID [ expr ] PLUSASSIGN expr
    (32) expr -> . ID [ expr ] MINASSIGN expr
    (33) expr -> . ID [ expr ] MULTASSIGN expr
    (34) expr -> . ID [ expr ] DIVASSIGN expr
    (35) expr -> . ID [ expr , expr ] = expr
    (36) expr -> . ID [ expr , expr ] PLUSASSIGN expr
    (37) expr -> . ID [ expr , expr ] MINASSIGN expr
    (38) expr -> . ID [ expr , expr ] MULTASSIGN expr
    (39) expr -> . ID [ expr , expr ] DIVASSIGN expr
    (40) expr -> . ID = ZEROS ( expr )
    (41) expr -> . ID = ONES ( expr )
    (42) expr -> . ID = EYE ( expr )
    (43) expr -> . expr + expr
    (44) expr -> . expr - expr
    (45) expr -> . expr * expr
    (46) expr -> . expr / expr
    (47) expr -> . expr MPLUS expr
    (48) expr -> . expr MMINUS expr
    (49) expr -> . expr MMLTP expr
    (50) expr -> . expr MDIV expr
    (51) expr -> . expr EQ expr
    (52) expr -> . expr NEQ expr
    (53) expr -> . expr GTEQ expr
    (54) expr -> . expr LTEQ expr
    (55) expr -> . expr > expr
    (56) expr -> . expr < expr
    (57) cond_expr -> . cond_if
    (58) cond_expr -> . cond_while
    (59) cond_expr -> . cond_for
    (73) instruction -> . RETURN expr ;
    (74) instruction -> . PRINT array_interior ;
    (62) cond_if -> . IF ( expr ) cond_block
    (63) cond_if -> . cond_if ELSE cond_block
    (71) cond_while -> . WHILE ( expr ) loop_cond_block
    (72) cond_for -> . FOR ID = expr : expr loop_cond_block

    {               shift and go to state 3
    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ID              shift and go to state 10
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13
    RETURN          shift and go to state 17
    PRINT           shift and go to state 18
    IF              shift and go to state 19
    WHILE           shift and go to state 20
    FOR             shift and go to state 21

    start                          shift and go to state 57
    struct                         shift and go to state 2
    expr                           shift and go to state 4
    cond_expr                      shift and go to state 5
    instruction                    shift and go to state 6
    cond_if                        shift and go to state 14
    cond_while                     shift and go to state 15
    cond_for                       shift and go to state 16

state 24

    (3) start -> { start . }
    (2) start -> start . struct
    (4) start -> start . { start }
    (5) struct -> . expr ;
    (6) struct -> . cond_expr
    (7) struct -> . instruction
    (15) expr -> . INTNUM
    (16) expr -> . FLOATNUM
    (17) expr -> . STRING
    (18) expr -> . ID
    (19) expr -> . ( expr )
    (20) expr -> . - expr
    (21) expr -> . expr '
    (24) expr -> . [ array_interior ]
    (25) expr -> . ID = expr
    (26) expr -> . ID PLUSASSIGN expr
    (27) expr -> . ID MINASSIGN expr
    (28) expr -> . ID MULTASSIGN expr
    (29) expr -> . ID DIVASSIGN expr
    (30) expr -> . ID [ expr ] = expr
    (31) expr -> . ID [ expr ] PLUSASSIGN expr
    (32) expr -> . ID [ expr ] MINASSIGN expr
    (33) expr -> . ID [ expr ] MULTASSIGN expr
    (34) expr -> . ID [ expr ] DIVASSIGN expr
    (35) expr -> . ID [ expr , expr ] = expr
    (36) expr -> . ID [ expr , expr ] PLUSASSIGN expr
    (37) expr -> . ID [ expr , expr ] MINASSIGN expr
    (38) expr -> . ID [ expr , expr ] MULTASSIGN expr
    (39) expr -> . ID [ expr , expr ] DIVASSIGN expr
    (40) expr -> . ID = ZEROS ( expr )
    (41) expr -> . ID = ONES ( expr )
    (42) expr -> . ID = EYE ( expr )
    (43) expr -> . expr + expr
    (44) expr -> . expr - expr
    (45) expr -> . expr * expr
    (46) expr -> . expr / expr
    (47) expr -> . expr MPLUS expr
    (48) expr -> . expr MMINUS expr
    (49) expr -> . expr MMLTP expr
    (50) expr -> . expr MDIV expr
    (51) expr -> . expr EQ expr
    (52) expr -> . expr NEQ expr
    (53) expr -> . expr GTEQ expr
    (54) expr -> . expr LTEQ expr
    (55) expr -> . expr > expr
    (56) expr -> . expr < expr
    (57) cond_expr -> . cond_if
    (58) cond_expr -> . cond_while
    (59) cond_expr -> . cond_for
    (73) instruction -> . RETURN expr ;
    (74) instruction -> . PRINT array_interior ;
    (62) cond_if -> . IF ( expr ) cond_block
    (63) cond_if -> . cond_if ELSE cond_block
    (71) cond_while -> . WHILE ( expr ) loop_cond_block
    (72) cond_for -> . FOR ID = expr : expr loop_cond_block

    }               shift and go to state 58
    {               shift and go to state 23
    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ID              shift and go to state 10
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13
    RETURN          shift and go to state 17
    PRINT           shift and go to state 18
    IF              shift and go to state 19
    WHILE           shift and go to state 20
    FOR             shift and go to state 21

    struct                         shift and go to state 22
    expr                           shift and go to state 4
    cond_expr                      shift and go to state 5
    instruction                    shift and go to state 6
    cond_if                        shift and go to state 14
    cond_while                     shift and go to state 15
    cond_for                       shift and go to state 16

state 25

    (5) struct -> expr ; .

    {               reduce using rule 5 (struct -> expr ; .)
    INTNUM          reduce using rule 5 (struct -> expr ; .)
    FLOATNUM        reduce using rule 5 (struct -> expr ; .)
    STRING          reduce using rule 5 (struct -> expr ; .)
    ID              reduce using rule 5 (struct -> expr ; .)
    (               reduce using rule 5 (struct -> expr ; .)
    -               reduce using rule 5 (struct -> expr ; .)
    [               reduce using rule 5 (struct -> expr ; .)
    RETURN          reduce using rule 5 (struct -> expr ; .)
    PRINT           reduce using rule 5 (struct -> expr ; .)
    IF              reduce using rule 5 (struct -> expr ; .)
    WHILE           reduce using rule 5 (struct -> expr ; .)
    FOR             reduce using rule 5 (struct -> expr ; .)
    $end            reduce using rule 5 (struct -> expr ; .)
    }               reduce using rule 5 (struct -> expr ; .)
    ELSE            reduce using rule 5 (struct -> expr ; .)


state 26

    (21) expr -> expr ' .

    ;               reduce using rule 21 (expr -> expr ' .)
    '               reduce using rule 21 (expr -> expr ' .)
    +               reduce using rule 21 (expr -> expr ' .)
    -               reduce using rule 21 (expr -> expr ' .)
    *               reduce using rule 21 (expr -> expr ' .)
    /               reduce using rule 21 (expr -> expr ' .)
    MPLUS           reduce using rule 21 (expr -> expr ' .)
    MMINUS          reduce using rule 21 (expr -> expr ' .)
    MMLTP           reduce using rule 21 (expr -> expr ' .)
    MDIV            reduce using rule 21 (expr -> expr ' .)
    EQ              reduce using rule 21 (expr -> expr ' .)
    NEQ             reduce using rule 21 (expr -> expr ' .)
    GTEQ            reduce using rule 21 (expr -> expr ' .)
    LTEQ            reduce using rule 21 (expr -> expr ' .)
    >               reduce using rule 21 (expr -> expr ' .)
    <               reduce using rule 21 (expr -> expr ' .)
    )               reduce using rule 21 (expr -> expr ' .)
    ]               reduce using rule 21 (expr -> expr ' .)
    ,               reduce using rule 21 (expr -> expr ' .)
    :               reduce using rule 21 (expr -> expr ' .)
    {               reduce using rule 21 (expr -> expr ' .)
    INTNUM          reduce using rule 21 (expr -> expr ' .)
    FLOATNUM        reduce using rule 21 (expr -> expr ' .)
    STRING          reduce using rule 21 (expr -> expr ' .)
    ID              reduce using rule 21 (expr -> expr ' .)
    (               reduce using rule 21 (expr -> expr ' .)
    [               reduce using rule 21 (expr -> expr ' .)
    BREAK           reduce using rule 21 (expr -> expr ' .)
    CONTINUE        reduce using rule 21 (expr -> expr ' .)
    RETURN          reduce using rule 21 (expr -> expr ' .)
    PRINT           reduce using rule 21 (expr -> expr ' .)
    IF              reduce using rule 21 (expr -> expr ' .)
    WHILE           reduce using rule 21 (expr -> expr ' .)
    FOR             reduce using rule 21 (expr -> expr ' .)


state 27

    (43) expr -> expr + . expr
    (15) expr -> . INTNUM
    (16) expr -> . FLOATNUM
    (17) expr -> . STRING
    (18) expr -> . ID
    (19) expr -> . ( expr )
    (20) expr -> . - expr
    (21) expr -> . expr '
    (24) expr -> . [ array_interior ]
    (25) expr -> . ID = expr
    (26) expr -> . ID PLUSASSIGN expr
    (27) expr -> . ID MINASSIGN expr
    (28) expr -> . ID MULTASSIGN expr
    (29) expr -> . ID DIVASSIGN expr
    (30) expr -> . ID [ expr ] = expr
    (31) expr -> . ID [ expr ] PLUSASSIGN expr
    (32) expr -> . ID [ expr ] MINASSIGN expr
    (33) expr -> . ID [ expr ] MULTASSIGN expr
    (34) expr -> . ID [ expr ] DIVASSIGN expr
    (35) expr -> . ID [ expr , expr ] = expr
    (36) expr -> . ID [ expr , expr ] PLUSASSIGN expr
    (37) expr -> . ID [ expr , expr ] MINASSIGN expr
    (38) expr -> . ID [ expr , expr ] MULTASSIGN expr
    (39) expr -> . ID [ expr , expr ] DIVASSIGN expr
    (40) expr -> . ID = ZEROS ( expr )
    (41) expr -> . ID = ONES ( expr )
    (42) expr -> . ID = EYE ( expr )
    (43) expr -> . expr + expr
    (44) expr -> . expr - expr
    (45) expr -> . expr * expr
    (46) expr -> . expr / expr
    (47) expr -> . expr MPLUS expr
    (48) expr -> . expr MMINUS expr
    (49) expr -> . expr MMLTP expr
    (50) expr -> . expr MDIV expr
    (51) expr -> . expr EQ expr
    (52) expr -> . expr NEQ expr
    (53) expr -> . expr GTEQ expr
    (54) expr -> . expr LTEQ expr
    (55) expr -> . expr > expr
    (56) expr -> . expr < expr

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ID              shift and go to state 10
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13

    expr                           shift and go to state 59

state 28

    (44) expr -> expr - . expr
    (15) expr -> . INTNUM
    (16) expr -> . FLOATNUM
    (17) expr -> . STRING
    (18) expr -> . ID
    (19) expr -> . ( expr )
    (20) expr -> . - expr
    (21) expr -> . expr '
    (24) expr -> . [ array_interior ]
    (25) expr -> . ID = expr
    (26) expr -> . ID PLUSASSIGN expr
    (27) expr -> . ID MINASSIGN expr
    (28) expr -> . ID MULTASSIGN expr
    (29) expr -> . ID DIVASSIGN expr
    (30) expr -> . ID [ expr ] = expr
    (31) expr -> . ID [ expr ] PLUSASSIGN expr
    (32) expr -> . ID [ expr ] MINASSIGN expr
    (33) expr -> . ID [ expr ] MULTASSIGN expr
    (34) expr -> . ID [ expr ] DIVASSIGN expr
    (35) expr -> . ID [ expr , expr ] = expr
    (36) expr -> . ID [ expr , expr ] PLUSASSIGN expr
    (37) expr -> . ID [ expr , expr ] MINASSIGN expr
    (38) expr -> . ID [ expr , expr ] MULTASSIGN expr
    (39) expr -> . ID [ expr , expr ] DIVASSIGN expr
    (40) expr -> . ID = ZEROS ( expr )
    (41) expr -> . ID = ONES ( expr )
    (42) expr -> . ID = EYE ( expr )
    (43) expr -> . expr + expr
    (44) expr -> . expr - expr
    (45) expr -> . expr * expr
    (46) expr -> . expr / expr
    (47) expr -> . expr MPLUS expr
    (48) expr -> . expr MMINUS expr
    (49) expr -> . expr MMLTP expr
    (50) expr -> . expr MDIV expr
    (51) expr -> . expr EQ expr
    (52) expr -> . expr NEQ expr
    (53) expr -> . expr GTEQ expr
    (54) expr -> . expr LTEQ expr
    (55) expr -> . expr > expr
    (56) expr -> . expr < expr

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ID              shift and go to state 10
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13

    expr                           shift and go to state 60

state 29

    (45) expr -> expr * . expr
    (15) expr -> . INTNUM
    (16) expr -> . FLOATNUM
    (17) expr -> . STRING
    (18) expr -> . ID
    (19) expr -> . ( expr )
    (20) expr -> . - expr
    (21) expr -> . expr '
    (24) expr -> . [ array_interior ]
    (25) expr -> . ID = expr
    (26) expr -> . ID PLUSASSIGN expr
    (27) expr -> . ID MINASSIGN expr
    (28) expr -> . ID MULTASSIGN expr
    (29) expr -> . ID DIVASSIGN expr
    (30) expr -> . ID [ expr ] = expr
    (31) expr -> . ID [ expr ] PLUSASSIGN expr
    (32) expr -> . ID [ expr ] MINASSIGN expr
    (33) expr -> . ID [ expr ] MULTASSIGN expr
    (34) expr -> . ID [ expr ] DIVASSIGN expr
    (35) expr -> . ID [ expr , expr ] = expr
    (36) expr -> . ID [ expr , expr ] PLUSASSIGN expr
    (37) expr -> . ID [ expr , expr ] MINASSIGN expr
    (38) expr -> . ID [ expr , expr ] MULTASSIGN expr
    (39) expr -> . ID [ expr , expr ] DIVASSIGN expr
    (40) expr -> . ID = ZEROS ( expr )
    (41) expr -> . ID = ONES ( expr )
    (42) expr -> . ID = EYE ( expr )
    (43) expr -> . expr + expr
    (44) expr -> . expr - expr
    (45) expr -> . expr * expr
    (46) expr -> . expr / expr
    (47) expr -> . expr MPLUS expr
    (48) expr -> . expr MMINUS expr
    (49) expr -> . expr MMLTP expr
    (50) expr -> . expr MDIV expr
    (51) expr -> . expr EQ expr
    (52) expr -> . expr NEQ expr
    (53) expr -> . expr GTEQ expr
    (54) expr -> . expr LTEQ expr
    (55) expr -> . expr > expr
    (56) expr -> . expr < expr

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ID              shift and go to state 10
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13

    expr                           shift and go to state 61

state 30

    (46) expr -> expr / . expr
    (15) expr -> . INTNUM
    (16) expr -> . FLOATNUM
    (17) expr -> . STRING
    (18) expr -> . ID
    (19) expr -> . ( expr )
    (20) expr -> . - expr
    (21) expr -> . expr '
    (24) expr -> . [ array_interior ]
    (25) expr -> . ID = expr
    (26) expr -> . ID PLUSASSIGN expr
    (27) expr -> . ID MINASSIGN expr
    (28) expr -> . ID MULTASSIGN expr
    (29) expr -> . ID DIVASSIGN expr
    (30) expr -> . ID [ expr ] = expr
    (31) expr -> . ID [ expr ] PLUSASSIGN expr
    (32) expr -> . ID [ expr ] MINASSIGN expr
    (33) expr -> . ID [ expr ] MULTASSIGN expr
    (34) expr -> . ID [ expr ] DIVASSIGN expr
    (35) expr -> . ID [ expr , expr ] = expr
    (36) expr -> . ID [ expr , expr ] PLUSASSIGN expr
    (37) expr -> . ID [ expr , expr ] MINASSIGN expr
    (38) expr -> . ID [ expr , expr ] MULTASSIGN expr
    (39) expr -> . ID [ expr , expr ] DIVASSIGN expr
    (40) expr -> . ID = ZEROS ( expr )
    (41) expr -> . ID = ONES ( expr )
    (42) expr -> . ID = EYE ( expr )
    (43) expr -> . expr + expr
    (44) expr -> . expr - expr
    (45) expr -> . expr * expr
    (46) expr -> . expr / expr
    (47) expr -> . expr MPLUS expr
    (48) expr -> . expr MMINUS expr
    (49) expr -> . expr MMLTP expr
    (50) expr -> . expr MDIV expr
    (51) expr -> . expr EQ expr
    (52) expr -> . expr NEQ expr
    (53) expr -> . expr GTEQ expr
    (54) expr -> . expr LTEQ expr
    (55) expr -> . expr > expr
    (56) expr -> . expr < expr

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ID              shift and go to state 10
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13

    expr                           shift and go to state 62

state 31

    (47) expr -> expr MPLUS . expr
    (15) expr -> . INTNUM
    (16) expr -> . FLOATNUM
    (17) expr -> . STRING
    (18) expr -> . ID
    (19) expr -> . ( expr )
    (20) expr -> . - expr
    (21) expr -> . expr '
    (24) expr -> . [ array_interior ]
    (25) expr -> . ID = expr
    (26) expr -> . ID PLUSASSIGN expr
    (27) expr -> . ID MINASSIGN expr
    (28) expr -> . ID MULTASSIGN expr
    (29) expr -> . ID DIVASSIGN expr
    (30) expr -> . ID [ expr ] = expr
    (31) expr -> . ID [ expr ] PLUSASSIGN expr
    (32) expr -> . ID [ expr ] MINASSIGN expr
    (33) expr -> . ID [ expr ] MULTASSIGN expr
    (34) expr -> . ID [ expr ] DIVASSIGN expr
    (35) expr -> . ID [ expr , expr ] = expr
    (36) expr -> . ID [ expr , expr ] PLUSASSIGN expr
    (37) expr -> . ID [ expr , expr ] MINASSIGN expr
    (38) expr -> . ID [ expr , expr ] MULTASSIGN expr
    (39) expr -> . ID [ expr , expr ] DIVASSIGN expr
    (40) expr -> . ID = ZEROS ( expr )
    (41) expr -> . ID = ONES ( expr )
    (42) expr -> . ID = EYE ( expr )
    (43) expr -> . expr + expr
    (44) expr -> . expr - expr
    (45) expr -> . expr * expr
    (46) expr -> . expr / expr
    (47) expr -> . expr MPLUS expr
    (48) expr -> . expr MMINUS expr
    (49) expr -> . expr MMLTP expr
    (50) expr -> . expr MDIV expr
    (51) expr -> . expr EQ expr
    (52) expr -> . expr NEQ expr
    (53) expr -> . expr GTEQ expr
    (54) expr -> . expr LTEQ expr
    (55) expr -> . expr > expr
    (56) expr -> . expr < expr

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ID              shift and go to state 10
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13

    expr                           shift and go to state 63

state 32

    (48) expr -> expr MMINUS . expr
    (15) expr -> . INTNUM
    (16) expr -> . FLOATNUM
    (17) expr -> . STRING
    (18) expr -> . ID
    (19) expr -> . ( expr )
    (20) expr -> . - expr
    (21) expr -> . expr '
    (24) expr -> . [ array_interior ]
    (25) expr -> . ID = expr
    (26) expr -> . ID PLUSASSIGN expr
    (27) expr -> . ID MINASSIGN expr
    (28) expr -> . ID MULTASSIGN expr
    (29) expr -> . ID DIVASSIGN expr
    (30) expr -> . ID [ expr ] = expr
    (31) expr -> . ID [ expr ] PLUSASSIGN expr
    (32) expr -> . ID [ expr ] MINASSIGN expr
    (33) expr -> . ID [ expr ] MULTASSIGN expr
    (34) expr -> . ID [ expr ] DIVASSIGN expr
    (35) expr -> . ID [ expr , expr ] = expr
    (36) expr -> . ID [ expr , expr ] PLUSASSIGN expr
    (37) expr -> . ID [ expr , expr ] MINASSIGN expr
    (38) expr -> . ID [ expr , expr ] MULTASSIGN expr
    (39) expr -> . ID [ expr , expr ] DIVASSIGN expr
    (40) expr -> . ID = ZEROS ( expr )
    (41) expr -> . ID = ONES ( expr )
    (42) expr -> . ID = EYE ( expr )
    (43) expr -> . expr + expr
    (44) expr -> . expr - expr
    (45) expr -> . expr * expr
    (46) expr -> . expr / expr
    (47) expr -> . expr MPLUS expr
    (48) expr -> . expr MMINUS expr
    (49) expr -> . expr MMLTP expr
    (50) expr -> . expr MDIV expr
    (51) expr -> . expr EQ expr
    (52) expr -> . expr NEQ expr
    (53) expr -> . expr GTEQ expr
    (54) expr -> . expr LTEQ expr
    (55) expr -> . expr > expr
    (56) expr -> . expr < expr

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ID              shift and go to state 10
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13

    expr                           shift and go to state 64

state 33

    (49) expr -> expr MMLTP . expr
    (15) expr -> . INTNUM
    (16) expr -> . FLOATNUM
    (17) expr -> . STRING
    (18) expr -> . ID
    (19) expr -> . ( expr )
    (20) expr -> . - expr
    (21) expr -> . expr '
    (24) expr -> . [ array_interior ]
    (25) expr -> . ID = expr
    (26) expr -> . ID PLUSASSIGN expr
    (27) expr -> . ID MINASSIGN expr
    (28) expr -> . ID MULTASSIGN expr
    (29) expr -> . ID DIVASSIGN expr
    (30) expr -> . ID [ expr ] = expr
    (31) expr -> . ID [ expr ] PLUSASSIGN expr
    (32) expr -> . ID [ expr ] MINASSIGN expr
    (33) expr -> . ID [ expr ] MULTASSIGN expr
    (34) expr -> . ID [ expr ] DIVASSIGN expr
    (35) expr -> . ID [ expr , expr ] = expr
    (36) expr -> . ID [ expr , expr ] PLUSASSIGN expr
    (37) expr -> . ID [ expr , expr ] MINASSIGN expr
    (38) expr -> . ID [ expr , expr ] MULTASSIGN expr
    (39) expr -> . ID [ expr , expr ] DIVASSIGN expr
    (40) expr -> . ID = ZEROS ( expr )
    (41) expr -> . ID = ONES ( expr )
    (42) expr -> . ID = EYE ( expr )
    (43) expr -> . expr + expr
    (44) expr -> . expr - expr
    (45) expr -> . expr * expr
    (46) expr -> . expr / expr
    (47) expr -> . expr MPLUS expr
    (48) expr -> . expr MMINUS expr
    (49) expr -> . expr MMLTP expr
    (50) expr -> . expr MDIV expr
    (51) expr -> . expr EQ expr
    (52) expr -> . expr NEQ expr
    (53) expr -> . expr GTEQ expr
    (54) expr -> . expr LTEQ expr
    (55) expr -> . expr > expr
    (56) expr -> . expr < expr

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ID              shift and go to state 10
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13

    expr                           shift and go to state 65

state 34

    (50) expr -> expr MDIV . expr
    (15) expr -> . INTNUM
    (16) expr -> . FLOATNUM
    (17) expr -> . STRING
    (18) expr -> . ID
    (19) expr -> . ( expr )
    (20) expr -> . - expr
    (21) expr -> . expr '
    (24) expr -> . [ array_interior ]
    (25) expr -> . ID = expr
    (26) expr -> . ID PLUSASSIGN expr
    (27) expr -> . ID MINASSIGN expr
    (28) expr -> . ID MULTASSIGN expr
    (29) expr -> . ID DIVASSIGN expr
    (30) expr -> . ID [ expr ] = expr
    (31) expr -> . ID [ expr ] PLUSASSIGN expr
    (32) expr -> . ID [ expr ] MINASSIGN expr
    (33) expr -> . ID [ expr ] MULTASSIGN expr
    (34) expr -> . ID [ expr ] DIVASSIGN expr
    (35) expr -> . ID [ expr , expr ] = expr
    (36) expr -> . ID [ expr , expr ] PLUSASSIGN expr
    (37) expr -> . ID [ expr , expr ] MINASSIGN expr
    (38) expr -> . ID [ expr , expr ] MULTASSIGN expr
    (39) expr -> . ID [ expr , expr ] DIVASSIGN expr
    (40) expr -> . ID = ZEROS ( expr )
    (41) expr -> . ID = ONES ( expr )
    (42) expr -> . ID = EYE ( expr )
    (43) expr -> . expr + expr
    (44) expr -> . expr - expr
    (45) expr -> . expr * expr
    (46) expr -> . expr / expr
    (47) expr -> . expr MPLUS expr
    (48) expr -> . expr MMINUS expr
    (49) expr -> . expr MMLTP expr
    (50) expr -> . expr MDIV expr
    (51) expr -> . expr EQ expr
    (52) expr -> . expr NEQ expr
    (53) expr -> . expr GTEQ expr
    (54) expr -> . expr LTEQ expr
    (55) expr -> . expr > expr
    (56) expr -> . expr < expr

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ID              shift and go to state 10
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13

    expr                           shift and go to state 66

state 35

    (51) expr -> expr EQ . expr
    (15) expr -> . INTNUM
    (16) expr -> . FLOATNUM
    (17) expr -> . STRING
    (18) expr -> . ID
    (19) expr -> . ( expr )
    (20) expr -> . - expr
    (21) expr -> . expr '
    (24) expr -> . [ array_interior ]
    (25) expr -> . ID = expr
    (26) expr -> . ID PLUSASSIGN expr
    (27) expr -> . ID MINASSIGN expr
    (28) expr -> . ID MULTASSIGN expr
    (29) expr -> . ID DIVASSIGN expr
    (30) expr -> . ID [ expr ] = expr
    (31) expr -> . ID [ expr ] PLUSASSIGN expr
    (32) expr -> . ID [ expr ] MINASSIGN expr
    (33) expr -> . ID [ expr ] MULTASSIGN expr
    (34) expr -> . ID [ expr ] DIVASSIGN expr
    (35) expr -> . ID [ expr , expr ] = expr
    (36) expr -> . ID [ expr , expr ] PLUSASSIGN expr
    (37) expr -> . ID [ expr , expr ] MINASSIGN expr
    (38) expr -> . ID [ expr , expr ] MULTASSIGN expr
    (39) expr -> . ID [ expr , expr ] DIVASSIGN expr
    (40) expr -> . ID = ZEROS ( expr )
    (41) expr -> . ID = ONES ( expr )
    (42) expr -> . ID = EYE ( expr )
    (43) expr -> . expr + expr
    (44) expr -> . expr - expr
    (45) expr -> . expr * expr
    (46) expr -> . expr / expr
    (47) expr -> . expr MPLUS expr
    (48) expr -> . expr MMINUS expr
    (49) expr -> . expr MMLTP expr
    (50) expr -> . expr MDIV expr
    (51) expr -> . expr EQ expr
    (52) expr -> . expr NEQ expr
    (53) expr -> . expr GTEQ expr
    (54) expr -> . expr LTEQ expr
    (55) expr -> . expr > expr
    (56) expr -> . expr < expr

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ID              shift and go to state 10
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13

    expr                           shift and go to state 67

state 36

    (52) expr -> expr NEQ . expr
    (15) expr -> . INTNUM
    (16) expr -> . FLOATNUM
    (17) expr -> . STRING
    (18) expr -> . ID
    (19) expr -> . ( expr )
    (20) expr -> . - expr
    (21) expr -> . expr '
    (24) expr -> . [ array_interior ]
    (25) expr -> . ID = expr
    (26) expr -> . ID PLUSASSIGN expr
    (27) expr -> . ID MINASSIGN expr
    (28) expr -> . ID MULTASSIGN expr
    (29) expr -> . ID DIVASSIGN expr
    (30) expr -> . ID [ expr ] = expr
    (31) expr -> . ID [ expr ] PLUSASSIGN expr
    (32) expr -> . ID [ expr ] MINASSIGN expr
    (33) expr -> . ID [ expr ] MULTASSIGN expr
    (34) expr -> . ID [ expr ] DIVASSIGN expr
    (35) expr -> . ID [ expr , expr ] = expr
    (36) expr -> . ID [ expr , expr ] PLUSASSIGN expr
    (37) expr -> . ID [ expr , expr ] MINASSIGN expr
    (38) expr -> . ID [ expr , expr ] MULTASSIGN expr
    (39) expr -> . ID [ expr , expr ] DIVASSIGN expr
    (40) expr -> . ID = ZEROS ( expr )
    (41) expr -> . ID = ONES ( expr )
    (42) expr -> . ID = EYE ( expr )
    (43) expr -> . expr + expr
    (44) expr -> . expr - expr
    (45) expr -> . expr * expr
    (46) expr -> . expr / expr
    (47) expr -> . expr MPLUS expr
    (48) expr -> . expr MMINUS expr
    (49) expr -> . expr MMLTP expr
    (50) expr -> . expr MDIV expr
    (51) expr -> . expr EQ expr
    (52) expr -> . expr NEQ expr
    (53) expr -> . expr GTEQ expr
    (54) expr -> . expr LTEQ expr
    (55) expr -> . expr > expr
    (56) expr -> . expr < expr

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ID              shift and go to state 10
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13

    expr                           shift and go to state 68

state 37

    (53) expr -> expr GTEQ . expr
    (15) expr -> . INTNUM
    (16) expr -> . FLOATNUM
    (17) expr -> . STRING
    (18) expr -> . ID
    (19) expr -> . ( expr )
    (20) expr -> . - expr
    (21) expr -> . expr '
    (24) expr -> . [ array_interior ]
    (25) expr -> . ID = expr
    (26) expr -> . ID PLUSASSIGN expr
    (27) expr -> . ID MINASSIGN expr
    (28) expr -> . ID MULTASSIGN expr
    (29) expr -> . ID DIVASSIGN expr
    (30) expr -> . ID [ expr ] = expr
    (31) expr -> . ID [ expr ] PLUSASSIGN expr
    (32) expr -> . ID [ expr ] MINASSIGN expr
    (33) expr -> . ID [ expr ] MULTASSIGN expr
    (34) expr -> . ID [ expr ] DIVASSIGN expr
    (35) expr -> . ID [ expr , expr ] = expr
    (36) expr -> . ID [ expr , expr ] PLUSASSIGN expr
    (37) expr -> . ID [ expr , expr ] MINASSIGN expr
    (38) expr -> . ID [ expr , expr ] MULTASSIGN expr
    (39) expr -> . ID [ expr , expr ] DIVASSIGN expr
    (40) expr -> . ID = ZEROS ( expr )
    (41) expr -> . ID = ONES ( expr )
    (42) expr -> . ID = EYE ( expr )
    (43) expr -> . expr + expr
    (44) expr -> . expr - expr
    (45) expr -> . expr * expr
    (46) expr -> . expr / expr
    (47) expr -> . expr MPLUS expr
    (48) expr -> . expr MMINUS expr
    (49) expr -> . expr MMLTP expr
    (50) expr -> . expr MDIV expr
    (51) expr -> . expr EQ expr
    (52) expr -> . expr NEQ expr
    (53) expr -> . expr GTEQ expr
    (54) expr -> . expr LTEQ expr
    (55) expr -> . expr > expr
    (56) expr -> . expr < expr

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ID              shift and go to state 10
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13

    expr                           shift and go to state 69

state 38

    (54) expr -> expr LTEQ . expr
    (15) expr -> . INTNUM
    (16) expr -> . FLOATNUM
    (17) expr -> . STRING
    (18) expr -> . ID
    (19) expr -> . ( expr )
    (20) expr -> . - expr
    (21) expr -> . expr '
    (24) expr -> . [ array_interior ]
    (25) expr -> . ID = expr
    (26) expr -> . ID PLUSASSIGN expr
    (27) expr -> . ID MINASSIGN expr
    (28) expr -> . ID MULTASSIGN expr
    (29) expr -> . ID DIVASSIGN expr
    (30) expr -> . ID [ expr ] = expr
    (31) expr -> . ID [ expr ] PLUSASSIGN expr
    (32) expr -> . ID [ expr ] MINASSIGN expr
    (33) expr -> . ID [ expr ] MULTASSIGN expr
    (34) expr -> . ID [ expr ] DIVASSIGN expr
    (35) expr -> . ID [ expr , expr ] = expr
    (36) expr -> . ID [ expr , expr ] PLUSASSIGN expr
    (37) expr -> . ID [ expr , expr ] MINASSIGN expr
    (38) expr -> . ID [ expr , expr ] MULTASSIGN expr
    (39) expr -> . ID [ expr , expr ] DIVASSIGN expr
    (40) expr -> . ID = ZEROS ( expr )
    (41) expr -> . ID = ONES ( expr )
    (42) expr -> . ID = EYE ( expr )
    (43) expr -> . expr + expr
    (44) expr -> . expr - expr
    (45) expr -> . expr * expr
    (46) expr -> . expr / expr
    (47) expr -> . expr MPLUS expr
    (48) expr -> . expr MMINUS expr
    (49) expr -> . expr MMLTP expr
    (50) expr -> . expr MDIV expr
    (51) expr -> . expr EQ expr
    (52) expr -> . expr NEQ expr
    (53) expr -> . expr GTEQ expr
    (54) expr -> . expr LTEQ expr
    (55) expr -> . expr > expr
    (56) expr -> . expr < expr

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ID              shift and go to state 10
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13

    expr                           shift and go to state 70

state 39

    (55) expr -> expr > . expr
    (15) expr -> . INTNUM
    (16) expr -> . FLOATNUM
    (17) expr -> . STRING
    (18) expr -> . ID
    (19) expr -> . ( expr )
    (20) expr -> . - expr
    (21) expr -> . expr '
    (24) expr -> . [ array_interior ]
    (25) expr -> . ID = expr
    (26) expr -> . ID PLUSASSIGN expr
    (27) expr -> . ID MINASSIGN expr
    (28) expr -> . ID MULTASSIGN expr
    (29) expr -> . ID DIVASSIGN expr
    (30) expr -> . ID [ expr ] = expr
    (31) expr -> . ID [ expr ] PLUSASSIGN expr
    (32) expr -> . ID [ expr ] MINASSIGN expr
    (33) expr -> . ID [ expr ] MULTASSIGN expr
    (34) expr -> . ID [ expr ] DIVASSIGN expr
    (35) expr -> . ID [ expr , expr ] = expr
    (36) expr -> . ID [ expr , expr ] PLUSASSIGN expr
    (37) expr -> . ID [ expr , expr ] MINASSIGN expr
    (38) expr -> . ID [ expr , expr ] MULTASSIGN expr
    (39) expr -> . ID [ expr , expr ] DIVASSIGN expr
    (40) expr -> . ID = ZEROS ( expr )
    (41) expr -> . ID = ONES ( expr )
    (42) expr -> . ID = EYE ( expr )
    (43) expr -> . expr + expr
    (44) expr -> . expr - expr
    (45) expr -> . expr * expr
    (46) expr -> . expr / expr
    (47) expr -> . expr MPLUS expr
    (48) expr -> . expr MMINUS expr
    (49) expr -> . expr MMLTP expr
    (50) expr -> . expr MDIV expr
    (51) expr -> . expr EQ expr
    (52) expr -> . expr NEQ expr
    (53) expr -> . expr GTEQ expr
    (54) expr -> . expr LTEQ expr
    (55) expr -> . expr > expr
    (56) expr -> . expr < expr

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ID              shift and go to state 10
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13

    expr                           shift and go to state 71

state 40

    (56) expr -> expr < . expr
    (15) expr -> . INTNUM
    (16) expr -> . FLOATNUM
    (17) expr -> . STRING
    (18) expr -> . ID
    (19) expr -> . ( expr )
    (20) expr -> . - expr
    (21) expr -> . expr '
    (24) expr -> . [ array_interior ]
    (25) expr -> . ID = expr
    (26) expr -> . ID PLUSASSIGN expr
    (27) expr -> . ID MINASSIGN expr
    (28) expr -> . ID MULTASSIGN expr
    (29) expr -> . ID DIVASSIGN expr
    (30) expr -> . ID [ expr ] = expr
    (31) expr -> . ID [ expr ] PLUSASSIGN expr
    (32) expr -> . ID [ expr ] MINASSIGN expr
    (33) expr -> . ID [ expr ] MULTASSIGN expr
    (34) expr -> . ID [ expr ] DIVASSIGN expr
    (35) expr -> . ID [ expr , expr ] = expr
    (36) expr -> . ID [ expr , expr ] PLUSASSIGN expr
    (37) expr -> . ID [ expr , expr ] MINASSIGN expr
    (38) expr -> . ID [ expr , expr ] MULTASSIGN expr
    (39) expr -> . ID [ expr , expr ] DIVASSIGN expr
    (40) expr -> . ID = ZEROS ( expr )
    (41) expr -> . ID = ONES ( expr )
    (42) expr -> . ID = EYE ( expr )
    (43) expr -> . expr + expr
    (44) expr -> . expr - expr
    (45) expr -> . expr * expr
    (46) expr -> . expr / expr
    (47) expr -> . expr MPLUS expr
    (48) expr -> . expr MMINUS expr
    (49) expr -> . expr MMLTP expr
    (50) expr -> . expr MDIV expr
    (51) expr -> . expr EQ expr
    (52) expr -> . expr NEQ expr
    (53) expr -> . expr GTEQ expr
    (54) expr -> . expr LTEQ expr
    (55) expr -> . expr > expr
    (56) expr -> . expr < expr

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ID              shift and go to state 10
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13

    expr                           shift and go to state 72

state 41

    (25) expr -> ID = . expr
    (40) expr -> ID = . ZEROS ( expr )
    (41) expr -> ID = . ONES ( expr )
    (42) expr -> ID = . EYE ( expr )
    (15) expr -> . INTNUM
    (16) expr -> . FLOATNUM
    (17) expr -> . STRING
    (18) expr -> . ID
    (19) expr -> . ( expr )
    (20) expr -> . - expr
    (21) expr -> . expr '
    (24) expr -> . [ array_interior ]
    (25) expr -> . ID = expr
    (26) expr -> . ID PLUSASSIGN expr
    (27) expr -> . ID MINASSIGN expr
    (28) expr -> . ID MULTASSIGN expr
    (29) expr -> . ID DIVASSIGN expr
    (30) expr -> . ID [ expr ] = expr
    (31) expr -> . ID [ expr ] PLUSASSIGN expr
    (32) expr -> . ID [ expr ] MINASSIGN expr
    (33) expr -> . ID [ expr ] MULTASSIGN expr
    (34) expr -> . ID [ expr ] DIVASSIGN expr
    (35) expr -> . ID [ expr , expr ] = expr
    (36) expr -> . ID [ expr , expr ] PLUSASSIGN expr
    (37) expr -> . ID [ expr , expr ] MINASSIGN expr
    (38) expr -> . ID [ expr , expr ] MULTASSIGN expr
    (39) expr -> . ID [ expr , expr ] DIVASSIGN expr
    (40) expr -> . ID = ZEROS ( expr )
    (41) expr -> . ID = ONES ( expr )
    (42) expr -> . ID = EYE ( expr )
    (43) expr -> . expr + expr
    (44) expr -> . expr - expr
    (45) expr -> . expr * expr
    (46) expr -> . expr / expr
    (47) expr -> . expr MPLUS expr
    (48) expr -> . expr MMINUS expr
    (49) expr -> . expr MMLTP expr
    (50) expr -> . expr MDIV expr
    (51) expr -> . expr EQ expr
    (52) expr -> . expr NEQ expr
    (53) expr -> . expr GTEQ expr
    (54) expr -> . expr LTEQ expr
    (55) expr -> . expr > expr
    (56) expr -> . expr < expr

    ZEROS           shift and go to state 74
    ONES            shift and go to state 75
    EYE             shift and go to state 76
    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ID              shift and go to state 10
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13

    expr                           shift and go to state 73

state 42

    (26) expr -> ID PLUSASSIGN . expr
    (15) expr -> . INTNUM
    (16) expr -> . FLOATNUM
    (17) expr -> . STRING
    (18) expr -> . ID
    (19) expr -> . ( expr )
    (20) expr -> . - expr
    (21) expr -> . expr '
    (24) expr -> . [ array_interior ]
    (25) expr -> . ID = expr
    (26) expr -> . ID PLUSASSIGN expr
    (27) expr -> . ID MINASSIGN expr
    (28) expr -> . ID MULTASSIGN expr
    (29) expr -> . ID DIVASSIGN expr
    (30) expr -> . ID [ expr ] = expr
    (31) expr -> . ID [ expr ] PLUSASSIGN expr
    (32) expr -> . ID [ expr ] MINASSIGN expr
    (33) expr -> . ID [ expr ] MULTASSIGN expr
    (34) expr -> . ID [ expr ] DIVASSIGN expr
    (35) expr -> . ID [ expr , expr ] = expr
    (36) expr -> . ID [ expr , expr ] PLUSASSIGN expr
    (37) expr -> . ID [ expr , expr ] MINASSIGN expr
    (38) expr -> . ID [ expr , expr ] MULTASSIGN expr
    (39) expr -> . ID [ expr , expr ] DIVASSIGN expr
    (40) expr -> . ID = ZEROS ( expr )
    (41) expr -> . ID = ONES ( expr )
    (42) expr -> . ID = EYE ( expr )
    (43) expr -> . expr + expr
    (44) expr -> . expr - expr
    (45) expr -> . expr * expr
    (46) expr -> . expr / expr
    (47) expr -> . expr MPLUS expr
    (48) expr -> . expr MMINUS expr
    (49) expr -> . expr MMLTP expr
    (50) expr -> . expr MDIV expr
    (51) expr -> . expr EQ expr
    (52) expr -> . expr NEQ expr
    (53) expr -> . expr GTEQ expr
    (54) expr -> . expr LTEQ expr
    (55) expr -> . expr > expr
    (56) expr -> . expr < expr

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ID              shift and go to state 10
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13

    expr                           shift and go to state 77

state 43

    (27) expr -> ID MINASSIGN . expr
    (15) expr -> . INTNUM
    (16) expr -> . FLOATNUM
    (17) expr -> . STRING
    (18) expr -> . ID
    (19) expr -> . ( expr )
    (20) expr -> . - expr
    (21) expr -> . expr '
    (24) expr -> . [ array_interior ]
    (25) expr -> . ID = expr
    (26) expr -> . ID PLUSASSIGN expr
    (27) expr -> . ID MINASSIGN expr
    (28) expr -> . ID MULTASSIGN expr
    (29) expr -> . ID DIVASSIGN expr
    (30) expr -> . ID [ expr ] = expr
    (31) expr -> . ID [ expr ] PLUSASSIGN expr
    (32) expr -> . ID [ expr ] MINASSIGN expr
    (33) expr -> . ID [ expr ] MULTASSIGN expr
    (34) expr -> . ID [ expr ] DIVASSIGN expr
    (35) expr -> . ID [ expr , expr ] = expr
    (36) expr -> . ID [ expr , expr ] PLUSASSIGN expr
    (37) expr -> . ID [ expr , expr ] MINASSIGN expr
    (38) expr -> . ID [ expr , expr ] MULTASSIGN expr
    (39) expr -> . ID [ expr , expr ] DIVASSIGN expr
    (40) expr -> . ID = ZEROS ( expr )
    (41) expr -> . ID = ONES ( expr )
    (42) expr -> . ID = EYE ( expr )
    (43) expr -> . expr + expr
    (44) expr -> . expr - expr
    (45) expr -> . expr * expr
    (46) expr -> . expr / expr
    (47) expr -> . expr MPLUS expr
    (48) expr -> . expr MMINUS expr
    (49) expr -> . expr MMLTP expr
    (50) expr -> . expr MDIV expr
    (51) expr -> . expr EQ expr
    (52) expr -> . expr NEQ expr
    (53) expr -> . expr GTEQ expr
    (54) expr -> . expr LTEQ expr
    (55) expr -> . expr > expr
    (56) expr -> . expr < expr

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ID              shift and go to state 10
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13

    expr                           shift and go to state 78

state 44

    (28) expr -> ID MULTASSIGN . expr
    (15) expr -> . INTNUM
    (16) expr -> . FLOATNUM
    (17) expr -> . STRING
    (18) expr -> . ID
    (19) expr -> . ( expr )
    (20) expr -> . - expr
    (21) expr -> . expr '
    (24) expr -> . [ array_interior ]
    (25) expr -> . ID = expr
    (26) expr -> . ID PLUSASSIGN expr
    (27) expr -> . ID MINASSIGN expr
    (28) expr -> . ID MULTASSIGN expr
    (29) expr -> . ID DIVASSIGN expr
    (30) expr -> . ID [ expr ] = expr
    (31) expr -> . ID [ expr ] PLUSASSIGN expr
    (32) expr -> . ID [ expr ] MINASSIGN expr
    (33) expr -> . ID [ expr ] MULTASSIGN expr
    (34) expr -> . ID [ expr ] DIVASSIGN expr
    (35) expr -> . ID [ expr , expr ] = expr
    (36) expr -> . ID [ expr , expr ] PLUSASSIGN expr
    (37) expr -> . ID [ expr , expr ] MINASSIGN expr
    (38) expr -> . ID [ expr , expr ] MULTASSIGN expr
    (39) expr -> . ID [ expr , expr ] DIVASSIGN expr
    (40) expr -> . ID = ZEROS ( expr )
    (41) expr -> . ID = ONES ( expr )
    (42) expr -> . ID = EYE ( expr )
    (43) expr -> . expr + expr
    (44) expr -> . expr - expr
    (45) expr -> . expr * expr
    (46) expr -> . expr / expr
    (47) expr -> . expr MPLUS expr
    (48) expr -> . expr MMINUS expr
    (49) expr -> . expr MMLTP expr
    (50) expr -> . expr MDIV expr
    (51) expr -> . expr EQ expr
    (52) expr -> . expr NEQ expr
    (53) expr -> . expr GTEQ expr
    (54) expr -> . expr LTEQ expr
    (55) expr -> . expr > expr
    (56) expr -> . expr < expr

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ID              shift and go to state 10
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13

    expr                           shift and go to state 79

state 45

    (29) expr -> ID DIVASSIGN . expr
    (15) expr -> . INTNUM
    (16) expr -> . FLOATNUM
    (17) expr -> . STRING
    (18) expr -> . ID
    (19) expr -> . ( expr )
    (20) expr -> . - expr
    (21) expr -> . expr '
    (24) expr -> . [ array_interior ]
    (25) expr -> . ID = expr
    (26) expr -> . ID PLUSASSIGN expr
    (27) expr -> . ID MINASSIGN expr
    (28) expr -> . ID MULTASSIGN expr
    (29) expr -> . ID DIVASSIGN expr
    (30) expr -> . ID [ expr ] = expr
    (31) expr -> . ID [ expr ] PLUSASSIGN expr
    (32) expr -> . ID [ expr ] MINASSIGN expr
    (33) expr -> . ID [ expr ] MULTASSIGN expr
    (34) expr -> . ID [ expr ] DIVASSIGN expr
    (35) expr -> . ID [ expr , expr ] = expr
    (36) expr -> . ID [ expr , expr ] PLUSASSIGN expr
    (37) expr -> . ID [ expr , expr ] MINASSIGN expr
    (38) expr -> . ID [ expr , expr ] MULTASSIGN expr
    (39) expr -> . ID [ expr , expr ] DIVASSIGN expr
    (40) expr -> . ID = ZEROS ( expr )
    (41) expr -> . ID = ONES ( expr )
    (42) expr -> . ID = EYE ( expr )
    (43) expr -> . expr + expr
    (44) expr -> . expr - expr
    (45) expr -> . expr * expr
    (46) expr -> . expr / expr
    (47) expr -> . expr MPLUS expr
    (48) expr -> . expr MMINUS expr
    (49) expr -> . expr MMLTP expr
    (50) expr -> . expr MDIV expr
    (51) expr -> . expr EQ expr
    (52) expr -> . expr NEQ expr
    (53) expr -> . expr GTEQ expr
    (54) expr -> . expr LTEQ expr
    (55) expr -> . expr > expr
    (56) expr -> . expr < expr

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ID              shift and go to state 10
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13

    expr                           shift and go to state 80

state 46

    (30) expr -> ID [ . expr ] = expr
    (31) expr -> ID [ . expr ] PLUSASSIGN expr
    (32) expr -> ID [ . expr ] MINASSIGN expr
    (33) expr -> ID [ . expr ] MULTASSIGN expr
    (34) expr -> ID [ . expr ] DIVASSIGN expr
    (35) expr -> ID [ . expr , expr ] = expr
    (36) expr -> ID [ . expr , expr ] PLUSASSIGN expr
    (37) expr -> ID [ . expr , expr ] MINASSIGN expr
    (38) expr -> ID [ . expr , expr ] MULTASSIGN expr
    (39) expr -> ID [ . expr , expr ] DIVASSIGN expr
    (15) expr -> . INTNUM
    (16) expr -> . FLOATNUM
    (17) expr -> . STRING
    (18) expr -> . ID
    (19) expr -> . ( expr )
    (20) expr -> . - expr
    (21) expr -> . expr '
    (24) expr -> . [ array_interior ]
    (25) expr -> . ID = expr
    (26) expr -> . ID PLUSASSIGN expr
    (27) expr -> . ID MINASSIGN expr
    (28) expr -> . ID MULTASSIGN expr
    (29) expr -> . ID DIVASSIGN expr
    (30) expr -> . ID [ expr ] = expr
    (31) expr -> . ID [ expr ] PLUSASSIGN expr
    (32) expr -> . ID [ expr ] MINASSIGN expr
    (33) expr -> . ID [ expr ] MULTASSIGN expr
    (34) expr -> . ID [ expr ] DIVASSIGN expr
    (35) expr -> . ID [ expr , expr ] = expr
    (36) expr -> . ID [ expr , expr ] PLUSASSIGN expr
    (37) expr -> . ID [ expr , expr ] MINASSIGN expr
    (38) expr -> . ID [ expr , expr ] MULTASSIGN expr
    (39) expr -> . ID [ expr , expr ] DIVASSIGN expr
    (40) expr -> . ID = ZEROS ( expr )
    (41) expr -> . ID = ONES ( expr )
    (42) expr -> . ID = EYE ( expr )
    (43) expr -> . expr + expr
    (44) expr -> . expr - expr
    (45) expr -> . expr * expr
    (46) expr -> . expr / expr
    (47) expr -> . expr MPLUS expr
    (48) expr -> . expr MMINUS expr
    (49) expr -> . expr MMLTP expr
    (50) expr -> . expr MDIV expr
    (51) expr -> . expr EQ expr
    (52) expr -> . expr NEQ expr
    (53) expr -> . expr GTEQ expr
    (54) expr -> . expr LTEQ expr
    (55) expr -> . expr > expr
    (56) expr -> . expr < expr

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ID              shift and go to state 10
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13

    expr                           shift and go to state 81

state 47

    (19) expr -> ( expr . )
    (21) expr -> expr . '
    (43) expr -> expr . + expr
    (44) expr -> expr . - expr
    (45) expr -> expr . * expr
    (46) expr -> expr . / expr
    (47) expr -> expr . MPLUS expr
    (48) expr -> expr . MMINUS expr
    (49) expr -> expr . MMLTP expr
    (50) expr -> expr . MDIV expr
    (51) expr -> expr . EQ expr
    (52) expr -> expr . NEQ expr
    (53) expr -> expr . GTEQ expr
    (54) expr -> expr . LTEQ expr
    (55) expr -> expr . > expr
    (56) expr -> expr . < expr

    )               shift and go to state 82
    '               shift and go to state 26
    +               shift and go to state 27
    -               shift and go to state 28
    *               shift and go to state 29
    /               shift and go to state 30
    MPLUS           shift and go to state 31
    MMINUS          shift and go to state 32
    MMLTP           shift and go to state 33
    MDIV            shift and go to state 34
    EQ              shift and go to state 35
    NEQ             shift and go to state 36
    GTEQ            shift and go to state 37
    LTEQ            shift and go to state 38
    >               shift and go to state 39
    <               shift and go to state 40


state 48

    (20) expr -> - expr .
    (21) expr -> expr . '
    (43) expr -> expr . + expr
    (44) expr -> expr . - expr
    (45) expr -> expr . * expr
    (46) expr -> expr . / expr
    (47) expr -> expr . MPLUS expr
    (48) expr -> expr . MMINUS expr
    (49) expr -> expr . MMLTP expr
    (50) expr -> expr . MDIV expr
    (51) expr -> expr . EQ expr
    (52) expr -> expr . NEQ expr
    (53) expr -> expr . GTEQ expr
    (54) expr -> expr . LTEQ expr
    (55) expr -> expr . > expr
    (56) expr -> expr . < expr

    ;               reduce using rule 20 (expr -> - expr .)
    +               reduce using rule 20 (expr -> - expr .)
    -               reduce using rule 20 (expr -> - expr .)
    MPLUS           reduce using rule 20 (expr -> - expr .)
    MMINUS          reduce using rule 20 (expr -> - expr .)
    EQ              reduce using rule 20 (expr -> - expr .)
    NEQ             reduce using rule 20 (expr -> - expr .)
    GTEQ            reduce using rule 20 (expr -> - expr .)
    LTEQ            reduce using rule 20 (expr -> - expr .)
    >               reduce using rule 20 (expr -> - expr .)
    <               reduce using rule 20 (expr -> - expr .)
    )               reduce using rule 20 (expr -> - expr .)
    ]               reduce using rule 20 (expr -> - expr .)
    ,               reduce using rule 20 (expr -> - expr .)
    :               reduce using rule 20 (expr -> - expr .)
    {               reduce using rule 20 (expr -> - expr .)
    INTNUM          reduce using rule 20 (expr -> - expr .)
    FLOATNUM        reduce using rule 20 (expr -> - expr .)
    STRING          reduce using rule 20 (expr -> - expr .)
    ID              reduce using rule 20 (expr -> - expr .)
    (               reduce using rule 20 (expr -> - expr .)
    [               reduce using rule 20 (expr -> - expr .)
    BREAK           reduce using rule 20 (expr -> - expr .)
    CONTINUE        reduce using rule 20 (expr -> - expr .)
    RETURN          reduce using rule 20 (expr -> - expr .)
    PRINT           reduce using rule 20 (expr -> - expr .)
    IF              reduce using rule 20 (expr -> - expr .)
    WHILE           reduce using rule 20 (expr -> - expr .)
    FOR             reduce using rule 20 (expr -> - expr .)
    '               shift and go to state 26
    *               shift and go to state 29
    /               shift and go to state 30
    MMLTP           shift and go to state 33
    MDIV            shift and go to state 34

  ! '               [ reduce using rule 20 (expr -> - expr .) ]
  ! *               [ reduce using rule 20 (expr -> - expr .) ]
  ! /               [ reduce using rule 20 (expr -> - expr .) ]
  ! MMLTP           [ reduce using rule 20 (expr -> - expr .) ]
  ! MDIV            [ reduce using rule 20 (expr -> - expr .) ]
  ! +               [ shift and go to state 27 ]
  ! -               [ shift and go to state 28 ]
  ! MPLUS           [ shift and go to state 31 ]
  ! MMINUS          [ shift and go to state 32 ]
  ! EQ              [ shift and go to state 35 ]
  ! NEQ             [ shift and go to state 36 ]
  ! GTEQ            [ shift and go to state 37 ]
  ! LTEQ            [ shift and go to state 38 ]
  ! >               [ shift and go to state 39 ]
  ! <               [ shift and go to state 40 ]


state 49

    (24) expr -> [ array_interior . ]
    (22) array_interior -> array_interior . , expr

    ]               shift and go to state 83
    ,               shift and go to state 84


state 50

    (23) array_interior -> expr .
    (21) expr -> expr . '
    (43) expr -> expr . + expr
    (44) expr -> expr . - expr
    (45) expr -> expr . * expr
    (46) expr -> expr . / expr
    (47) expr -> expr . MPLUS expr
    (48) expr -> expr . MMINUS expr
    (49) expr -> expr . MMLTP expr
    (50) expr -> expr . MDIV expr
    (51) expr -> expr . EQ expr
    (52) expr -> expr . NEQ expr
    (53) expr -> expr . GTEQ expr
    (54) expr -> expr . LTEQ expr
    (55) expr -> expr . > expr
    (56) expr -> expr . < expr

    ]               reduce using rule 23 (array_interior -> expr .)
    ,               reduce using rule 23 (array_interior -> expr .)
    ;               reduce using rule 23 (array_interior -> expr .)
    '               shift and go to state 26
    +               shift and go to state 27
    -               shift and go to state 28
    *               shift and go to state 29
    /               shift and go to state 30
    MPLUS           shift and go to state 31
    MMINUS          shift and go to state 32
    MMLTP           shift and go to state 33
    MDIV            shift and go to state 34
    EQ              shift and go to state 35
    NEQ             shift and go to state 36
    GTEQ            shift and go to state 37
    LTEQ            shift and go to state 38
    >               shift and go to state 39
    <               shift and go to state 40


state 51

    (63) cond_if -> cond_if ELSE . cond_block
    (60) cond_block -> . struct
    (61) cond_block -> . { start }
    (5) struct -> . expr ;
    (6) struct -> . cond_expr
    (7) struct -> . instruction
    (15) expr -> . INTNUM
    (16) expr -> . FLOATNUM
    (17) expr -> . STRING
    (18) expr -> . ID
    (19) expr -> . ( expr )
    (20) expr -> . - expr
    (21) expr -> . expr '
    (24) expr -> . [ array_interior ]
    (25) expr -> . ID = expr
    (26) expr -> . ID PLUSASSIGN expr
    (27) expr -> . ID MINASSIGN expr
    (28) expr -> . ID MULTASSIGN expr
    (29) expr -> . ID DIVASSIGN expr
    (30) expr -> . ID [ expr ] = expr
    (31) expr -> . ID [ expr ] PLUSASSIGN expr
    (32) expr -> . ID [ expr ] MINASSIGN expr
    (33) expr -> . ID [ expr ] MULTASSIGN expr
    (34) expr -> . ID [ expr ] DIVASSIGN expr
    (35) expr -> . ID [ expr , expr ] = expr
    (36) expr -> . ID [ expr , expr ] PLUSASSIGN expr
    (37) expr -> . ID [ expr , expr ] MINASSIGN expr
    (38) expr -> . ID [ expr , expr ] MULTASSIGN expr
    (39) expr -> . ID [ expr , expr ] DIVASSIGN expr
    (40) expr -> . ID = ZEROS ( expr )
    (41) expr -> . ID = ONES ( expr )
    (42) expr -> . ID = EYE ( expr )
    (43) expr -> . expr + expr
    (44) expr -> . expr - expr
    (45) expr -> . expr * expr
    (46) expr -> . expr / expr
    (47) expr -> . expr MPLUS expr
    (48) expr -> . expr MMINUS expr
    (49) expr -> . expr MMLTP expr
    (50) expr -> . expr MDIV expr
    (51) expr -> . expr EQ expr
    (52) expr -> . expr NEQ expr
    (53) expr -> . expr GTEQ expr
    (54) expr -> . expr LTEQ expr
    (55) expr -> . expr > expr
    (56) expr -> . expr < expr
    (57) cond_expr -> . cond_if
    (58) cond_expr -> . cond_while
    (59) cond_expr -> . cond_for
    (73) instruction -> . RETURN expr ;
    (74) instruction -> . PRINT array_interior ;
    (62) cond_if -> . IF ( expr ) cond_block
    (63) cond_if -> . cond_if ELSE cond_block
    (71) cond_while -> . WHILE ( expr ) loop_cond_block
    (72) cond_for -> . FOR ID = expr : expr loop_cond_block

    {               shift and go to state 87
    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ID              shift and go to state 10
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13
    RETURN          shift and go to state 17
    PRINT           shift and go to state 18
    IF              shift and go to state 19
    WHILE           shift and go to state 20
    FOR             shift and go to state 21

    cond_if                        shift and go to state 14
    cond_block                     shift and go to state 85
    struct                         shift and go to state 86
    expr                           shift and go to state 4
    cond_expr                      shift and go to state 5
    instruction                    shift and go to state 6
    cond_while                     shift and go to state 15
    cond_for                       shift and go to state 16

state 52

    (73) instruction -> RETURN expr . ;
    (21) expr -> expr . '
    (43) expr -> expr . + expr
    (44) expr -> expr . - expr
    (45) expr -> expr . * expr
    (46) expr -> expr . / expr
    (47) expr -> expr . MPLUS expr
    (48) expr -> expr . MMINUS expr
    (49) expr -> expr . MMLTP expr
    (50) expr -> expr . MDIV expr
    (51) expr -> expr . EQ expr
    (52) expr -> expr . NEQ expr
    (53) expr -> expr . GTEQ expr
    (54) expr -> expr . LTEQ expr
    (55) expr -> expr . > expr
    (56) expr -> expr . < expr

    ;               shift and go to state 88
    '               shift and go to state 26
    +               shift and go to state 27
    -               shift and go to state 28
    *               shift and go to state 29
    /               shift and go to state 30
    MPLUS           shift and go to state 31
    MMINUS          shift and go to state 32
    MMLTP           shift and go to state 33
    MDIV            shift and go to state 34
    EQ              shift and go to state 35
    NEQ             shift and go to state 36
    GTEQ            shift and go to state 37
    LTEQ            shift and go to state 38
    >               shift and go to state 39
    <               shift and go to state 40


state 53

    (74) instruction -> PRINT array_interior . ;
    (22) array_interior -> array_interior . , expr

    ;               shift and go to state 89
    ,               shift and go to state 84


state 54

    (62) cond_if -> IF ( . expr ) cond_block
    (15) expr -> . INTNUM
    (16) expr -> . FLOATNUM
    (17) expr -> . STRING
    (18) expr -> . ID
    (19) expr -> . ( expr )
    (20) expr -> . - expr
    (21) expr -> . expr '
    (24) expr -> . [ array_interior ]
    (25) expr -> . ID = expr
    (26) expr -> . ID PLUSASSIGN expr
    (27) expr -> . ID MINASSIGN expr
    (28) expr -> . ID MULTASSIGN expr
    (29) expr -> . ID DIVASSIGN expr
    (30) expr -> . ID [ expr ] = expr
    (31) expr -> . ID [ expr ] PLUSASSIGN expr
    (32) expr -> . ID [ expr ] MINASSIGN expr
    (33) expr -> . ID [ expr ] MULTASSIGN expr
    (34) expr -> . ID [ expr ] DIVASSIGN expr
    (35) expr -> . ID [ expr , expr ] = expr
    (36) expr -> . ID [ expr , expr ] PLUSASSIGN expr
    (37) expr -> . ID [ expr , expr ] MINASSIGN expr
    (38) expr -> . ID [ expr , expr ] MULTASSIGN expr
    (39) expr -> . ID [ expr , expr ] DIVASSIGN expr
    (40) expr -> . ID = ZEROS ( expr )
    (41) expr -> . ID = ONES ( expr )
    (42) expr -> . ID = EYE ( expr )
    (43) expr -> . expr + expr
    (44) expr -> . expr - expr
    (45) expr -> . expr * expr
    (46) expr -> . expr / expr
    (47) expr -> . expr MPLUS expr
    (48) expr -> . expr MMINUS expr
    (49) expr -> . expr MMLTP expr
    (50) expr -> . expr MDIV expr
    (51) expr -> . expr EQ expr
    (52) expr -> . expr NEQ expr
    (53) expr -> . expr GTEQ expr
    (54) expr -> . expr LTEQ expr
    (55) expr -> . expr > expr
    (56) expr -> . expr < expr

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ID              shift and go to state 10
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13

    expr                           shift and go to state 90

state 55

    (71) cond_while -> WHILE ( . expr ) loop_cond_block
    (15) expr -> . INTNUM
    (16) expr -> . FLOATNUM
    (17) expr -> . STRING
    (18) expr -> . ID
    (19) expr -> . ( expr )
    (20) expr -> . - expr
    (21) expr -> . expr '
    (24) expr -> . [ array_interior ]
    (25) expr -> . ID = expr
    (26) expr -> . ID PLUSASSIGN expr
    (27) expr -> . ID MINASSIGN expr
    (28) expr -> . ID MULTASSIGN expr
    (29) expr -> . ID DIVASSIGN expr
    (30) expr -> . ID [ expr ] = expr
    (31) expr -> . ID [ expr ] PLUSASSIGN expr
    (32) expr -> . ID [ expr ] MINASSIGN expr
    (33) expr -> . ID [ expr ] MULTASSIGN expr
    (34) expr -> . ID [ expr ] DIVASSIGN expr
    (35) expr -> . ID [ expr , expr ] = expr
    (36) expr -> . ID [ expr , expr ] PLUSASSIGN expr
    (37) expr -> . ID [ expr , expr ] MINASSIGN expr
    (38) expr -> . ID [ expr , expr ] MULTASSIGN expr
    (39) expr -> . ID [ expr , expr ] DIVASSIGN expr
    (40) expr -> . ID = ZEROS ( expr )
    (41) expr -> . ID = ONES ( expr )
    (42) expr -> . ID = EYE ( expr )
    (43) expr -> . expr + expr
    (44) expr -> . expr - expr
    (45) expr -> . expr * expr
    (46) expr -> . expr / expr
    (47) expr -> . expr MPLUS expr
    (48) expr -> . expr MMINUS expr
    (49) expr -> . expr MMLTP expr
    (50) expr -> . expr MDIV expr
    (51) expr -> . expr EQ expr
    (52) expr -> . expr NEQ expr
    (53) expr -> . expr GTEQ expr
    (54) expr -> . expr LTEQ expr
    (55) expr -> . expr > expr
    (56) expr -> . expr < expr

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ID              shift and go to state 10
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13

    expr                           shift and go to state 91

state 56

    (72) cond_for -> FOR ID . = expr : expr loop_cond_block

    =               shift and go to state 92


state 57

    (4) start -> start { start . }
    (2) start -> start . struct
    (4) start -> start . { start }
    (5) struct -> . expr ;
    (6) struct -> . cond_expr
    (7) struct -> . instruction
    (15) expr -> . INTNUM
    (16) expr -> . FLOATNUM
    (17) expr -> . STRING
    (18) expr -> . ID
    (19) expr -> . ( expr )
    (20) expr -> . - expr
    (21) expr -> . expr '
    (24) expr -> . [ array_interior ]
    (25) expr -> . ID = expr
    (26) expr -> . ID PLUSASSIGN expr
    (27) expr -> . ID MINASSIGN expr
    (28) expr -> . ID MULTASSIGN expr
    (29) expr -> . ID DIVASSIGN expr
    (30) expr -> . ID [ expr ] = expr
    (31) expr -> . ID [ expr ] PLUSASSIGN expr
    (32) expr -> . ID [ expr ] MINASSIGN expr
    (33) expr -> . ID [ expr ] MULTASSIGN expr
    (34) expr -> . ID [ expr ] DIVASSIGN expr
    (35) expr -> . ID [ expr , expr ] = expr
    (36) expr -> . ID [ expr , expr ] PLUSASSIGN expr
    (37) expr -> . ID [ expr , expr ] MINASSIGN expr
    (38) expr -> . ID [ expr , expr ] MULTASSIGN expr
    (39) expr -> . ID [ expr , expr ] DIVASSIGN expr
    (40) expr -> . ID = ZEROS ( expr )
    (41) expr -> . ID = ONES ( expr )
    (42) expr -> . ID = EYE ( expr )
    (43) expr -> . expr + expr
    (44) expr -> . expr - expr
    (45) expr -> . expr * expr
    (46) expr -> . expr / expr
    (47) expr -> . expr MPLUS expr
    (48) expr -> . expr MMINUS expr
    (49) expr -> . expr MMLTP expr
    (50) expr -> . expr MDIV expr
    (51) expr -> . expr EQ expr
    (52) expr -> . expr NEQ expr
    (53) expr -> . expr GTEQ expr
    (54) expr -> . expr LTEQ expr
    (55) expr -> . expr > expr
    (56) expr -> . expr < expr
    (57) cond_expr -> . cond_if
    (58) cond_expr -> . cond_while
    (59) cond_expr -> . cond_for
    (73) instruction -> . RETURN expr ;
    (74) instruction -> . PRINT array_interior ;
    (62) cond_if -> . IF ( expr ) cond_block
    (63) cond_if -> . cond_if ELSE cond_block
    (71) cond_while -> . WHILE ( expr ) loop_cond_block
    (72) cond_for -> . FOR ID = expr : expr loop_cond_block

    }               shift and go to state 93
    {               shift and go to state 23
    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ID              shift and go to state 10
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13
    RETURN          shift and go to state 17
    PRINT           shift and go to state 18
    IF              shift and go to state 19
    WHILE           shift and go to state 20
    FOR             shift and go to state 21

    struct                         shift and go to state 22
    expr                           shift and go to state 4
    cond_expr                      shift and go to state 5
    instruction                    shift and go to state 6
    cond_if                        shift and go to state 14
    cond_while                     shift and go to state 15
    cond_for                       shift and go to state 16

state 58

    (3) start -> { start } .

    {               reduce using rule 3 (start -> { start } .)
    INTNUM          reduce using rule 3 (start -> { start } .)
    FLOATNUM        reduce using rule 3 (start -> { start } .)
    STRING          reduce using rule 3 (start -> { start } .)
    ID              reduce using rule 3 (start -> { start } .)
    (               reduce using rule 3 (start -> { start } .)
    -               reduce using rule 3 (start -> { start } .)
    [               reduce using rule 3 (start -> { start } .)
    RETURN          reduce using rule 3 (start -> { start } .)
    PRINT           reduce using rule 3 (start -> { start } .)
    IF              reduce using rule 3 (start -> { start } .)
    WHILE           reduce using rule 3 (start -> { start } .)
    FOR             reduce using rule 3 (start -> { start } .)
    $end            reduce using rule 3 (start -> { start } .)
    }               reduce using rule 3 (start -> { start } .)


state 59

    (43) expr -> expr + expr .
    (21) expr -> expr . '
    (43) expr -> expr . + expr
    (44) expr -> expr . - expr
    (45) expr -> expr . * expr
    (46) expr -> expr . / expr
    (47) expr -> expr . MPLUS expr
    (48) expr -> expr . MMINUS expr
    (49) expr -> expr . MMLTP expr
    (50) expr -> expr . MDIV expr
    (51) expr -> expr . EQ expr
    (52) expr -> expr . NEQ expr
    (53) expr -> expr . GTEQ expr
    (54) expr -> expr . LTEQ expr
    (55) expr -> expr . > expr
    (56) expr -> expr . < expr

    ;               reduce using rule 43 (expr -> expr + expr .)
    +               reduce using rule 43 (expr -> expr + expr .)
    -               reduce using rule 43 (expr -> expr + expr .)
    MPLUS           reduce using rule 43 (expr -> expr + expr .)
    MMINUS          reduce using rule 43 (expr -> expr + expr .)
    EQ              reduce using rule 43 (expr -> expr + expr .)
    NEQ             reduce using rule 43 (expr -> expr + expr .)
    GTEQ            reduce using rule 43 (expr -> expr + expr .)
    LTEQ            reduce using rule 43 (expr -> expr + expr .)
    >               reduce using rule 43 (expr -> expr + expr .)
    <               reduce using rule 43 (expr -> expr + expr .)
    )               reduce using rule 43 (expr -> expr + expr .)
    ]               reduce using rule 43 (expr -> expr + expr .)
    ,               reduce using rule 43 (expr -> expr + expr .)
    :               reduce using rule 43 (expr -> expr + expr .)
    {               reduce using rule 43 (expr -> expr + expr .)
    INTNUM          reduce using rule 43 (expr -> expr + expr .)
    FLOATNUM        reduce using rule 43 (expr -> expr + expr .)
    STRING          reduce using rule 43 (expr -> expr + expr .)
    ID              reduce using rule 43 (expr -> expr + expr .)
    (               reduce using rule 43 (expr -> expr + expr .)
    [               reduce using rule 43 (expr -> expr + expr .)
    BREAK           reduce using rule 43 (expr -> expr + expr .)
    CONTINUE        reduce using rule 43 (expr -> expr + expr .)
    RETURN          reduce using rule 43 (expr -> expr + expr .)
    PRINT           reduce using rule 43 (expr -> expr + expr .)
    IF              reduce using rule 43 (expr -> expr + expr .)
    WHILE           reduce using rule 43 (expr -> expr + expr .)
    FOR             reduce using rule 43 (expr -> expr + expr .)
    '               shift and go to state 26
    *               shift and go to state 29
    /               shift and go to state 30
    MMLTP           shift and go to state 33
    MDIV            shift and go to state 34

  ! '               [ reduce using rule 43 (expr -> expr + expr .) ]
  ! *               [ reduce using rule 43 (expr -> expr + expr .) ]
  ! /               [ reduce using rule 43 (expr -> expr + expr .) ]
  ! MMLTP           [ reduce using rule 43 (expr -> expr + expr .) ]
  ! MDIV            [ reduce using rule 43 (expr -> expr + expr .) ]
  ! +               [ shift and go to state 27 ]
  ! -               [ shift and go to state 28 ]
  ! MPLUS           [ shift and go to state 31 ]
  ! MMINUS          [ shift and go to state 32 ]
  ! EQ              [ shift and go to state 35 ]
  ! NEQ             [ shift and go to state 36 ]
  ! GTEQ            [ shift and go to state 37 ]
  ! LTEQ            [ shift and go to state 38 ]
  ! >               [ shift and go to state 39 ]
  ! <               [ shift and go to state 40 ]


state 60

    (44) expr -> expr - expr .
    (21) expr -> expr . '
    (43) expr -> expr . + expr
    (44) expr -> expr . - expr
    (45) expr -> expr . * expr
    (46) expr -> expr . / expr
    (47) expr -> expr . MPLUS expr
    (48) expr -> expr . MMINUS expr
    (49) expr -> expr . MMLTP expr
    (50) expr -> expr . MDIV expr
    (51) expr -> expr . EQ expr
    (52) expr -> expr . NEQ expr
    (53) expr -> expr . GTEQ expr
    (54) expr -> expr . LTEQ expr
    (55) expr -> expr . > expr
    (56) expr -> expr . < expr

    ;               reduce using rule 44 (expr -> expr - expr .)
    +               reduce using rule 44 (expr -> expr - expr .)
    -               reduce using rule 44 (expr -> expr - expr .)
    MPLUS           reduce using rule 44 (expr -> expr - expr .)
    MMINUS          reduce using rule 44 (expr -> expr - expr .)
    EQ              reduce using rule 44 (expr -> expr - expr .)
    NEQ             reduce using rule 44 (expr -> expr - expr .)
    GTEQ            reduce using rule 44 (expr -> expr - expr .)
    LTEQ            reduce using rule 44 (expr -> expr - expr .)
    >               reduce using rule 44 (expr -> expr - expr .)
    <               reduce using rule 44 (expr -> expr - expr .)
    )               reduce using rule 44 (expr -> expr - expr .)
    ]               reduce using rule 44 (expr -> expr - expr .)
    ,               reduce using rule 44 (expr -> expr - expr .)
    :               reduce using rule 44 (expr -> expr - expr .)
    {               reduce using rule 44 (expr -> expr - expr .)
    INTNUM          reduce using rule 44 (expr -> expr - expr .)
    FLOATNUM        reduce using rule 44 (expr -> expr - expr .)
    STRING          reduce using rule 44 (expr -> expr - expr .)
    ID              reduce using rule 44 (expr -> expr - expr .)
    (               reduce using rule 44 (expr -> expr - expr .)
    [               reduce using rule 44 (expr -> expr - expr .)
    BREAK           reduce using rule 44 (expr -> expr - expr .)
    CONTINUE        reduce using rule 44 (expr -> expr - expr .)
    RETURN          reduce using rule 44 (expr -> expr - expr .)
    PRINT           reduce using rule 44 (expr -> expr - expr .)
    IF              reduce using rule 44 (expr -> expr - expr .)
    WHILE           reduce using rule 44 (expr -> expr - expr .)
    FOR             reduce using rule 44 (expr -> expr - expr .)
    '               shift and go to state 26
    *               shift and go to state 29
    /               shift and go to state 30
    MMLTP           shift and go to state 33
    MDIV            shift and go to state 34

  ! '               [ reduce using rule 44 (expr -> expr - expr .) ]
  ! *               [ reduce using rule 44 (expr -> expr - expr .) ]
  ! /               [ reduce using rule 44 (expr -> expr - expr .) ]
  ! MMLTP           [ reduce using rule 44 (expr -> expr - expr .) ]
  ! MDIV            [ reduce using rule 44 (expr -> expr - expr .) ]
  ! +               [ shift and go to state 27 ]
  ! -               [ shift and go to state 28 ]
  ! MPLUS           [ shift and go to state 31 ]
  ! MMINUS          [ shift and go to state 32 ]
  ! EQ              [ shift and go to state 35 ]
  ! NEQ             [ shift and go to state 36 ]
  ! GTEQ            [ shift and go to state 37 ]
  ! LTEQ            [ shift and go to state 38 ]
  ! >               [ shift and go to state 39 ]
  ! <               [ shift and go to state 40 ]


state 61

    (45) expr -> expr * expr .
    (21) expr -> expr . '
    (43) expr -> expr . + expr
    (44) expr -> expr . - expr
    (45) expr -> expr . * expr
    (46) expr -> expr . / expr
    (47) expr -> expr . MPLUS expr
    (48) expr -> expr . MMINUS expr
    (49) expr -> expr . MMLTP expr
    (50) expr -> expr . MDIV expr
    (51) expr -> expr . EQ expr
    (52) expr -> expr . NEQ expr
    (53) expr -> expr . GTEQ expr
    (54) expr -> expr . LTEQ expr
    (55) expr -> expr . > expr
    (56) expr -> expr . < expr

    ;               reduce using rule 45 (expr -> expr * expr .)
    +               reduce using rule 45 (expr -> expr * expr .)
    -               reduce using rule 45 (expr -> expr * expr .)
    *               reduce using rule 45 (expr -> expr * expr .)
    /               reduce using rule 45 (expr -> expr * expr .)
    MPLUS           reduce using rule 45 (expr -> expr * expr .)
    MMINUS          reduce using rule 45 (expr -> expr * expr .)
    MMLTP           reduce using rule 45 (expr -> expr * expr .)
    MDIV            reduce using rule 45 (expr -> expr * expr .)
    EQ              reduce using rule 45 (expr -> expr * expr .)
    NEQ             reduce using rule 45 (expr -> expr * expr .)
    GTEQ            reduce using rule 45 (expr -> expr * expr .)
    LTEQ            reduce using rule 45 (expr -> expr * expr .)
    >               reduce using rule 45 (expr -> expr * expr .)
    <               reduce using rule 45 (expr -> expr * expr .)
    )               reduce using rule 45 (expr -> expr * expr .)
    ]               reduce using rule 45 (expr -> expr * expr .)
    ,               reduce using rule 45 (expr -> expr * expr .)
    :               reduce using rule 45 (expr -> expr * expr .)
    {               reduce using rule 45 (expr -> expr * expr .)
    INTNUM          reduce using rule 45 (expr -> expr * expr .)
    FLOATNUM        reduce using rule 45 (expr -> expr * expr .)
    STRING          reduce using rule 45 (expr -> expr * expr .)
    ID              reduce using rule 45 (expr -> expr * expr .)
    (               reduce using rule 45 (expr -> expr * expr .)
    [               reduce using rule 45 (expr -> expr * expr .)
    BREAK           reduce using rule 45 (expr -> expr * expr .)
    CONTINUE        reduce using rule 45 (expr -> expr * expr .)
    RETURN          reduce using rule 45 (expr -> expr * expr .)
    PRINT           reduce using rule 45 (expr -> expr * expr .)
    IF              reduce using rule 45 (expr -> expr * expr .)
    WHILE           reduce using rule 45 (expr -> expr * expr .)
    FOR             reduce using rule 45 (expr -> expr * expr .)
    '               shift and go to state 26

  ! '               [ reduce using rule 45 (expr -> expr * expr .) ]
  ! +               [ shift and go to state 27 ]
  ! -               [ shift and go to state 28 ]
  ! *               [ shift and go to state 29 ]
  ! /               [ shift and go to state 30 ]
  ! MPLUS           [ shift and go to state 31 ]
  ! MMINUS          [ shift and go to state 32 ]
  ! MMLTP           [ shift and go to state 33 ]
  ! MDIV            [ shift and go to state 34 ]
  ! EQ              [ shift and go to state 35 ]
  ! NEQ             [ shift and go to state 36 ]
  ! GTEQ            [ shift and go to state 37 ]
  ! LTEQ            [ shift and go to state 38 ]
  ! >               [ shift and go to state 39 ]
  ! <               [ shift and go to state 40 ]


state 62

    (46) expr -> expr / expr .
    (21) expr -> expr . '
    (43) expr -> expr . + expr
    (44) expr -> expr . - expr
    (45) expr -> expr . * expr
    (46) expr -> expr . / expr
    (47) expr -> expr . MPLUS expr
    (48) expr -> expr . MMINUS expr
    (49) expr -> expr . MMLTP expr
    (50) expr -> expr . MDIV expr
    (51) expr -> expr . EQ expr
    (52) expr -> expr . NEQ expr
    (53) expr -> expr . GTEQ expr
    (54) expr -> expr . LTEQ expr
    (55) expr -> expr . > expr
    (56) expr -> expr . < expr

    ;               reduce using rule 46 (expr -> expr / expr .)
    +               reduce using rule 46 (expr -> expr / expr .)
    -               reduce using rule 46 (expr -> expr / expr .)
    *               reduce using rule 46 (expr -> expr / expr .)
    /               reduce using rule 46 (expr -> expr / expr .)
    MPLUS           reduce using rule 46 (expr -> expr / expr .)
    MMINUS          reduce using rule 46 (expr -> expr / expr .)
    MMLTP           reduce using rule 46 (expr -> expr / expr .)
    MDIV            reduce using rule 46 (expr -> expr / expr .)
    EQ              reduce using rule 46 (expr -> expr / expr .)
    NEQ             reduce using rule 46 (expr -> expr / expr .)
    GTEQ            reduce using rule 46 (expr -> expr / expr .)
    LTEQ            reduce using rule 46 (expr -> expr / expr .)
    >               reduce using rule 46 (expr -> expr / expr .)
    <               reduce using rule 46 (expr -> expr / expr .)
    )               reduce using rule 46 (expr -> expr / expr .)
    ]               reduce using rule 46 (expr -> expr / expr .)
    ,               reduce using rule 46 (expr -> expr / expr .)
    :               reduce using rule 46 (expr -> expr / expr .)
    {               reduce using rule 46 (expr -> expr / expr .)
    INTNUM          reduce using rule 46 (expr -> expr / expr .)
    FLOATNUM        reduce using rule 46 (expr -> expr / expr .)
    STRING          reduce using rule 46 (expr -> expr / expr .)
    ID              reduce using rule 46 (expr -> expr / expr .)
    (               reduce using rule 46 (expr -> expr / expr .)
    [               reduce using rule 46 (expr -> expr / expr .)
    BREAK           reduce using rule 46 (expr -> expr / expr .)
    CONTINUE        reduce using rule 46 (expr -> expr / expr .)
    RETURN          reduce using rule 46 (expr -> expr / expr .)
    PRINT           reduce using rule 46 (expr -> expr / expr .)
    IF              reduce using rule 46 (expr -> expr / expr .)
    WHILE           reduce using rule 46 (expr -> expr / expr .)
    FOR             reduce using rule 46 (expr -> expr / expr .)
    '               shift and go to state 26

  ! '               [ reduce using rule 46 (expr -> expr / expr .) ]
  ! +               [ shift and go to state 27 ]
  ! -               [ shift and go to state 28 ]
  ! *               [ shift and go to state 29 ]
  ! /               [ shift and go to state 30 ]
  ! MPLUS           [ shift and go to state 31 ]
  ! MMINUS          [ shift and go to state 32 ]
  ! MMLTP           [ shift and go to state 33 ]
  ! MDIV            [ shift and go to state 34 ]
  ! EQ              [ shift and go to state 35 ]
  ! NEQ             [ shift and go to state 36 ]
  ! GTEQ            [ shift and go to state 37 ]
  ! LTEQ            [ shift and go to state 38 ]
  ! >               [ shift and go to state 39 ]
  ! <               [ shift and go to state 40 ]


state 63

    (47) expr -> expr MPLUS expr .
    (21) expr -> expr . '
    (43) expr -> expr . + expr
    (44) expr -> expr . - expr
    (45) expr -> expr . * expr
    (46) expr -> expr . / expr
    (47) expr -> expr . MPLUS expr
    (48) expr -> expr . MMINUS expr
    (49) expr -> expr . MMLTP expr
    (50) expr -> expr . MDIV expr
    (51) expr -> expr . EQ expr
    (52) expr -> expr . NEQ expr
    (53) expr -> expr . GTEQ expr
    (54) expr -> expr . LTEQ expr
    (55) expr -> expr . > expr
    (56) expr -> expr . < expr

    ;               reduce using rule 47 (expr -> expr MPLUS expr .)
    +               reduce using rule 47 (expr -> expr MPLUS expr .)
    -               reduce using rule 47 (expr -> expr MPLUS expr .)
    MPLUS           reduce using rule 47 (expr -> expr MPLUS expr .)
    MMINUS          reduce using rule 47 (expr -> expr MPLUS expr .)
    EQ              reduce using rule 47 (expr -> expr MPLUS expr .)
    NEQ             reduce using rule 47 (expr -> expr MPLUS expr .)
    GTEQ            reduce using rule 47 (expr -> expr MPLUS expr .)
    LTEQ            reduce using rule 47 (expr -> expr MPLUS expr .)
    >               reduce using rule 47 (expr -> expr MPLUS expr .)
    <               reduce using rule 47 (expr -> expr MPLUS expr .)
    )               reduce using rule 47 (expr -> expr MPLUS expr .)
    ]               reduce using rule 47 (expr -> expr MPLUS expr .)
    ,               reduce using rule 47 (expr -> expr MPLUS expr .)
    :               reduce using rule 47 (expr -> expr MPLUS expr .)
    {               reduce using rule 47 (expr -> expr MPLUS expr .)
    INTNUM          reduce using rule 47 (expr -> expr MPLUS expr .)
    FLOATNUM        reduce using rule 47 (expr -> expr MPLUS expr .)
    STRING          reduce using rule 47 (expr -> expr MPLUS expr .)
    ID              reduce using rule 47 (expr -> expr MPLUS expr .)
    (               reduce using rule 47 (expr -> expr MPLUS expr .)
    [               reduce using rule 47 (expr -> expr MPLUS expr .)
    BREAK           reduce using rule 47 (expr -> expr MPLUS expr .)
    CONTINUE        reduce using rule 47 (expr -> expr MPLUS expr .)
    RETURN          reduce using rule 47 (expr -> expr MPLUS expr .)
    PRINT           reduce using rule 47 (expr -> expr MPLUS expr .)
    IF              reduce using rule 47 (expr -> expr MPLUS expr .)
    WHILE           reduce using rule 47 (expr -> expr MPLUS expr .)
    FOR             reduce using rule 47 (expr -> expr MPLUS expr .)
    '               shift and go to state 26
    *               shift and go to state 29
    /               shift and go to state 30
    MMLTP           shift and go to state 33
    MDIV            shift and go to state 34

  ! '               [ reduce using rule 47 (expr -> expr MPLUS expr .) ]
  ! *               [ reduce using rule 47 (expr -> expr MPLUS expr .) ]
  ! /               [ reduce using rule 47 (expr -> expr MPLUS expr .) ]
  ! MMLTP           [ reduce using rule 47 (expr -> expr MPLUS expr .) ]
  ! MDIV            [ reduce using rule 47 (expr -> expr MPLUS expr .) ]
  ! +               [ shift and go to state 27 ]
  ! -               [ shift and go to state 28 ]
  ! MPLUS           [ shift and go to state 31 ]
  ! MMINUS          [ shift and go to state 32 ]
  ! EQ              [ shift and go to state 35 ]
  ! NEQ             [ shift and go to state 36 ]
  ! GTEQ            [ shift and go to state 37 ]
  ! LTEQ            [ shift and go to state 38 ]
  ! >               [ shift and go to state 39 ]
  ! <               [ shift and go to state 40 ]


state 64

    (48) expr -> expr MMINUS expr .
    (21) expr -> expr . '
    (43) expr -> expr . + expr
    (44) expr -> expr . - expr
    (45) expr -> expr . * expr
    (46) expr -> expr . / expr
    (47) expr -> expr . MPLUS expr
    (48) expr -> expr . MMINUS expr
    (49) expr -> expr . MMLTP expr
    (50) expr -> expr . MDIV expr
    (51) expr -> expr . EQ expr
    (52) expr -> expr . NEQ expr
    (53) expr -> expr . GTEQ expr
    (54) expr -> expr . LTEQ expr
    (55) expr -> expr . > expr
    (56) expr -> expr . < expr

    ;               reduce using rule 48 (expr -> expr MMINUS expr .)
    +               reduce using rule 48 (expr -> expr MMINUS expr .)
    -               reduce using rule 48 (expr -> expr MMINUS expr .)
    MPLUS           reduce using rule 48 (expr -> expr MMINUS expr .)
    MMINUS          reduce using rule 48 (expr -> expr MMINUS expr .)
    EQ              reduce using rule 48 (expr -> expr MMINUS expr .)
    NEQ             reduce using rule 48 (expr -> expr MMINUS expr .)
    GTEQ            reduce using rule 48 (expr -> expr MMINUS expr .)
    LTEQ            reduce using rule 48 (expr -> expr MMINUS expr .)
    >               reduce using rule 48 (expr -> expr MMINUS expr .)
    <               reduce using rule 48 (expr -> expr MMINUS expr .)
    )               reduce using rule 48 (expr -> expr MMINUS expr .)
    ]               reduce using rule 48 (expr -> expr MMINUS expr .)
    ,               reduce using rule 48 (expr -> expr MMINUS expr .)
    :               reduce using rule 48 (expr -> expr MMINUS expr .)
    {               reduce using rule 48 (expr -> expr MMINUS expr .)
    INTNUM          reduce using rule 48 (expr -> expr MMINUS expr .)
    FLOATNUM        reduce using rule 48 (expr -> expr MMINUS expr .)
    STRING          reduce using rule 48 (expr -> expr MMINUS expr .)
    ID              reduce using rule 48 (expr -> expr MMINUS expr .)
    (               reduce using rule 48 (expr -> expr MMINUS expr .)
    [               reduce using rule 48 (expr -> expr MMINUS expr .)
    BREAK           reduce using rule 48 (expr -> expr MMINUS expr .)
    CONTINUE        reduce using rule 48 (expr -> expr MMINUS expr .)
    RETURN          reduce using rule 48 (expr -> expr MMINUS expr .)
    PRINT           reduce using rule 48 (expr -> expr MMINUS expr .)
    IF              reduce using rule 48 (expr -> expr MMINUS expr .)
    WHILE           reduce using rule 48 (expr -> expr MMINUS expr .)
    FOR             reduce using rule 48 (expr -> expr MMINUS expr .)
    '               shift and go to state 26
    *               shift and go to state 29
    /               shift and go to state 30
    MMLTP           shift and go to state 33
    MDIV            shift and go to state 34

  ! '               [ reduce using rule 48 (expr -> expr MMINUS expr .) ]
  ! *               [ reduce using rule 48 (expr -> expr MMINUS expr .) ]
  ! /               [ reduce using rule 48 (expr -> expr MMINUS expr .) ]
  ! MMLTP           [ reduce using rule 48 (expr -> expr MMINUS expr .) ]
  ! MDIV            [ reduce using rule 48 (expr -> expr MMINUS expr .) ]
  ! +               [ shift and go to state 27 ]
  ! -               [ shift and go to state 28 ]
  ! MPLUS           [ shift and go to state 31 ]
  ! MMINUS          [ shift and go to state 32 ]
  ! EQ              [ shift and go to state 35 ]
  ! NEQ             [ shift and go to state 36 ]
  ! GTEQ            [ shift and go to state 37 ]
  ! LTEQ            [ shift and go to state 38 ]
  ! >               [ shift and go to state 39 ]
  ! <               [ shift and go to state 40 ]


state 65

    (49) expr -> expr MMLTP expr .
    (21) expr -> expr . '
    (43) expr -> expr . + expr
    (44) expr -> expr . - expr
    (45) expr -> expr . * expr
    (46) expr -> expr . / expr
    (47) expr -> expr . MPLUS expr
    (48) expr -> expr . MMINUS expr
    (49) expr -> expr . MMLTP expr
    (50) expr -> expr . MDIV expr
    (51) expr -> expr . EQ expr
    (52) expr -> expr . NEQ expr
    (53) expr -> expr . GTEQ expr
    (54) expr -> expr . LTEQ expr
    (55) expr -> expr . > expr
    (56) expr -> expr . < expr

    ;               reduce using rule 49 (expr -> expr MMLTP expr .)
    +               reduce using rule 49 (expr -> expr MMLTP expr .)
    -               reduce using rule 49 (expr -> expr MMLTP expr .)
    *               reduce using rule 49 (expr -> expr MMLTP expr .)
    /               reduce using rule 49 (expr -> expr MMLTP expr .)
    MPLUS           reduce using rule 49 (expr -> expr MMLTP expr .)
    MMINUS          reduce using rule 49 (expr -> expr MMLTP expr .)
    MMLTP           reduce using rule 49 (expr -> expr MMLTP expr .)
    MDIV            reduce using rule 49 (expr -> expr MMLTP expr .)
    EQ              reduce using rule 49 (expr -> expr MMLTP expr .)
    NEQ             reduce using rule 49 (expr -> expr MMLTP expr .)
    GTEQ            reduce using rule 49 (expr -> expr MMLTP expr .)
    LTEQ            reduce using rule 49 (expr -> expr MMLTP expr .)
    >               reduce using rule 49 (expr -> expr MMLTP expr .)
    <               reduce using rule 49 (expr -> expr MMLTP expr .)
    )               reduce using rule 49 (expr -> expr MMLTP expr .)
    ]               reduce using rule 49 (expr -> expr MMLTP expr .)
    ,               reduce using rule 49 (expr -> expr MMLTP expr .)
    :               reduce using rule 49 (expr -> expr MMLTP expr .)
    {               reduce using rule 49 (expr -> expr MMLTP expr .)
    INTNUM          reduce using rule 49 (expr -> expr MMLTP expr .)
    FLOATNUM        reduce using rule 49 (expr -> expr MMLTP expr .)
    STRING          reduce using rule 49 (expr -> expr MMLTP expr .)
    ID              reduce using rule 49 (expr -> expr MMLTP expr .)
    (               reduce using rule 49 (expr -> expr MMLTP expr .)
    [               reduce using rule 49 (expr -> expr MMLTP expr .)
    BREAK           reduce using rule 49 (expr -> expr MMLTP expr .)
    CONTINUE        reduce using rule 49 (expr -> expr MMLTP expr .)
    RETURN          reduce using rule 49 (expr -> expr MMLTP expr .)
    PRINT           reduce using rule 49 (expr -> expr MMLTP expr .)
    IF              reduce using rule 49 (expr -> expr MMLTP expr .)
    WHILE           reduce using rule 49 (expr -> expr MMLTP expr .)
    FOR             reduce using rule 49 (expr -> expr MMLTP expr .)
    '               shift and go to state 26

  ! '               [ reduce using rule 49 (expr -> expr MMLTP expr .) ]
  ! +               [ shift and go to state 27 ]
  ! -               [ shift and go to state 28 ]
  ! *               [ shift and go to state 29 ]
  ! /               [ shift and go to state 30 ]
  ! MPLUS           [ shift and go to state 31 ]
  ! MMINUS          [ shift and go to state 32 ]
  ! MMLTP           [ shift and go to state 33 ]
  ! MDIV            [ shift and go to state 34 ]
  ! EQ              [ shift and go to state 35 ]
  ! NEQ             [ shift and go to state 36 ]
  ! GTEQ            [ shift and go to state 37 ]
  ! LTEQ            [ shift and go to state 38 ]
  ! >               [ shift and go to state 39 ]
  ! <               [ shift and go to state 40 ]


state 66

    (50) expr -> expr MDIV expr .
    (21) expr -> expr . '
    (43) expr -> expr . + expr
    (44) expr -> expr . - expr
    (45) expr -> expr . * expr
    (46) expr -> expr . / expr
    (47) expr -> expr . MPLUS expr
    (48) expr -> expr . MMINUS expr
    (49) expr -> expr . MMLTP expr
    (50) expr -> expr . MDIV expr
    (51) expr -> expr . EQ expr
    (52) expr -> expr . NEQ expr
    (53) expr -> expr . GTEQ expr
    (54) expr -> expr . LTEQ expr
    (55) expr -> expr . > expr
    (56) expr -> expr . < expr

    ;               reduce using rule 50 (expr -> expr MDIV expr .)
    +               reduce using rule 50 (expr -> expr MDIV expr .)
    -               reduce using rule 50 (expr -> expr MDIV expr .)
    *               reduce using rule 50 (expr -> expr MDIV expr .)
    /               reduce using rule 50 (expr -> expr MDIV expr .)
    MPLUS           reduce using rule 50 (expr -> expr MDIV expr .)
    MMINUS          reduce using rule 50 (expr -> expr MDIV expr .)
    MMLTP           reduce using rule 50 (expr -> expr MDIV expr .)
    MDIV            reduce using rule 50 (expr -> expr MDIV expr .)
    EQ              reduce using rule 50 (expr -> expr MDIV expr .)
    NEQ             reduce using rule 50 (expr -> expr MDIV expr .)
    GTEQ            reduce using rule 50 (expr -> expr MDIV expr .)
    LTEQ            reduce using rule 50 (expr -> expr MDIV expr .)
    >               reduce using rule 50 (expr -> expr MDIV expr .)
    <               reduce using rule 50 (expr -> expr MDIV expr .)
    )               reduce using rule 50 (expr -> expr MDIV expr .)
    ]               reduce using rule 50 (expr -> expr MDIV expr .)
    ,               reduce using rule 50 (expr -> expr MDIV expr .)
    :               reduce using rule 50 (expr -> expr MDIV expr .)
    {               reduce using rule 50 (expr -> expr MDIV expr .)
    INTNUM          reduce using rule 50 (expr -> expr MDIV expr .)
    FLOATNUM        reduce using rule 50 (expr -> expr MDIV expr .)
    STRING          reduce using rule 50 (expr -> expr MDIV expr .)
    ID              reduce using rule 50 (expr -> expr MDIV expr .)
    (               reduce using rule 50 (expr -> expr MDIV expr .)
    [               reduce using rule 50 (expr -> expr MDIV expr .)
    BREAK           reduce using rule 50 (expr -> expr MDIV expr .)
    CONTINUE        reduce using rule 50 (expr -> expr MDIV expr .)
    RETURN          reduce using rule 50 (expr -> expr MDIV expr .)
    PRINT           reduce using rule 50 (expr -> expr MDIV expr .)
    IF              reduce using rule 50 (expr -> expr MDIV expr .)
    WHILE           reduce using rule 50 (expr -> expr MDIV expr .)
    FOR             reduce using rule 50 (expr -> expr MDIV expr .)
    '               shift and go to state 26

  ! '               [ reduce using rule 50 (expr -> expr MDIV expr .) ]
  ! +               [ shift and go to state 27 ]
  ! -               [ shift and go to state 28 ]
  ! *               [ shift and go to state 29 ]
  ! /               [ shift and go to state 30 ]
  ! MPLUS           [ shift and go to state 31 ]
  ! MMINUS          [ shift and go to state 32 ]
  ! MMLTP           [ shift and go to state 33 ]
  ! MDIV            [ shift and go to state 34 ]
  ! EQ              [ shift and go to state 35 ]
  ! NEQ             [ shift and go to state 36 ]
  ! GTEQ            [ shift and go to state 37 ]
  ! LTEQ            [ shift and go to state 38 ]
  ! >               [ shift and go to state 39 ]
  ! <               [ shift and go to state 40 ]


state 67

    (51) expr -> expr EQ expr .
    (21) expr -> expr . '
    (43) expr -> expr . + expr
    (44) expr -> expr . - expr
    (45) expr -> expr . * expr
    (46) expr -> expr . / expr
    (47) expr -> expr . MPLUS expr
    (48) expr -> expr . MMINUS expr
    (49) expr -> expr . MMLTP expr
    (50) expr -> expr . MDIV expr
    (51) expr -> expr . EQ expr
    (52) expr -> expr . NEQ expr
    (53) expr -> expr . GTEQ expr
    (54) expr -> expr . LTEQ expr
    (55) expr -> expr . > expr
    (56) expr -> expr . < expr

  ! shift/reduce conflict for ' resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for MPLUS resolved as shift
  ! shift/reduce conflict for MMINUS resolved as shift
  ! shift/reduce conflict for MMLTP resolved as shift
  ! shift/reduce conflict for MDIV resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for GTEQ resolved as shift
  ! shift/reduce conflict for LTEQ resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for < resolved as shift
    ;               reduce using rule 51 (expr -> expr EQ expr .)
    )               reduce using rule 51 (expr -> expr EQ expr .)
    ]               reduce using rule 51 (expr -> expr EQ expr .)
    ,               reduce using rule 51 (expr -> expr EQ expr .)
    :               reduce using rule 51 (expr -> expr EQ expr .)
    {               reduce using rule 51 (expr -> expr EQ expr .)
    INTNUM          reduce using rule 51 (expr -> expr EQ expr .)
    FLOATNUM        reduce using rule 51 (expr -> expr EQ expr .)
    STRING          reduce using rule 51 (expr -> expr EQ expr .)
    ID              reduce using rule 51 (expr -> expr EQ expr .)
    (               reduce using rule 51 (expr -> expr EQ expr .)
    [               reduce using rule 51 (expr -> expr EQ expr .)
    BREAK           reduce using rule 51 (expr -> expr EQ expr .)
    CONTINUE        reduce using rule 51 (expr -> expr EQ expr .)
    RETURN          reduce using rule 51 (expr -> expr EQ expr .)
    PRINT           reduce using rule 51 (expr -> expr EQ expr .)
    IF              reduce using rule 51 (expr -> expr EQ expr .)
    WHILE           reduce using rule 51 (expr -> expr EQ expr .)
    FOR             reduce using rule 51 (expr -> expr EQ expr .)
    '               shift and go to state 26
    +               shift and go to state 27
    -               shift and go to state 28
    *               shift and go to state 29
    /               shift and go to state 30
    MPLUS           shift and go to state 31
    MMINUS          shift and go to state 32
    MMLTP           shift and go to state 33
    MDIV            shift and go to state 34
    EQ              shift and go to state 35
    NEQ             shift and go to state 36
    GTEQ            shift and go to state 37
    LTEQ            shift and go to state 38
    >               shift and go to state 39
    <               shift and go to state 40

  ! '               [ reduce using rule 51 (expr -> expr EQ expr .) ]
  ! +               [ reduce using rule 51 (expr -> expr EQ expr .) ]
  ! -               [ reduce using rule 51 (expr -> expr EQ expr .) ]
  ! *               [ reduce using rule 51 (expr -> expr EQ expr .) ]
  ! /               [ reduce using rule 51 (expr -> expr EQ expr .) ]
  ! MPLUS           [ reduce using rule 51 (expr -> expr EQ expr .) ]
  ! MMINUS          [ reduce using rule 51 (expr -> expr EQ expr .) ]
  ! MMLTP           [ reduce using rule 51 (expr -> expr EQ expr .) ]
  ! MDIV            [ reduce using rule 51 (expr -> expr EQ expr .) ]
  ! EQ              [ reduce using rule 51 (expr -> expr EQ expr .) ]
  ! NEQ             [ reduce using rule 51 (expr -> expr EQ expr .) ]
  ! GTEQ            [ reduce using rule 51 (expr -> expr EQ expr .) ]
  ! LTEQ            [ reduce using rule 51 (expr -> expr EQ expr .) ]
  ! >               [ reduce using rule 51 (expr -> expr EQ expr .) ]
  ! <               [ reduce using rule 51 (expr -> expr EQ expr .) ]


state 68

    (52) expr -> expr NEQ expr .
    (21) expr -> expr . '
    (43) expr -> expr . + expr
    (44) expr -> expr . - expr
    (45) expr -> expr . * expr
    (46) expr -> expr . / expr
    (47) expr -> expr . MPLUS expr
    (48) expr -> expr . MMINUS expr
    (49) expr -> expr . MMLTP expr
    (50) expr -> expr . MDIV expr
    (51) expr -> expr . EQ expr
    (52) expr -> expr . NEQ expr
    (53) expr -> expr . GTEQ expr
    (54) expr -> expr . LTEQ expr
    (55) expr -> expr . > expr
    (56) expr -> expr . < expr

  ! shift/reduce conflict for ' resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for MPLUS resolved as shift
  ! shift/reduce conflict for MMINUS resolved as shift
  ! shift/reduce conflict for MMLTP resolved as shift
  ! shift/reduce conflict for MDIV resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for GTEQ resolved as shift
  ! shift/reduce conflict for LTEQ resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for < resolved as shift
    ;               reduce using rule 52 (expr -> expr NEQ expr .)
    )               reduce using rule 52 (expr -> expr NEQ expr .)
    ]               reduce using rule 52 (expr -> expr NEQ expr .)
    ,               reduce using rule 52 (expr -> expr NEQ expr .)
    :               reduce using rule 52 (expr -> expr NEQ expr .)
    {               reduce using rule 52 (expr -> expr NEQ expr .)
    INTNUM          reduce using rule 52 (expr -> expr NEQ expr .)
    FLOATNUM        reduce using rule 52 (expr -> expr NEQ expr .)
    STRING          reduce using rule 52 (expr -> expr NEQ expr .)
    ID              reduce using rule 52 (expr -> expr NEQ expr .)
    (               reduce using rule 52 (expr -> expr NEQ expr .)
    [               reduce using rule 52 (expr -> expr NEQ expr .)
    BREAK           reduce using rule 52 (expr -> expr NEQ expr .)
    CONTINUE        reduce using rule 52 (expr -> expr NEQ expr .)
    RETURN          reduce using rule 52 (expr -> expr NEQ expr .)
    PRINT           reduce using rule 52 (expr -> expr NEQ expr .)
    IF              reduce using rule 52 (expr -> expr NEQ expr .)
    WHILE           reduce using rule 52 (expr -> expr NEQ expr .)
    FOR             reduce using rule 52 (expr -> expr NEQ expr .)
    '               shift and go to state 26
    +               shift and go to state 27
    -               shift and go to state 28
    *               shift and go to state 29
    /               shift and go to state 30
    MPLUS           shift and go to state 31
    MMINUS          shift and go to state 32
    MMLTP           shift and go to state 33
    MDIV            shift and go to state 34
    EQ              shift and go to state 35
    NEQ             shift and go to state 36
    GTEQ            shift and go to state 37
    LTEQ            shift and go to state 38
    >               shift and go to state 39
    <               shift and go to state 40

  ! '               [ reduce using rule 52 (expr -> expr NEQ expr .) ]
  ! +               [ reduce using rule 52 (expr -> expr NEQ expr .) ]
  ! -               [ reduce using rule 52 (expr -> expr NEQ expr .) ]
  ! *               [ reduce using rule 52 (expr -> expr NEQ expr .) ]
  ! /               [ reduce using rule 52 (expr -> expr NEQ expr .) ]
  ! MPLUS           [ reduce using rule 52 (expr -> expr NEQ expr .) ]
  ! MMINUS          [ reduce using rule 52 (expr -> expr NEQ expr .) ]
  ! MMLTP           [ reduce using rule 52 (expr -> expr NEQ expr .) ]
  ! MDIV            [ reduce using rule 52 (expr -> expr NEQ expr .) ]
  ! EQ              [ reduce using rule 52 (expr -> expr NEQ expr .) ]
  ! NEQ             [ reduce using rule 52 (expr -> expr NEQ expr .) ]
  ! GTEQ            [ reduce using rule 52 (expr -> expr NEQ expr .) ]
  ! LTEQ            [ reduce using rule 52 (expr -> expr NEQ expr .) ]
  ! >               [ reduce using rule 52 (expr -> expr NEQ expr .) ]
  ! <               [ reduce using rule 52 (expr -> expr NEQ expr .) ]


state 69

    (53) expr -> expr GTEQ expr .
    (21) expr -> expr . '
    (43) expr -> expr . + expr
    (44) expr -> expr . - expr
    (45) expr -> expr . * expr
    (46) expr -> expr . / expr
    (47) expr -> expr . MPLUS expr
    (48) expr -> expr . MMINUS expr
    (49) expr -> expr . MMLTP expr
    (50) expr -> expr . MDIV expr
    (51) expr -> expr . EQ expr
    (52) expr -> expr . NEQ expr
    (53) expr -> expr . GTEQ expr
    (54) expr -> expr . LTEQ expr
    (55) expr -> expr . > expr
    (56) expr -> expr . < expr

  ! shift/reduce conflict for ' resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for MPLUS resolved as shift
  ! shift/reduce conflict for MMINUS resolved as shift
  ! shift/reduce conflict for MMLTP resolved as shift
  ! shift/reduce conflict for MDIV resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for GTEQ resolved as shift
  ! shift/reduce conflict for LTEQ resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for < resolved as shift
    ;               reduce using rule 53 (expr -> expr GTEQ expr .)
    )               reduce using rule 53 (expr -> expr GTEQ expr .)
    ]               reduce using rule 53 (expr -> expr GTEQ expr .)
    ,               reduce using rule 53 (expr -> expr GTEQ expr .)
    :               reduce using rule 53 (expr -> expr GTEQ expr .)
    {               reduce using rule 53 (expr -> expr GTEQ expr .)
    INTNUM          reduce using rule 53 (expr -> expr GTEQ expr .)
    FLOATNUM        reduce using rule 53 (expr -> expr GTEQ expr .)
    STRING          reduce using rule 53 (expr -> expr GTEQ expr .)
    ID              reduce using rule 53 (expr -> expr GTEQ expr .)
    (               reduce using rule 53 (expr -> expr GTEQ expr .)
    [               reduce using rule 53 (expr -> expr GTEQ expr .)
    BREAK           reduce using rule 53 (expr -> expr GTEQ expr .)
    CONTINUE        reduce using rule 53 (expr -> expr GTEQ expr .)
    RETURN          reduce using rule 53 (expr -> expr GTEQ expr .)
    PRINT           reduce using rule 53 (expr -> expr GTEQ expr .)
    IF              reduce using rule 53 (expr -> expr GTEQ expr .)
    WHILE           reduce using rule 53 (expr -> expr GTEQ expr .)
    FOR             reduce using rule 53 (expr -> expr GTEQ expr .)
    '               shift and go to state 26
    +               shift and go to state 27
    -               shift and go to state 28
    *               shift and go to state 29
    /               shift and go to state 30
    MPLUS           shift and go to state 31
    MMINUS          shift and go to state 32
    MMLTP           shift and go to state 33
    MDIV            shift and go to state 34
    EQ              shift and go to state 35
    NEQ             shift and go to state 36
    GTEQ            shift and go to state 37
    LTEQ            shift and go to state 38
    >               shift and go to state 39
    <               shift and go to state 40

  ! '               [ reduce using rule 53 (expr -> expr GTEQ expr .) ]
  ! +               [ reduce using rule 53 (expr -> expr GTEQ expr .) ]
  ! -               [ reduce using rule 53 (expr -> expr GTEQ expr .) ]
  ! *               [ reduce using rule 53 (expr -> expr GTEQ expr .) ]
  ! /               [ reduce using rule 53 (expr -> expr GTEQ expr .) ]
  ! MPLUS           [ reduce using rule 53 (expr -> expr GTEQ expr .) ]
  ! MMINUS          [ reduce using rule 53 (expr -> expr GTEQ expr .) ]
  ! MMLTP           [ reduce using rule 53 (expr -> expr GTEQ expr .) ]
  ! MDIV            [ reduce using rule 53 (expr -> expr GTEQ expr .) ]
  ! EQ              [ reduce using rule 53 (expr -> expr GTEQ expr .) ]
  ! NEQ             [ reduce using rule 53 (expr -> expr GTEQ expr .) ]
  ! GTEQ            [ reduce using rule 53 (expr -> expr GTEQ expr .) ]
  ! LTEQ            [ reduce using rule 53 (expr -> expr GTEQ expr .) ]
  ! >               [ reduce using rule 53 (expr -> expr GTEQ expr .) ]
  ! <               [ reduce using rule 53 (expr -> expr GTEQ expr .) ]


state 70

    (54) expr -> expr LTEQ expr .
    (21) expr -> expr . '
    (43) expr -> expr . + expr
    (44) expr -> expr . - expr
    (45) expr -> expr . * expr
    (46) expr -> expr . / expr
    (47) expr -> expr . MPLUS expr
    (48) expr -> expr . MMINUS expr
    (49) expr -> expr . MMLTP expr
    (50) expr -> expr . MDIV expr
    (51) expr -> expr . EQ expr
    (52) expr -> expr . NEQ expr
    (53) expr -> expr . GTEQ expr
    (54) expr -> expr . LTEQ expr
    (55) expr -> expr . > expr
    (56) expr -> expr . < expr

  ! shift/reduce conflict for ' resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for MPLUS resolved as shift
  ! shift/reduce conflict for MMINUS resolved as shift
  ! shift/reduce conflict for MMLTP resolved as shift
  ! shift/reduce conflict for MDIV resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for GTEQ resolved as shift
  ! shift/reduce conflict for LTEQ resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for < resolved as shift
    ;               reduce using rule 54 (expr -> expr LTEQ expr .)
    )               reduce using rule 54 (expr -> expr LTEQ expr .)
    ]               reduce using rule 54 (expr -> expr LTEQ expr .)
    ,               reduce using rule 54 (expr -> expr LTEQ expr .)
    :               reduce using rule 54 (expr -> expr LTEQ expr .)
    {               reduce using rule 54 (expr -> expr LTEQ expr .)
    INTNUM          reduce using rule 54 (expr -> expr LTEQ expr .)
    FLOATNUM        reduce using rule 54 (expr -> expr LTEQ expr .)
    STRING          reduce using rule 54 (expr -> expr LTEQ expr .)
    ID              reduce using rule 54 (expr -> expr LTEQ expr .)
    (               reduce using rule 54 (expr -> expr LTEQ expr .)
    [               reduce using rule 54 (expr -> expr LTEQ expr .)
    BREAK           reduce using rule 54 (expr -> expr LTEQ expr .)
    CONTINUE        reduce using rule 54 (expr -> expr LTEQ expr .)
    RETURN          reduce using rule 54 (expr -> expr LTEQ expr .)
    PRINT           reduce using rule 54 (expr -> expr LTEQ expr .)
    IF              reduce using rule 54 (expr -> expr LTEQ expr .)
    WHILE           reduce using rule 54 (expr -> expr LTEQ expr .)
    FOR             reduce using rule 54 (expr -> expr LTEQ expr .)
    '               shift and go to state 26
    +               shift and go to state 27
    -               shift and go to state 28
    *               shift and go to state 29
    /               shift and go to state 30
    MPLUS           shift and go to state 31
    MMINUS          shift and go to state 32
    MMLTP           shift and go to state 33
    MDIV            shift and go to state 34
    EQ              shift and go to state 35
    NEQ             shift and go to state 36
    GTEQ            shift and go to state 37
    LTEQ            shift and go to state 38
    >               shift and go to state 39
    <               shift and go to state 40

  ! '               [ reduce using rule 54 (expr -> expr LTEQ expr .) ]
  ! +               [ reduce using rule 54 (expr -> expr LTEQ expr .) ]
  ! -               [ reduce using rule 54 (expr -> expr LTEQ expr .) ]
  ! *               [ reduce using rule 54 (expr -> expr LTEQ expr .) ]
  ! /               [ reduce using rule 54 (expr -> expr LTEQ expr .) ]
  ! MPLUS           [ reduce using rule 54 (expr -> expr LTEQ expr .) ]
  ! MMINUS          [ reduce using rule 54 (expr -> expr LTEQ expr .) ]
  ! MMLTP           [ reduce using rule 54 (expr -> expr LTEQ expr .) ]
  ! MDIV            [ reduce using rule 54 (expr -> expr LTEQ expr .) ]
  ! EQ              [ reduce using rule 54 (expr -> expr LTEQ expr .) ]
  ! NEQ             [ reduce using rule 54 (expr -> expr LTEQ expr .) ]
  ! GTEQ            [ reduce using rule 54 (expr -> expr LTEQ expr .) ]
  ! LTEQ            [ reduce using rule 54 (expr -> expr LTEQ expr .) ]
  ! >               [ reduce using rule 54 (expr -> expr LTEQ expr .) ]
  ! <               [ reduce using rule 54 (expr -> expr LTEQ expr .) ]


state 71

    (55) expr -> expr > expr .
    (21) expr -> expr . '
    (43) expr -> expr . + expr
    (44) expr -> expr . - expr
    (45) expr -> expr . * expr
    (46) expr -> expr . / expr
    (47) expr -> expr . MPLUS expr
    (48) expr -> expr . MMINUS expr
    (49) expr -> expr . MMLTP expr
    (50) expr -> expr . MDIV expr
    (51) expr -> expr . EQ expr
    (52) expr -> expr . NEQ expr
    (53) expr -> expr . GTEQ expr
    (54) expr -> expr . LTEQ expr
    (55) expr -> expr . > expr
    (56) expr -> expr . < expr

  ! shift/reduce conflict for ' resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for MPLUS resolved as shift
  ! shift/reduce conflict for MMINUS resolved as shift
  ! shift/reduce conflict for MMLTP resolved as shift
  ! shift/reduce conflict for MDIV resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for GTEQ resolved as shift
  ! shift/reduce conflict for LTEQ resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for < resolved as shift
    ;               reduce using rule 55 (expr -> expr > expr .)
    )               reduce using rule 55 (expr -> expr > expr .)
    ]               reduce using rule 55 (expr -> expr > expr .)
    ,               reduce using rule 55 (expr -> expr > expr .)
    :               reduce using rule 55 (expr -> expr > expr .)
    {               reduce using rule 55 (expr -> expr > expr .)
    INTNUM          reduce using rule 55 (expr -> expr > expr .)
    FLOATNUM        reduce using rule 55 (expr -> expr > expr .)
    STRING          reduce using rule 55 (expr -> expr > expr .)
    ID              reduce using rule 55 (expr -> expr > expr .)
    (               reduce using rule 55 (expr -> expr > expr .)
    [               reduce using rule 55 (expr -> expr > expr .)
    BREAK           reduce using rule 55 (expr -> expr > expr .)
    CONTINUE        reduce using rule 55 (expr -> expr > expr .)
    RETURN          reduce using rule 55 (expr -> expr > expr .)
    PRINT           reduce using rule 55 (expr -> expr > expr .)
    IF              reduce using rule 55 (expr -> expr > expr .)
    WHILE           reduce using rule 55 (expr -> expr > expr .)
    FOR             reduce using rule 55 (expr -> expr > expr .)
    '               shift and go to state 26
    +               shift and go to state 27
    -               shift and go to state 28
    *               shift and go to state 29
    /               shift and go to state 30
    MPLUS           shift and go to state 31
    MMINUS          shift and go to state 32
    MMLTP           shift and go to state 33
    MDIV            shift and go to state 34
    EQ              shift and go to state 35
    NEQ             shift and go to state 36
    GTEQ            shift and go to state 37
    LTEQ            shift and go to state 38
    >               shift and go to state 39
    <               shift and go to state 40

  ! '               [ reduce using rule 55 (expr -> expr > expr .) ]
  ! +               [ reduce using rule 55 (expr -> expr > expr .) ]
  ! -               [ reduce using rule 55 (expr -> expr > expr .) ]
  ! *               [ reduce using rule 55 (expr -> expr > expr .) ]
  ! /               [ reduce using rule 55 (expr -> expr > expr .) ]
  ! MPLUS           [ reduce using rule 55 (expr -> expr > expr .) ]
  ! MMINUS          [ reduce using rule 55 (expr -> expr > expr .) ]
  ! MMLTP           [ reduce using rule 55 (expr -> expr > expr .) ]
  ! MDIV            [ reduce using rule 55 (expr -> expr > expr .) ]
  ! EQ              [ reduce using rule 55 (expr -> expr > expr .) ]
  ! NEQ             [ reduce using rule 55 (expr -> expr > expr .) ]
  ! GTEQ            [ reduce using rule 55 (expr -> expr > expr .) ]
  ! LTEQ            [ reduce using rule 55 (expr -> expr > expr .) ]
  ! >               [ reduce using rule 55 (expr -> expr > expr .) ]
  ! <               [ reduce using rule 55 (expr -> expr > expr .) ]


state 72

    (56) expr -> expr < expr .
    (21) expr -> expr . '
    (43) expr -> expr . + expr
    (44) expr -> expr . - expr
    (45) expr -> expr . * expr
    (46) expr -> expr . / expr
    (47) expr -> expr . MPLUS expr
    (48) expr -> expr . MMINUS expr
    (49) expr -> expr . MMLTP expr
    (50) expr -> expr . MDIV expr
    (51) expr -> expr . EQ expr
    (52) expr -> expr . NEQ expr
    (53) expr -> expr . GTEQ expr
    (54) expr -> expr . LTEQ expr
    (55) expr -> expr . > expr
    (56) expr -> expr . < expr

  ! shift/reduce conflict for ' resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for MPLUS resolved as shift
  ! shift/reduce conflict for MMINUS resolved as shift
  ! shift/reduce conflict for MMLTP resolved as shift
  ! shift/reduce conflict for MDIV resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for GTEQ resolved as shift
  ! shift/reduce conflict for LTEQ resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for < resolved as shift
    ;               reduce using rule 56 (expr -> expr < expr .)
    )               reduce using rule 56 (expr -> expr < expr .)
    ]               reduce using rule 56 (expr -> expr < expr .)
    ,               reduce using rule 56 (expr -> expr < expr .)
    :               reduce using rule 56 (expr -> expr < expr .)
    {               reduce using rule 56 (expr -> expr < expr .)
    INTNUM          reduce using rule 56 (expr -> expr < expr .)
    FLOATNUM        reduce using rule 56 (expr -> expr < expr .)
    STRING          reduce using rule 56 (expr -> expr < expr .)
    ID              reduce using rule 56 (expr -> expr < expr .)
    (               reduce using rule 56 (expr -> expr < expr .)
    [               reduce using rule 56 (expr -> expr < expr .)
    BREAK           reduce using rule 56 (expr -> expr < expr .)
    CONTINUE        reduce using rule 56 (expr -> expr < expr .)
    RETURN          reduce using rule 56 (expr -> expr < expr .)
    PRINT           reduce using rule 56 (expr -> expr < expr .)
    IF              reduce using rule 56 (expr -> expr < expr .)
    WHILE           reduce using rule 56 (expr -> expr < expr .)
    FOR             reduce using rule 56 (expr -> expr < expr .)
    '               shift and go to state 26
    +               shift and go to state 27
    -               shift and go to state 28
    *               shift and go to state 29
    /               shift and go to state 30
    MPLUS           shift and go to state 31
    MMINUS          shift and go to state 32
    MMLTP           shift and go to state 33
    MDIV            shift and go to state 34
    EQ              shift and go to state 35
    NEQ             shift and go to state 36
    GTEQ            shift and go to state 37
    LTEQ            shift and go to state 38
    >               shift and go to state 39
    <               shift and go to state 40

  ! '               [ reduce using rule 56 (expr -> expr < expr .) ]
  ! +               [ reduce using rule 56 (expr -> expr < expr .) ]
  ! -               [ reduce using rule 56 (expr -> expr < expr .) ]
  ! *               [ reduce using rule 56 (expr -> expr < expr .) ]
  ! /               [ reduce using rule 56 (expr -> expr < expr .) ]
  ! MPLUS           [ reduce using rule 56 (expr -> expr < expr .) ]
  ! MMINUS          [ reduce using rule 56 (expr -> expr < expr .) ]
  ! MMLTP           [ reduce using rule 56 (expr -> expr < expr .) ]
  ! MDIV            [ reduce using rule 56 (expr -> expr < expr .) ]
  ! EQ              [ reduce using rule 56 (expr -> expr < expr .) ]
  ! NEQ             [ reduce using rule 56 (expr -> expr < expr .) ]
  ! GTEQ            [ reduce using rule 56 (expr -> expr < expr .) ]
  ! LTEQ            [ reduce using rule 56 (expr -> expr < expr .) ]
  ! >               [ reduce using rule 56 (expr -> expr < expr .) ]
  ! <               [ reduce using rule 56 (expr -> expr < expr .) ]


state 73

    (25) expr -> ID = expr .
    (21) expr -> expr . '
    (43) expr -> expr . + expr
    (44) expr -> expr . - expr
    (45) expr -> expr . * expr
    (46) expr -> expr . / expr
    (47) expr -> expr . MPLUS expr
    (48) expr -> expr . MMINUS expr
    (49) expr -> expr . MMLTP expr
    (50) expr -> expr . MDIV expr
    (51) expr -> expr . EQ expr
    (52) expr -> expr . NEQ expr
    (53) expr -> expr . GTEQ expr
    (54) expr -> expr . LTEQ expr
    (55) expr -> expr . > expr
    (56) expr -> expr . < expr

    ;               reduce using rule 25 (expr -> ID = expr .)
    EQ              reduce using rule 25 (expr -> ID = expr .)
    NEQ             reduce using rule 25 (expr -> ID = expr .)
    GTEQ            reduce using rule 25 (expr -> ID = expr .)
    LTEQ            reduce using rule 25 (expr -> ID = expr .)
    >               reduce using rule 25 (expr -> ID = expr .)
    <               reduce using rule 25 (expr -> ID = expr .)
    )               reduce using rule 25 (expr -> ID = expr .)
    ]               reduce using rule 25 (expr -> ID = expr .)
    ,               reduce using rule 25 (expr -> ID = expr .)
    :               reduce using rule 25 (expr -> ID = expr .)
    {               reduce using rule 25 (expr -> ID = expr .)
    INTNUM          reduce using rule 25 (expr -> ID = expr .)
    FLOATNUM        reduce using rule 25 (expr -> ID = expr .)
    STRING          reduce using rule 25 (expr -> ID = expr .)
    ID              reduce using rule 25 (expr -> ID = expr .)
    (               reduce using rule 25 (expr -> ID = expr .)
    [               reduce using rule 25 (expr -> ID = expr .)
    BREAK           reduce using rule 25 (expr -> ID = expr .)
    CONTINUE        reduce using rule 25 (expr -> ID = expr .)
    RETURN          reduce using rule 25 (expr -> ID = expr .)
    PRINT           reduce using rule 25 (expr -> ID = expr .)
    IF              reduce using rule 25 (expr -> ID = expr .)
    WHILE           reduce using rule 25 (expr -> ID = expr .)
    FOR             reduce using rule 25 (expr -> ID = expr .)
    '               shift and go to state 26
    +               shift and go to state 27
    -               shift and go to state 28
    *               shift and go to state 29
    /               shift and go to state 30
    MPLUS           shift and go to state 31
    MMINUS          shift and go to state 32
    MMLTP           shift and go to state 33
    MDIV            shift and go to state 34

  ! '               [ reduce using rule 25 (expr -> ID = expr .) ]
  ! +               [ reduce using rule 25 (expr -> ID = expr .) ]
  ! -               [ reduce using rule 25 (expr -> ID = expr .) ]
  ! *               [ reduce using rule 25 (expr -> ID = expr .) ]
  ! /               [ reduce using rule 25 (expr -> ID = expr .) ]
  ! MPLUS           [ reduce using rule 25 (expr -> ID = expr .) ]
  ! MMINUS          [ reduce using rule 25 (expr -> ID = expr .) ]
  ! MMLTP           [ reduce using rule 25 (expr -> ID = expr .) ]
  ! MDIV            [ reduce using rule 25 (expr -> ID = expr .) ]
  ! EQ              [ shift and go to state 35 ]
  ! NEQ             [ shift and go to state 36 ]
  ! GTEQ            [ shift and go to state 37 ]
  ! LTEQ            [ shift and go to state 38 ]
  ! >               [ shift and go to state 39 ]
  ! <               [ shift and go to state 40 ]


state 74

    (40) expr -> ID = ZEROS . ( expr )

    (               shift and go to state 94


state 75

    (41) expr -> ID = ONES . ( expr )

    (               shift and go to state 95


state 76

    (42) expr -> ID = EYE . ( expr )

    (               shift and go to state 96


state 77

    (26) expr -> ID PLUSASSIGN expr .
    (21) expr -> expr . '
    (43) expr -> expr . + expr
    (44) expr -> expr . - expr
    (45) expr -> expr . * expr
    (46) expr -> expr . / expr
    (47) expr -> expr . MPLUS expr
    (48) expr -> expr . MMINUS expr
    (49) expr -> expr . MMLTP expr
    (50) expr -> expr . MDIV expr
    (51) expr -> expr . EQ expr
    (52) expr -> expr . NEQ expr
    (53) expr -> expr . GTEQ expr
    (54) expr -> expr . LTEQ expr
    (55) expr -> expr . > expr
    (56) expr -> expr . < expr

    ;               reduce using rule 26 (expr -> ID PLUSASSIGN expr .)
    EQ              reduce using rule 26 (expr -> ID PLUSASSIGN expr .)
    NEQ             reduce using rule 26 (expr -> ID PLUSASSIGN expr .)
    GTEQ            reduce using rule 26 (expr -> ID PLUSASSIGN expr .)
    LTEQ            reduce using rule 26 (expr -> ID PLUSASSIGN expr .)
    >               reduce using rule 26 (expr -> ID PLUSASSIGN expr .)
    <               reduce using rule 26 (expr -> ID PLUSASSIGN expr .)
    )               reduce using rule 26 (expr -> ID PLUSASSIGN expr .)
    ]               reduce using rule 26 (expr -> ID PLUSASSIGN expr .)
    ,               reduce using rule 26 (expr -> ID PLUSASSIGN expr .)
    :               reduce using rule 26 (expr -> ID PLUSASSIGN expr .)
    {               reduce using rule 26 (expr -> ID PLUSASSIGN expr .)
    INTNUM          reduce using rule 26 (expr -> ID PLUSASSIGN expr .)
    FLOATNUM        reduce using rule 26 (expr -> ID PLUSASSIGN expr .)
    STRING          reduce using rule 26 (expr -> ID PLUSASSIGN expr .)
    ID              reduce using rule 26 (expr -> ID PLUSASSIGN expr .)
    (               reduce using rule 26 (expr -> ID PLUSASSIGN expr .)
    [               reduce using rule 26 (expr -> ID PLUSASSIGN expr .)
    BREAK           reduce using rule 26 (expr -> ID PLUSASSIGN expr .)
    CONTINUE        reduce using rule 26 (expr -> ID PLUSASSIGN expr .)
    RETURN          reduce using rule 26 (expr -> ID PLUSASSIGN expr .)
    PRINT           reduce using rule 26 (expr -> ID PLUSASSIGN expr .)
    IF              reduce using rule 26 (expr -> ID PLUSASSIGN expr .)
    WHILE           reduce using rule 26 (expr -> ID PLUSASSIGN expr .)
    FOR             reduce using rule 26 (expr -> ID PLUSASSIGN expr .)
    '               shift and go to state 26
    +               shift and go to state 27
    -               shift and go to state 28
    *               shift and go to state 29
    /               shift and go to state 30
    MPLUS           shift and go to state 31
    MMINUS          shift and go to state 32
    MMLTP           shift and go to state 33
    MDIV            shift and go to state 34

  ! '               [ reduce using rule 26 (expr -> ID PLUSASSIGN expr .) ]
  ! +               [ reduce using rule 26 (expr -> ID PLUSASSIGN expr .) ]
  ! -               [ reduce using rule 26 (expr -> ID PLUSASSIGN expr .) ]
  ! *               [ reduce using rule 26 (expr -> ID PLUSASSIGN expr .) ]
  ! /               [ reduce using rule 26 (expr -> ID PLUSASSIGN expr .) ]
  ! MPLUS           [ reduce using rule 26 (expr -> ID PLUSASSIGN expr .) ]
  ! MMINUS          [ reduce using rule 26 (expr -> ID PLUSASSIGN expr .) ]
  ! MMLTP           [ reduce using rule 26 (expr -> ID PLUSASSIGN expr .) ]
  ! MDIV            [ reduce using rule 26 (expr -> ID PLUSASSIGN expr .) ]
  ! EQ              [ shift and go to state 35 ]
  ! NEQ             [ shift and go to state 36 ]
  ! GTEQ            [ shift and go to state 37 ]
  ! LTEQ            [ shift and go to state 38 ]
  ! >               [ shift and go to state 39 ]
  ! <               [ shift and go to state 40 ]


state 78

    (27) expr -> ID MINASSIGN expr .
    (21) expr -> expr . '
    (43) expr -> expr . + expr
    (44) expr -> expr . - expr
    (45) expr -> expr . * expr
    (46) expr -> expr . / expr
    (47) expr -> expr . MPLUS expr
    (48) expr -> expr . MMINUS expr
    (49) expr -> expr . MMLTP expr
    (50) expr -> expr . MDIV expr
    (51) expr -> expr . EQ expr
    (52) expr -> expr . NEQ expr
    (53) expr -> expr . GTEQ expr
    (54) expr -> expr . LTEQ expr
    (55) expr -> expr . > expr
    (56) expr -> expr . < expr

    ;               reduce using rule 27 (expr -> ID MINASSIGN expr .)
    EQ              reduce using rule 27 (expr -> ID MINASSIGN expr .)
    NEQ             reduce using rule 27 (expr -> ID MINASSIGN expr .)
    GTEQ            reduce using rule 27 (expr -> ID MINASSIGN expr .)
    LTEQ            reduce using rule 27 (expr -> ID MINASSIGN expr .)
    >               reduce using rule 27 (expr -> ID MINASSIGN expr .)
    <               reduce using rule 27 (expr -> ID MINASSIGN expr .)
    )               reduce using rule 27 (expr -> ID MINASSIGN expr .)
    ]               reduce using rule 27 (expr -> ID MINASSIGN expr .)
    ,               reduce using rule 27 (expr -> ID MINASSIGN expr .)
    :               reduce using rule 27 (expr -> ID MINASSIGN expr .)
    {               reduce using rule 27 (expr -> ID MINASSIGN expr .)
    INTNUM          reduce using rule 27 (expr -> ID MINASSIGN expr .)
    FLOATNUM        reduce using rule 27 (expr -> ID MINASSIGN expr .)
    STRING          reduce using rule 27 (expr -> ID MINASSIGN expr .)
    ID              reduce using rule 27 (expr -> ID MINASSIGN expr .)
    (               reduce using rule 27 (expr -> ID MINASSIGN expr .)
    [               reduce using rule 27 (expr -> ID MINASSIGN expr .)
    BREAK           reduce using rule 27 (expr -> ID MINASSIGN expr .)
    CONTINUE        reduce using rule 27 (expr -> ID MINASSIGN expr .)
    RETURN          reduce using rule 27 (expr -> ID MINASSIGN expr .)
    PRINT           reduce using rule 27 (expr -> ID MINASSIGN expr .)
    IF              reduce using rule 27 (expr -> ID MINASSIGN expr .)
    WHILE           reduce using rule 27 (expr -> ID MINASSIGN expr .)
    FOR             reduce using rule 27 (expr -> ID MINASSIGN expr .)
    '               shift and go to state 26
    +               shift and go to state 27
    -               shift and go to state 28
    *               shift and go to state 29
    /               shift and go to state 30
    MPLUS           shift and go to state 31
    MMINUS          shift and go to state 32
    MMLTP           shift and go to state 33
    MDIV            shift and go to state 34

  ! '               [ reduce using rule 27 (expr -> ID MINASSIGN expr .) ]
  ! +               [ reduce using rule 27 (expr -> ID MINASSIGN expr .) ]
  ! -               [ reduce using rule 27 (expr -> ID MINASSIGN expr .) ]
  ! *               [ reduce using rule 27 (expr -> ID MINASSIGN expr .) ]
  ! /               [ reduce using rule 27 (expr -> ID MINASSIGN expr .) ]
  ! MPLUS           [ reduce using rule 27 (expr -> ID MINASSIGN expr .) ]
  ! MMINUS          [ reduce using rule 27 (expr -> ID MINASSIGN expr .) ]
  ! MMLTP           [ reduce using rule 27 (expr -> ID MINASSIGN expr .) ]
  ! MDIV            [ reduce using rule 27 (expr -> ID MINASSIGN expr .) ]
  ! EQ              [ shift and go to state 35 ]
  ! NEQ             [ shift and go to state 36 ]
  ! GTEQ            [ shift and go to state 37 ]
  ! LTEQ            [ shift and go to state 38 ]
  ! >               [ shift and go to state 39 ]
  ! <               [ shift and go to state 40 ]


state 79

    (28) expr -> ID MULTASSIGN expr .
    (21) expr -> expr . '
    (43) expr -> expr . + expr
    (44) expr -> expr . - expr
    (45) expr -> expr . * expr
    (46) expr -> expr . / expr
    (47) expr -> expr . MPLUS expr
    (48) expr -> expr . MMINUS expr
    (49) expr -> expr . MMLTP expr
    (50) expr -> expr . MDIV expr
    (51) expr -> expr . EQ expr
    (52) expr -> expr . NEQ expr
    (53) expr -> expr . GTEQ expr
    (54) expr -> expr . LTEQ expr
    (55) expr -> expr . > expr
    (56) expr -> expr . < expr

    ;               reduce using rule 28 (expr -> ID MULTASSIGN expr .)
    EQ              reduce using rule 28 (expr -> ID MULTASSIGN expr .)
    NEQ             reduce using rule 28 (expr -> ID MULTASSIGN expr .)
    GTEQ            reduce using rule 28 (expr -> ID MULTASSIGN expr .)
    LTEQ            reduce using rule 28 (expr -> ID MULTASSIGN expr .)
    >               reduce using rule 28 (expr -> ID MULTASSIGN expr .)
    <               reduce using rule 28 (expr -> ID MULTASSIGN expr .)
    )               reduce using rule 28 (expr -> ID MULTASSIGN expr .)
    ]               reduce using rule 28 (expr -> ID MULTASSIGN expr .)
    ,               reduce using rule 28 (expr -> ID MULTASSIGN expr .)
    :               reduce using rule 28 (expr -> ID MULTASSIGN expr .)
    {               reduce using rule 28 (expr -> ID MULTASSIGN expr .)
    INTNUM          reduce using rule 28 (expr -> ID MULTASSIGN expr .)
    FLOATNUM        reduce using rule 28 (expr -> ID MULTASSIGN expr .)
    STRING          reduce using rule 28 (expr -> ID MULTASSIGN expr .)
    ID              reduce using rule 28 (expr -> ID MULTASSIGN expr .)
    (               reduce using rule 28 (expr -> ID MULTASSIGN expr .)
    [               reduce using rule 28 (expr -> ID MULTASSIGN expr .)
    BREAK           reduce using rule 28 (expr -> ID MULTASSIGN expr .)
    CONTINUE        reduce using rule 28 (expr -> ID MULTASSIGN expr .)
    RETURN          reduce using rule 28 (expr -> ID MULTASSIGN expr .)
    PRINT           reduce using rule 28 (expr -> ID MULTASSIGN expr .)
    IF              reduce using rule 28 (expr -> ID MULTASSIGN expr .)
    WHILE           reduce using rule 28 (expr -> ID MULTASSIGN expr .)
    FOR             reduce using rule 28 (expr -> ID MULTASSIGN expr .)
    '               shift and go to state 26
    +               shift and go to state 27
    -               shift and go to state 28
    *               shift and go to state 29
    /               shift and go to state 30
    MPLUS           shift and go to state 31
    MMINUS          shift and go to state 32
    MMLTP           shift and go to state 33
    MDIV            shift and go to state 34

  ! '               [ reduce using rule 28 (expr -> ID MULTASSIGN expr .) ]
  ! +               [ reduce using rule 28 (expr -> ID MULTASSIGN expr .) ]
  ! -               [ reduce using rule 28 (expr -> ID MULTASSIGN expr .) ]
  ! *               [ reduce using rule 28 (expr -> ID MULTASSIGN expr .) ]
  ! /               [ reduce using rule 28 (expr -> ID MULTASSIGN expr .) ]
  ! MPLUS           [ reduce using rule 28 (expr -> ID MULTASSIGN expr .) ]
  ! MMINUS          [ reduce using rule 28 (expr -> ID MULTASSIGN expr .) ]
  ! MMLTP           [ reduce using rule 28 (expr -> ID MULTASSIGN expr .) ]
  ! MDIV            [ reduce using rule 28 (expr -> ID MULTASSIGN expr .) ]
  ! EQ              [ shift and go to state 35 ]
  ! NEQ             [ shift and go to state 36 ]
  ! GTEQ            [ shift and go to state 37 ]
  ! LTEQ            [ shift and go to state 38 ]
  ! >               [ shift and go to state 39 ]
  ! <               [ shift and go to state 40 ]


state 80

    (29) expr -> ID DIVASSIGN expr .
    (21) expr -> expr . '
    (43) expr -> expr . + expr
    (44) expr -> expr . - expr
    (45) expr -> expr . * expr
    (46) expr -> expr . / expr
    (47) expr -> expr . MPLUS expr
    (48) expr -> expr . MMINUS expr
    (49) expr -> expr . MMLTP expr
    (50) expr -> expr . MDIV expr
    (51) expr -> expr . EQ expr
    (52) expr -> expr . NEQ expr
    (53) expr -> expr . GTEQ expr
    (54) expr -> expr . LTEQ expr
    (55) expr -> expr . > expr
    (56) expr -> expr . < expr

    ;               reduce using rule 29 (expr -> ID DIVASSIGN expr .)
    EQ              reduce using rule 29 (expr -> ID DIVASSIGN expr .)
    NEQ             reduce using rule 29 (expr -> ID DIVASSIGN expr .)
    GTEQ            reduce using rule 29 (expr -> ID DIVASSIGN expr .)
    LTEQ            reduce using rule 29 (expr -> ID DIVASSIGN expr .)
    >               reduce using rule 29 (expr -> ID DIVASSIGN expr .)
    <               reduce using rule 29 (expr -> ID DIVASSIGN expr .)
    )               reduce using rule 29 (expr -> ID DIVASSIGN expr .)
    ]               reduce using rule 29 (expr -> ID DIVASSIGN expr .)
    ,               reduce using rule 29 (expr -> ID DIVASSIGN expr .)
    :               reduce using rule 29 (expr -> ID DIVASSIGN expr .)
    {               reduce using rule 29 (expr -> ID DIVASSIGN expr .)
    INTNUM          reduce using rule 29 (expr -> ID DIVASSIGN expr .)
    FLOATNUM        reduce using rule 29 (expr -> ID DIVASSIGN expr .)
    STRING          reduce using rule 29 (expr -> ID DIVASSIGN expr .)
    ID              reduce using rule 29 (expr -> ID DIVASSIGN expr .)
    (               reduce using rule 29 (expr -> ID DIVASSIGN expr .)
    [               reduce using rule 29 (expr -> ID DIVASSIGN expr .)
    BREAK           reduce using rule 29 (expr -> ID DIVASSIGN expr .)
    CONTINUE        reduce using rule 29 (expr -> ID DIVASSIGN expr .)
    RETURN          reduce using rule 29 (expr -> ID DIVASSIGN expr .)
    PRINT           reduce using rule 29 (expr -> ID DIVASSIGN expr .)
    IF              reduce using rule 29 (expr -> ID DIVASSIGN expr .)
    WHILE           reduce using rule 29 (expr -> ID DIVASSIGN expr .)
    FOR             reduce using rule 29 (expr -> ID DIVASSIGN expr .)
    '               shift and go to state 26
    +               shift and go to state 27
    -               shift and go to state 28
    *               shift and go to state 29
    /               shift and go to state 30
    MPLUS           shift and go to state 31
    MMINUS          shift and go to state 32
    MMLTP           shift and go to state 33
    MDIV            shift and go to state 34

  ! '               [ reduce using rule 29 (expr -> ID DIVASSIGN expr .) ]
  ! +               [ reduce using rule 29 (expr -> ID DIVASSIGN expr .) ]
  ! -               [ reduce using rule 29 (expr -> ID DIVASSIGN expr .) ]
  ! *               [ reduce using rule 29 (expr -> ID DIVASSIGN expr .) ]
  ! /               [ reduce using rule 29 (expr -> ID DIVASSIGN expr .) ]
  ! MPLUS           [ reduce using rule 29 (expr -> ID DIVASSIGN expr .) ]
  ! MMINUS          [ reduce using rule 29 (expr -> ID DIVASSIGN expr .) ]
  ! MMLTP           [ reduce using rule 29 (expr -> ID DIVASSIGN expr .) ]
  ! MDIV            [ reduce using rule 29 (expr -> ID DIVASSIGN expr .) ]
  ! EQ              [ shift and go to state 35 ]
  ! NEQ             [ shift and go to state 36 ]
  ! GTEQ            [ shift and go to state 37 ]
  ! LTEQ            [ shift and go to state 38 ]
  ! >               [ shift and go to state 39 ]
  ! <               [ shift and go to state 40 ]


state 81

    (30) expr -> ID [ expr . ] = expr
    (31) expr -> ID [ expr . ] PLUSASSIGN expr
    (32) expr -> ID [ expr . ] MINASSIGN expr
    (33) expr -> ID [ expr . ] MULTASSIGN expr
    (34) expr -> ID [ expr . ] DIVASSIGN expr
    (35) expr -> ID [ expr . , expr ] = expr
    (36) expr -> ID [ expr . , expr ] PLUSASSIGN expr
    (37) expr -> ID [ expr . , expr ] MINASSIGN expr
    (38) expr -> ID [ expr . , expr ] MULTASSIGN expr
    (39) expr -> ID [ expr . , expr ] DIVASSIGN expr
    (21) expr -> expr . '
    (43) expr -> expr . + expr
    (44) expr -> expr . - expr
    (45) expr -> expr . * expr
    (46) expr -> expr . / expr
    (47) expr -> expr . MPLUS expr
    (48) expr -> expr . MMINUS expr
    (49) expr -> expr . MMLTP expr
    (50) expr -> expr . MDIV expr
    (51) expr -> expr . EQ expr
    (52) expr -> expr . NEQ expr
    (53) expr -> expr . GTEQ expr
    (54) expr -> expr . LTEQ expr
    (55) expr -> expr . > expr
    (56) expr -> expr . < expr

    ]               shift and go to state 97
    ,               shift and go to state 98
    '               shift and go to state 26
    +               shift and go to state 27
    -               shift and go to state 28
    *               shift and go to state 29
    /               shift and go to state 30
    MPLUS           shift and go to state 31
    MMINUS          shift and go to state 32
    MMLTP           shift and go to state 33
    MDIV            shift and go to state 34
    EQ              shift and go to state 35
    NEQ             shift and go to state 36
    GTEQ            shift and go to state 37
    LTEQ            shift and go to state 38
    >               shift and go to state 39
    <               shift and go to state 40


state 82

    (19) expr -> ( expr ) .

    ;               reduce using rule 19 (expr -> ( expr ) .)
    '               reduce using rule 19 (expr -> ( expr ) .)
    +               reduce using rule 19 (expr -> ( expr ) .)
    -               reduce using rule 19 (expr -> ( expr ) .)
    *               reduce using rule 19 (expr -> ( expr ) .)
    /               reduce using rule 19 (expr -> ( expr ) .)
    MPLUS           reduce using rule 19 (expr -> ( expr ) .)
    MMINUS          reduce using rule 19 (expr -> ( expr ) .)
    MMLTP           reduce using rule 19 (expr -> ( expr ) .)
    MDIV            reduce using rule 19 (expr -> ( expr ) .)
    EQ              reduce using rule 19 (expr -> ( expr ) .)
    NEQ             reduce using rule 19 (expr -> ( expr ) .)
    GTEQ            reduce using rule 19 (expr -> ( expr ) .)
    LTEQ            reduce using rule 19 (expr -> ( expr ) .)
    >               reduce using rule 19 (expr -> ( expr ) .)
    <               reduce using rule 19 (expr -> ( expr ) .)
    )               reduce using rule 19 (expr -> ( expr ) .)
    ]               reduce using rule 19 (expr -> ( expr ) .)
    ,               reduce using rule 19 (expr -> ( expr ) .)
    :               reduce using rule 19 (expr -> ( expr ) .)
    {               reduce using rule 19 (expr -> ( expr ) .)
    INTNUM          reduce using rule 19 (expr -> ( expr ) .)
    FLOATNUM        reduce using rule 19 (expr -> ( expr ) .)
    STRING          reduce using rule 19 (expr -> ( expr ) .)
    ID              reduce using rule 19 (expr -> ( expr ) .)
    (               reduce using rule 19 (expr -> ( expr ) .)
    [               reduce using rule 19 (expr -> ( expr ) .)
    BREAK           reduce using rule 19 (expr -> ( expr ) .)
    CONTINUE        reduce using rule 19 (expr -> ( expr ) .)
    RETURN          reduce using rule 19 (expr -> ( expr ) .)
    PRINT           reduce using rule 19 (expr -> ( expr ) .)
    IF              reduce using rule 19 (expr -> ( expr ) .)
    WHILE           reduce using rule 19 (expr -> ( expr ) .)
    FOR             reduce using rule 19 (expr -> ( expr ) .)


state 83

    (24) expr -> [ array_interior ] .

    ;               reduce using rule 24 (expr -> [ array_interior ] .)
    '               reduce using rule 24 (expr -> [ array_interior ] .)
    +               reduce using rule 24 (expr -> [ array_interior ] .)
    -               reduce using rule 24 (expr -> [ array_interior ] .)
    *               reduce using rule 24 (expr -> [ array_interior ] .)
    /               reduce using rule 24 (expr -> [ array_interior ] .)
    MPLUS           reduce using rule 24 (expr -> [ array_interior ] .)
    MMINUS          reduce using rule 24 (expr -> [ array_interior ] .)
    MMLTP           reduce using rule 24 (expr -> [ array_interior ] .)
    MDIV            reduce using rule 24 (expr -> [ array_interior ] .)
    EQ              reduce using rule 24 (expr -> [ array_interior ] .)
    NEQ             reduce using rule 24 (expr -> [ array_interior ] .)
    GTEQ            reduce using rule 24 (expr -> [ array_interior ] .)
    LTEQ            reduce using rule 24 (expr -> [ array_interior ] .)
    >               reduce using rule 24 (expr -> [ array_interior ] .)
    <               reduce using rule 24 (expr -> [ array_interior ] .)
    )               reduce using rule 24 (expr -> [ array_interior ] .)
    ]               reduce using rule 24 (expr -> [ array_interior ] .)
    ,               reduce using rule 24 (expr -> [ array_interior ] .)
    :               reduce using rule 24 (expr -> [ array_interior ] .)
    {               reduce using rule 24 (expr -> [ array_interior ] .)
    INTNUM          reduce using rule 24 (expr -> [ array_interior ] .)
    FLOATNUM        reduce using rule 24 (expr -> [ array_interior ] .)
    STRING          reduce using rule 24 (expr -> [ array_interior ] .)
    ID              reduce using rule 24 (expr -> [ array_interior ] .)
    (               reduce using rule 24 (expr -> [ array_interior ] .)
    [               reduce using rule 24 (expr -> [ array_interior ] .)
    BREAK           reduce using rule 24 (expr -> [ array_interior ] .)
    CONTINUE        reduce using rule 24 (expr -> [ array_interior ] .)
    RETURN          reduce using rule 24 (expr -> [ array_interior ] .)
    PRINT           reduce using rule 24 (expr -> [ array_interior ] .)
    IF              reduce using rule 24 (expr -> [ array_interior ] .)
    WHILE           reduce using rule 24 (expr -> [ array_interior ] .)
    FOR             reduce using rule 24 (expr -> [ array_interior ] .)


state 84

    (22) array_interior -> array_interior , . expr
    (15) expr -> . INTNUM
    (16) expr -> . FLOATNUM
    (17) expr -> . STRING
    (18) expr -> . ID
    (19) expr -> . ( expr )
    (20) expr -> . - expr
    (21) expr -> . expr '
    (24) expr -> . [ array_interior ]
    (25) expr -> . ID = expr
    (26) expr -> . ID PLUSASSIGN expr
    (27) expr -> . ID MINASSIGN expr
    (28) expr -> . ID MULTASSIGN expr
    (29) expr -> . ID DIVASSIGN expr
    (30) expr -> . ID [ expr ] = expr
    (31) expr -> . ID [ expr ] PLUSASSIGN expr
    (32) expr -> . ID [ expr ] MINASSIGN expr
    (33) expr -> . ID [ expr ] MULTASSIGN expr
    (34) expr -> . ID [ expr ] DIVASSIGN expr
    (35) expr -> . ID [ expr , expr ] = expr
    (36) expr -> . ID [ expr , expr ] PLUSASSIGN expr
    (37) expr -> . ID [ expr , expr ] MINASSIGN expr
    (38) expr -> . ID [ expr , expr ] MULTASSIGN expr
    (39) expr -> . ID [ expr , expr ] DIVASSIGN expr
    (40) expr -> . ID = ZEROS ( expr )
    (41) expr -> . ID = ONES ( expr )
    (42) expr -> . ID = EYE ( expr )
    (43) expr -> . expr + expr
    (44) expr -> . expr - expr
    (45) expr -> . expr * expr
    (46) expr -> . expr / expr
    (47) expr -> . expr MPLUS expr
    (48) expr -> . expr MMINUS expr
    (49) expr -> . expr MMLTP expr
    (50) expr -> . expr MDIV expr
    (51) expr -> . expr EQ expr
    (52) expr -> . expr NEQ expr
    (53) expr -> . expr GTEQ expr
    (54) expr -> . expr LTEQ expr
    (55) expr -> . expr > expr
    (56) expr -> . expr < expr

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ID              shift and go to state 10
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13

    expr                           shift and go to state 99

state 85

    (63) cond_if -> cond_if ELSE cond_block .

    ELSE            reduce using rule 63 (cond_if -> cond_if ELSE cond_block .)
    {               reduce using rule 63 (cond_if -> cond_if ELSE cond_block .)
    INTNUM          reduce using rule 63 (cond_if -> cond_if ELSE cond_block .)
    FLOATNUM        reduce using rule 63 (cond_if -> cond_if ELSE cond_block .)
    STRING          reduce using rule 63 (cond_if -> cond_if ELSE cond_block .)
    ID              reduce using rule 63 (cond_if -> cond_if ELSE cond_block .)
    (               reduce using rule 63 (cond_if -> cond_if ELSE cond_block .)
    -               reduce using rule 63 (cond_if -> cond_if ELSE cond_block .)
    [               reduce using rule 63 (cond_if -> cond_if ELSE cond_block .)
    RETURN          reduce using rule 63 (cond_if -> cond_if ELSE cond_block .)
    PRINT           reduce using rule 63 (cond_if -> cond_if ELSE cond_block .)
    IF              reduce using rule 63 (cond_if -> cond_if ELSE cond_block .)
    WHILE           reduce using rule 63 (cond_if -> cond_if ELSE cond_block .)
    FOR             reduce using rule 63 (cond_if -> cond_if ELSE cond_block .)
    $end            reduce using rule 63 (cond_if -> cond_if ELSE cond_block .)
    }               reduce using rule 63 (cond_if -> cond_if ELSE cond_block .)


state 86

    (60) cond_block -> struct .

    ELSE            reduce using rule 60 (cond_block -> struct .)
    {               reduce using rule 60 (cond_block -> struct .)
    INTNUM          reduce using rule 60 (cond_block -> struct .)
    FLOATNUM        reduce using rule 60 (cond_block -> struct .)
    STRING          reduce using rule 60 (cond_block -> struct .)
    ID              reduce using rule 60 (cond_block -> struct .)
    (               reduce using rule 60 (cond_block -> struct .)
    -               reduce using rule 60 (cond_block -> struct .)
    [               reduce using rule 60 (cond_block -> struct .)
    RETURN          reduce using rule 60 (cond_block -> struct .)
    PRINT           reduce using rule 60 (cond_block -> struct .)
    IF              reduce using rule 60 (cond_block -> struct .)
    WHILE           reduce using rule 60 (cond_block -> struct .)
    FOR             reduce using rule 60 (cond_block -> struct .)
    $end            reduce using rule 60 (cond_block -> struct .)
    }               reduce using rule 60 (cond_block -> struct .)


state 87

    (61) cond_block -> { . start }
    (1) start -> . struct
    (2) start -> . start struct
    (3) start -> . { start }
    (4) start -> . start { start }
    (5) struct -> . expr ;
    (6) struct -> . cond_expr
    (7) struct -> . instruction
    (15) expr -> . INTNUM
    (16) expr -> . FLOATNUM
    (17) expr -> . STRING
    (18) expr -> . ID
    (19) expr -> . ( expr )
    (20) expr -> . - expr
    (21) expr -> . expr '
    (24) expr -> . [ array_interior ]
    (25) expr -> . ID = expr
    (26) expr -> . ID PLUSASSIGN expr
    (27) expr -> . ID MINASSIGN expr
    (28) expr -> . ID MULTASSIGN expr
    (29) expr -> . ID DIVASSIGN expr
    (30) expr -> . ID [ expr ] = expr
    (31) expr -> . ID [ expr ] PLUSASSIGN expr
    (32) expr -> . ID [ expr ] MINASSIGN expr
    (33) expr -> . ID [ expr ] MULTASSIGN expr
    (34) expr -> . ID [ expr ] DIVASSIGN expr
    (35) expr -> . ID [ expr , expr ] = expr
    (36) expr -> . ID [ expr , expr ] PLUSASSIGN expr
    (37) expr -> . ID [ expr , expr ] MINASSIGN expr
    (38) expr -> . ID [ expr , expr ] MULTASSIGN expr
    (39) expr -> . ID [ expr , expr ] DIVASSIGN expr
    (40) expr -> . ID = ZEROS ( expr )
    (41) expr -> . ID = ONES ( expr )
    (42) expr -> . ID = EYE ( expr )
    (43) expr -> . expr + expr
    (44) expr -> . expr - expr
    (45) expr -> . expr * expr
    (46) expr -> . expr / expr
    (47) expr -> . expr MPLUS expr
    (48) expr -> . expr MMINUS expr
    (49) expr -> . expr MMLTP expr
    (50) expr -> . expr MDIV expr
    (51) expr -> . expr EQ expr
    (52) expr -> . expr NEQ expr
    (53) expr -> . expr GTEQ expr
    (54) expr -> . expr LTEQ expr
    (55) expr -> . expr > expr
    (56) expr -> . expr < expr
    (57) cond_expr -> . cond_if
    (58) cond_expr -> . cond_while
    (59) cond_expr -> . cond_for
    (73) instruction -> . RETURN expr ;
    (74) instruction -> . PRINT array_interior ;
    (62) cond_if -> . IF ( expr ) cond_block
    (63) cond_if -> . cond_if ELSE cond_block
    (71) cond_while -> . WHILE ( expr ) loop_cond_block
    (72) cond_for -> . FOR ID = expr : expr loop_cond_block

    {               shift and go to state 3
    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ID              shift and go to state 10
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13
    RETURN          shift and go to state 17
    PRINT           shift and go to state 18
    IF              shift and go to state 19
    WHILE           shift and go to state 20
    FOR             shift and go to state 21

    start                          shift and go to state 100
    struct                         shift and go to state 2
    expr                           shift and go to state 4
    cond_expr                      shift and go to state 5
    instruction                    shift and go to state 6
    cond_if                        shift and go to state 14
    cond_while                     shift and go to state 15
    cond_for                       shift and go to state 16

state 88

    (73) instruction -> RETURN expr ; .

    {               reduce using rule 73 (instruction -> RETURN expr ; .)
    INTNUM          reduce using rule 73 (instruction -> RETURN expr ; .)
    FLOATNUM        reduce using rule 73 (instruction -> RETURN expr ; .)
    STRING          reduce using rule 73 (instruction -> RETURN expr ; .)
    ID              reduce using rule 73 (instruction -> RETURN expr ; .)
    (               reduce using rule 73 (instruction -> RETURN expr ; .)
    -               reduce using rule 73 (instruction -> RETURN expr ; .)
    [               reduce using rule 73 (instruction -> RETURN expr ; .)
    RETURN          reduce using rule 73 (instruction -> RETURN expr ; .)
    PRINT           reduce using rule 73 (instruction -> RETURN expr ; .)
    IF              reduce using rule 73 (instruction -> RETURN expr ; .)
    WHILE           reduce using rule 73 (instruction -> RETURN expr ; .)
    FOR             reduce using rule 73 (instruction -> RETURN expr ; .)
    $end            reduce using rule 73 (instruction -> RETURN expr ; .)
    }               reduce using rule 73 (instruction -> RETURN expr ; .)
    ELSE            reduce using rule 73 (instruction -> RETURN expr ; .)


state 89

    (74) instruction -> PRINT array_interior ; .

    {               reduce using rule 74 (instruction -> PRINT array_interior ; .)
    INTNUM          reduce using rule 74 (instruction -> PRINT array_interior ; .)
    FLOATNUM        reduce using rule 74 (instruction -> PRINT array_interior ; .)
    STRING          reduce using rule 74 (instruction -> PRINT array_interior ; .)
    ID              reduce using rule 74 (instruction -> PRINT array_interior ; .)
    (               reduce using rule 74 (instruction -> PRINT array_interior ; .)
    -               reduce using rule 74 (instruction -> PRINT array_interior ; .)
    [               reduce using rule 74 (instruction -> PRINT array_interior ; .)
    RETURN          reduce using rule 74 (instruction -> PRINT array_interior ; .)
    PRINT           reduce using rule 74 (instruction -> PRINT array_interior ; .)
    IF              reduce using rule 74 (instruction -> PRINT array_interior ; .)
    WHILE           reduce using rule 74 (instruction -> PRINT array_interior ; .)
    FOR             reduce using rule 74 (instruction -> PRINT array_interior ; .)
    $end            reduce using rule 74 (instruction -> PRINT array_interior ; .)
    }               reduce using rule 74 (instruction -> PRINT array_interior ; .)
    ELSE            reduce using rule 74 (instruction -> PRINT array_interior ; .)


state 90

    (62) cond_if -> IF ( expr . ) cond_block
    (21) expr -> expr . '
    (43) expr -> expr . + expr
    (44) expr -> expr . - expr
    (45) expr -> expr . * expr
    (46) expr -> expr . / expr
    (47) expr -> expr . MPLUS expr
    (48) expr -> expr . MMINUS expr
    (49) expr -> expr . MMLTP expr
    (50) expr -> expr . MDIV expr
    (51) expr -> expr . EQ expr
    (52) expr -> expr . NEQ expr
    (53) expr -> expr . GTEQ expr
    (54) expr -> expr . LTEQ expr
    (55) expr -> expr . > expr
    (56) expr -> expr . < expr

    )               shift and go to state 101
    '               shift and go to state 26
    +               shift and go to state 27
    -               shift and go to state 28
    *               shift and go to state 29
    /               shift and go to state 30
    MPLUS           shift and go to state 31
    MMINUS          shift and go to state 32
    MMLTP           shift and go to state 33
    MDIV            shift and go to state 34
    EQ              shift and go to state 35
    NEQ             shift and go to state 36
    GTEQ            shift and go to state 37
    LTEQ            shift and go to state 38
    >               shift and go to state 39
    <               shift and go to state 40


state 91

    (71) cond_while -> WHILE ( expr . ) loop_cond_block
    (21) expr -> expr . '
    (43) expr -> expr . + expr
    (44) expr -> expr . - expr
    (45) expr -> expr . * expr
    (46) expr -> expr . / expr
    (47) expr -> expr . MPLUS expr
    (48) expr -> expr . MMINUS expr
    (49) expr -> expr . MMLTP expr
    (50) expr -> expr . MDIV expr
    (51) expr -> expr . EQ expr
    (52) expr -> expr . NEQ expr
    (53) expr -> expr . GTEQ expr
    (54) expr -> expr . LTEQ expr
    (55) expr -> expr . > expr
    (56) expr -> expr . < expr

    )               shift and go to state 102
    '               shift and go to state 26
    +               shift and go to state 27
    -               shift and go to state 28
    *               shift and go to state 29
    /               shift and go to state 30
    MPLUS           shift and go to state 31
    MMINUS          shift and go to state 32
    MMLTP           shift and go to state 33
    MDIV            shift and go to state 34
    EQ              shift and go to state 35
    NEQ             shift and go to state 36
    GTEQ            shift and go to state 37
    LTEQ            shift and go to state 38
    >               shift and go to state 39
    <               shift and go to state 40


state 92

    (72) cond_for -> FOR ID = . expr : expr loop_cond_block
    (15) expr -> . INTNUM
    (16) expr -> . FLOATNUM
    (17) expr -> . STRING
    (18) expr -> . ID
    (19) expr -> . ( expr )
    (20) expr -> . - expr
    (21) expr -> . expr '
    (24) expr -> . [ array_interior ]
    (25) expr -> . ID = expr
    (26) expr -> . ID PLUSASSIGN expr
    (27) expr -> . ID MINASSIGN expr
    (28) expr -> . ID MULTASSIGN expr
    (29) expr -> . ID DIVASSIGN expr
    (30) expr -> . ID [ expr ] = expr
    (31) expr -> . ID [ expr ] PLUSASSIGN expr
    (32) expr -> . ID [ expr ] MINASSIGN expr
    (33) expr -> . ID [ expr ] MULTASSIGN expr
    (34) expr -> . ID [ expr ] DIVASSIGN expr
    (35) expr -> . ID [ expr , expr ] = expr
    (36) expr -> . ID [ expr , expr ] PLUSASSIGN expr
    (37) expr -> . ID [ expr , expr ] MINASSIGN expr
    (38) expr -> . ID [ expr , expr ] MULTASSIGN expr
    (39) expr -> . ID [ expr , expr ] DIVASSIGN expr
    (40) expr -> . ID = ZEROS ( expr )
    (41) expr -> . ID = ONES ( expr )
    (42) expr -> . ID = EYE ( expr )
    (43) expr -> . expr + expr
    (44) expr -> . expr - expr
    (45) expr -> . expr * expr
    (46) expr -> . expr / expr
    (47) expr -> . expr MPLUS expr
    (48) expr -> . expr MMINUS expr
    (49) expr -> . expr MMLTP expr
    (50) expr -> . expr MDIV expr
    (51) expr -> . expr EQ expr
    (52) expr -> . expr NEQ expr
    (53) expr -> . expr GTEQ expr
    (54) expr -> . expr LTEQ expr
    (55) expr -> . expr > expr
    (56) expr -> . expr < expr

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ID              shift and go to state 10
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13

    expr                           shift and go to state 103

state 93

    (4) start -> start { start } .

    {               reduce using rule 4 (start -> start { start } .)
    INTNUM          reduce using rule 4 (start -> start { start } .)
    FLOATNUM        reduce using rule 4 (start -> start { start } .)
    STRING          reduce using rule 4 (start -> start { start } .)
    ID              reduce using rule 4 (start -> start { start } .)
    (               reduce using rule 4 (start -> start { start } .)
    -               reduce using rule 4 (start -> start { start } .)
    [               reduce using rule 4 (start -> start { start } .)
    RETURN          reduce using rule 4 (start -> start { start } .)
    PRINT           reduce using rule 4 (start -> start { start } .)
    IF              reduce using rule 4 (start -> start { start } .)
    WHILE           reduce using rule 4 (start -> start { start } .)
    FOR             reduce using rule 4 (start -> start { start } .)
    $end            reduce using rule 4 (start -> start { start } .)
    }               reduce using rule 4 (start -> start { start } .)


state 94

    (40) expr -> ID = ZEROS ( . expr )
    (15) expr -> . INTNUM
    (16) expr -> . FLOATNUM
    (17) expr -> . STRING
    (18) expr -> . ID
    (19) expr -> . ( expr )
    (20) expr -> . - expr
    (21) expr -> . expr '
    (24) expr -> . [ array_interior ]
    (25) expr -> . ID = expr
    (26) expr -> . ID PLUSASSIGN expr
    (27) expr -> . ID MINASSIGN expr
    (28) expr -> . ID MULTASSIGN expr
    (29) expr -> . ID DIVASSIGN expr
    (30) expr -> . ID [ expr ] = expr
    (31) expr -> . ID [ expr ] PLUSASSIGN expr
    (32) expr -> . ID [ expr ] MINASSIGN expr
    (33) expr -> . ID [ expr ] MULTASSIGN expr
    (34) expr -> . ID [ expr ] DIVASSIGN expr
    (35) expr -> . ID [ expr , expr ] = expr
    (36) expr -> . ID [ expr , expr ] PLUSASSIGN expr
    (37) expr -> . ID [ expr , expr ] MINASSIGN expr
    (38) expr -> . ID [ expr , expr ] MULTASSIGN expr
    (39) expr -> . ID [ expr , expr ] DIVASSIGN expr
    (40) expr -> . ID = ZEROS ( expr )
    (41) expr -> . ID = ONES ( expr )
    (42) expr -> . ID = EYE ( expr )
    (43) expr -> . expr + expr
    (44) expr -> . expr - expr
    (45) expr -> . expr * expr
    (46) expr -> . expr / expr
    (47) expr -> . expr MPLUS expr
    (48) expr -> . expr MMINUS expr
    (49) expr -> . expr MMLTP expr
    (50) expr -> . expr MDIV expr
    (51) expr -> . expr EQ expr
    (52) expr -> . expr NEQ expr
    (53) expr -> . expr GTEQ expr
    (54) expr -> . expr LTEQ expr
    (55) expr -> . expr > expr
    (56) expr -> . expr < expr

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ID              shift and go to state 10
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13

    expr                           shift and go to state 104

state 95

    (41) expr -> ID = ONES ( . expr )
    (15) expr -> . INTNUM
    (16) expr -> . FLOATNUM
    (17) expr -> . STRING
    (18) expr -> . ID
    (19) expr -> . ( expr )
    (20) expr -> . - expr
    (21) expr -> . expr '
    (24) expr -> . [ array_interior ]
    (25) expr -> . ID = expr
    (26) expr -> . ID PLUSASSIGN expr
    (27) expr -> . ID MINASSIGN expr
    (28) expr -> . ID MULTASSIGN expr
    (29) expr -> . ID DIVASSIGN expr
    (30) expr -> . ID [ expr ] = expr
    (31) expr -> . ID [ expr ] PLUSASSIGN expr
    (32) expr -> . ID [ expr ] MINASSIGN expr
    (33) expr -> . ID [ expr ] MULTASSIGN expr
    (34) expr -> . ID [ expr ] DIVASSIGN expr
    (35) expr -> . ID [ expr , expr ] = expr
    (36) expr -> . ID [ expr , expr ] PLUSASSIGN expr
    (37) expr -> . ID [ expr , expr ] MINASSIGN expr
    (38) expr -> . ID [ expr , expr ] MULTASSIGN expr
    (39) expr -> . ID [ expr , expr ] DIVASSIGN expr
    (40) expr -> . ID = ZEROS ( expr )
    (41) expr -> . ID = ONES ( expr )
    (42) expr -> . ID = EYE ( expr )
    (43) expr -> . expr + expr
    (44) expr -> . expr - expr
    (45) expr -> . expr * expr
    (46) expr -> . expr / expr
    (47) expr -> . expr MPLUS expr
    (48) expr -> . expr MMINUS expr
    (49) expr -> . expr MMLTP expr
    (50) expr -> . expr MDIV expr
    (51) expr -> . expr EQ expr
    (52) expr -> . expr NEQ expr
    (53) expr -> . expr GTEQ expr
    (54) expr -> . expr LTEQ expr
    (55) expr -> . expr > expr
    (56) expr -> . expr < expr

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ID              shift and go to state 10
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13

    expr                           shift and go to state 105

state 96

    (42) expr -> ID = EYE ( . expr )
    (15) expr -> . INTNUM
    (16) expr -> . FLOATNUM
    (17) expr -> . STRING
    (18) expr -> . ID
    (19) expr -> . ( expr )
    (20) expr -> . - expr
    (21) expr -> . expr '
    (24) expr -> . [ array_interior ]
    (25) expr -> . ID = expr
    (26) expr -> . ID PLUSASSIGN expr
    (27) expr -> . ID MINASSIGN expr
    (28) expr -> . ID MULTASSIGN expr
    (29) expr -> . ID DIVASSIGN expr
    (30) expr -> . ID [ expr ] = expr
    (31) expr -> . ID [ expr ] PLUSASSIGN expr
    (32) expr -> . ID [ expr ] MINASSIGN expr
    (33) expr -> . ID [ expr ] MULTASSIGN expr
    (34) expr -> . ID [ expr ] DIVASSIGN expr
    (35) expr -> . ID [ expr , expr ] = expr
    (36) expr -> . ID [ expr , expr ] PLUSASSIGN expr
    (37) expr -> . ID [ expr , expr ] MINASSIGN expr
    (38) expr -> . ID [ expr , expr ] MULTASSIGN expr
    (39) expr -> . ID [ expr , expr ] DIVASSIGN expr
    (40) expr -> . ID = ZEROS ( expr )
    (41) expr -> . ID = ONES ( expr )
    (42) expr -> . ID = EYE ( expr )
    (43) expr -> . expr + expr
    (44) expr -> . expr - expr
    (45) expr -> . expr * expr
    (46) expr -> . expr / expr
    (47) expr -> . expr MPLUS expr
    (48) expr -> . expr MMINUS expr
    (49) expr -> . expr MMLTP expr
    (50) expr -> . expr MDIV expr
    (51) expr -> . expr EQ expr
    (52) expr -> . expr NEQ expr
    (53) expr -> . expr GTEQ expr
    (54) expr -> . expr LTEQ expr
    (55) expr -> . expr > expr
    (56) expr -> . expr < expr

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ID              shift and go to state 10
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13

    expr                           shift and go to state 106

state 97

    (30) expr -> ID [ expr ] . = expr
    (31) expr -> ID [ expr ] . PLUSASSIGN expr
    (32) expr -> ID [ expr ] . MINASSIGN expr
    (33) expr -> ID [ expr ] . MULTASSIGN expr
    (34) expr -> ID [ expr ] . DIVASSIGN expr

    =               shift and go to state 107
    PLUSASSIGN      shift and go to state 108
    MINASSIGN       shift and go to state 109
    MULTASSIGN      shift and go to state 110
    DIVASSIGN       shift and go to state 111


state 98

    (35) expr -> ID [ expr , . expr ] = expr
    (36) expr -> ID [ expr , . expr ] PLUSASSIGN expr
    (37) expr -> ID [ expr , . expr ] MINASSIGN expr
    (38) expr -> ID [ expr , . expr ] MULTASSIGN expr
    (39) expr -> ID [ expr , . expr ] DIVASSIGN expr
    (15) expr -> . INTNUM
    (16) expr -> . FLOATNUM
    (17) expr -> . STRING
    (18) expr -> . ID
    (19) expr -> . ( expr )
    (20) expr -> . - expr
    (21) expr -> . expr '
    (24) expr -> . [ array_interior ]
    (25) expr -> . ID = expr
    (26) expr -> . ID PLUSASSIGN expr
    (27) expr -> . ID MINASSIGN expr
    (28) expr -> . ID MULTASSIGN expr
    (29) expr -> . ID DIVASSIGN expr
    (30) expr -> . ID [ expr ] = expr
    (31) expr -> . ID [ expr ] PLUSASSIGN expr
    (32) expr -> . ID [ expr ] MINASSIGN expr
    (33) expr -> . ID [ expr ] MULTASSIGN expr
    (34) expr -> . ID [ expr ] DIVASSIGN expr
    (35) expr -> . ID [ expr , expr ] = expr
    (36) expr -> . ID [ expr , expr ] PLUSASSIGN expr
    (37) expr -> . ID [ expr , expr ] MINASSIGN expr
    (38) expr -> . ID [ expr , expr ] MULTASSIGN expr
    (39) expr -> . ID [ expr , expr ] DIVASSIGN expr
    (40) expr -> . ID = ZEROS ( expr )
    (41) expr -> . ID = ONES ( expr )
    (42) expr -> . ID = EYE ( expr )
    (43) expr -> . expr + expr
    (44) expr -> . expr - expr
    (45) expr -> . expr * expr
    (46) expr -> . expr / expr
    (47) expr -> . expr MPLUS expr
    (48) expr -> . expr MMINUS expr
    (49) expr -> . expr MMLTP expr
    (50) expr -> . expr MDIV expr
    (51) expr -> . expr EQ expr
    (52) expr -> . expr NEQ expr
    (53) expr -> . expr GTEQ expr
    (54) expr -> . expr LTEQ expr
    (55) expr -> . expr > expr
    (56) expr -> . expr < expr

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ID              shift and go to state 10
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13

    expr                           shift and go to state 112

state 99

    (22) array_interior -> array_interior , expr .
    (21) expr -> expr . '
    (43) expr -> expr . + expr
    (44) expr -> expr . - expr
    (45) expr -> expr . * expr
    (46) expr -> expr . / expr
    (47) expr -> expr . MPLUS expr
    (48) expr -> expr . MMINUS expr
    (49) expr -> expr . MMLTP expr
    (50) expr -> expr . MDIV expr
    (51) expr -> expr . EQ expr
    (52) expr -> expr . NEQ expr
    (53) expr -> expr . GTEQ expr
    (54) expr -> expr . LTEQ expr
    (55) expr -> expr . > expr
    (56) expr -> expr . < expr

    ]               reduce using rule 22 (array_interior -> array_interior , expr .)
    ,               reduce using rule 22 (array_interior -> array_interior , expr .)
    ;               reduce using rule 22 (array_interior -> array_interior , expr .)
    '               shift and go to state 26
    +               shift and go to state 27
    -               shift and go to state 28
    *               shift and go to state 29
    /               shift and go to state 30
    MPLUS           shift and go to state 31
    MMINUS          shift and go to state 32
    MMLTP           shift and go to state 33
    MDIV            shift and go to state 34
    EQ              shift and go to state 35
    NEQ             shift and go to state 36
    GTEQ            shift and go to state 37
    LTEQ            shift and go to state 38
    >               shift and go to state 39
    <               shift and go to state 40


state 100

    (61) cond_block -> { start . }
    (2) start -> start . struct
    (4) start -> start . { start }
    (5) struct -> . expr ;
    (6) struct -> . cond_expr
    (7) struct -> . instruction
    (15) expr -> . INTNUM
    (16) expr -> . FLOATNUM
    (17) expr -> . STRING
    (18) expr -> . ID
    (19) expr -> . ( expr )
    (20) expr -> . - expr
    (21) expr -> . expr '
    (24) expr -> . [ array_interior ]
    (25) expr -> . ID = expr
    (26) expr -> . ID PLUSASSIGN expr
    (27) expr -> . ID MINASSIGN expr
    (28) expr -> . ID MULTASSIGN expr
    (29) expr -> . ID DIVASSIGN expr
    (30) expr -> . ID [ expr ] = expr
    (31) expr -> . ID [ expr ] PLUSASSIGN expr
    (32) expr -> . ID [ expr ] MINASSIGN expr
    (33) expr -> . ID [ expr ] MULTASSIGN expr
    (34) expr -> . ID [ expr ] DIVASSIGN expr
    (35) expr -> . ID [ expr , expr ] = expr
    (36) expr -> . ID [ expr , expr ] PLUSASSIGN expr
    (37) expr -> . ID [ expr , expr ] MINASSIGN expr
    (38) expr -> . ID [ expr , expr ] MULTASSIGN expr
    (39) expr -> . ID [ expr , expr ] DIVASSIGN expr
    (40) expr -> . ID = ZEROS ( expr )
    (41) expr -> . ID = ONES ( expr )
    (42) expr -> . ID = EYE ( expr )
    (43) expr -> . expr + expr
    (44) expr -> . expr - expr
    (45) expr -> . expr * expr
    (46) expr -> . expr / expr
    (47) expr -> . expr MPLUS expr
    (48) expr -> . expr MMINUS expr
    (49) expr -> . expr MMLTP expr
    (50) expr -> . expr MDIV expr
    (51) expr -> . expr EQ expr
    (52) expr -> . expr NEQ expr
    (53) expr -> . expr GTEQ expr
    (54) expr -> . expr LTEQ expr
    (55) expr -> . expr > expr
    (56) expr -> . expr < expr
    (57) cond_expr -> . cond_if
    (58) cond_expr -> . cond_while
    (59) cond_expr -> . cond_for
    (73) instruction -> . RETURN expr ;
    (74) instruction -> . PRINT array_interior ;
    (62) cond_if -> . IF ( expr ) cond_block
    (63) cond_if -> . cond_if ELSE cond_block
    (71) cond_while -> . WHILE ( expr ) loop_cond_block
    (72) cond_for -> . FOR ID = expr : expr loop_cond_block

    }               shift and go to state 113
    {               shift and go to state 23
    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ID              shift and go to state 10
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13
    RETURN          shift and go to state 17
    PRINT           shift and go to state 18
    IF              shift and go to state 19
    WHILE           shift and go to state 20
    FOR             shift and go to state 21

    struct                         shift and go to state 22
    expr                           shift and go to state 4
    cond_expr                      shift and go to state 5
    instruction                    shift and go to state 6
    cond_if                        shift and go to state 14
    cond_while                     shift and go to state 15
    cond_for                       shift and go to state 16

state 101

    (62) cond_if -> IF ( expr ) . cond_block
    (60) cond_block -> . struct
    (61) cond_block -> . { start }
    (5) struct -> . expr ;
    (6) struct -> . cond_expr
    (7) struct -> . instruction
    (15) expr -> . INTNUM
    (16) expr -> . FLOATNUM
    (17) expr -> . STRING
    (18) expr -> . ID
    (19) expr -> . ( expr )
    (20) expr -> . - expr
    (21) expr -> . expr '
    (24) expr -> . [ array_interior ]
    (25) expr -> . ID = expr
    (26) expr -> . ID PLUSASSIGN expr
    (27) expr -> . ID MINASSIGN expr
    (28) expr -> . ID MULTASSIGN expr
    (29) expr -> . ID DIVASSIGN expr
    (30) expr -> . ID [ expr ] = expr
    (31) expr -> . ID [ expr ] PLUSASSIGN expr
    (32) expr -> . ID [ expr ] MINASSIGN expr
    (33) expr -> . ID [ expr ] MULTASSIGN expr
    (34) expr -> . ID [ expr ] DIVASSIGN expr
    (35) expr -> . ID [ expr , expr ] = expr
    (36) expr -> . ID [ expr , expr ] PLUSASSIGN expr
    (37) expr -> . ID [ expr , expr ] MINASSIGN expr
    (38) expr -> . ID [ expr , expr ] MULTASSIGN expr
    (39) expr -> . ID [ expr , expr ] DIVASSIGN expr
    (40) expr -> . ID = ZEROS ( expr )
    (41) expr -> . ID = ONES ( expr )
    (42) expr -> . ID = EYE ( expr )
    (43) expr -> . expr + expr
    (44) expr -> . expr - expr
    (45) expr -> . expr * expr
    (46) expr -> . expr / expr
    (47) expr -> . expr MPLUS expr
    (48) expr -> . expr MMINUS expr
    (49) expr -> . expr MMLTP expr
    (50) expr -> . expr MDIV expr
    (51) expr -> . expr EQ expr
    (52) expr -> . expr NEQ expr
    (53) expr -> . expr GTEQ expr
    (54) expr -> . expr LTEQ expr
    (55) expr -> . expr > expr
    (56) expr -> . expr < expr
    (57) cond_expr -> . cond_if
    (58) cond_expr -> . cond_while
    (59) cond_expr -> . cond_for
    (73) instruction -> . RETURN expr ;
    (74) instruction -> . PRINT array_interior ;
    (62) cond_if -> . IF ( expr ) cond_block
    (63) cond_if -> . cond_if ELSE cond_block
    (71) cond_while -> . WHILE ( expr ) loop_cond_block
    (72) cond_for -> . FOR ID = expr : expr loop_cond_block

    {               shift and go to state 87
    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ID              shift and go to state 10
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13
    RETURN          shift and go to state 17
    PRINT           shift and go to state 18
    IF              shift and go to state 19
    WHILE           shift and go to state 20
    FOR             shift and go to state 21

    expr                           shift and go to state 4
    cond_block                     shift and go to state 114
    struct                         shift and go to state 86
    cond_expr                      shift and go to state 5
    instruction                    shift and go to state 6
    cond_if                        shift and go to state 14
    cond_while                     shift and go to state 15
    cond_for                       shift and go to state 16

state 102

    (71) cond_while -> WHILE ( expr ) . loop_cond_block
    (67) loop_cond_block -> . loop_struct
    (68) loop_cond_block -> . { loop_start }
    (12) loop_struct -> . expr ;
    (13) loop_struct -> . loop_cond_expr
    (14) loop_struct -> . loop_instruction
    (15) expr -> . INTNUM
    (16) expr -> . FLOATNUM
    (17) expr -> . STRING
    (18) expr -> . ID
    (19) expr -> . ( expr )
    (20) expr -> . - expr
    (21) expr -> . expr '
    (24) expr -> . [ array_interior ]
    (25) expr -> . ID = expr
    (26) expr -> . ID PLUSASSIGN expr
    (27) expr -> . ID MINASSIGN expr
    (28) expr -> . ID MULTASSIGN expr
    (29) expr -> . ID DIVASSIGN expr
    (30) expr -> . ID [ expr ] = expr
    (31) expr -> . ID [ expr ] PLUSASSIGN expr
    (32) expr -> . ID [ expr ] MINASSIGN expr
    (33) expr -> . ID [ expr ] MULTASSIGN expr
    (34) expr -> . ID [ expr ] DIVASSIGN expr
    (35) expr -> . ID [ expr , expr ] = expr
    (36) expr -> . ID [ expr , expr ] PLUSASSIGN expr
    (37) expr -> . ID [ expr , expr ] MINASSIGN expr
    (38) expr -> . ID [ expr , expr ] MULTASSIGN expr
    (39) expr -> . ID [ expr , expr ] DIVASSIGN expr
    (40) expr -> . ID = ZEROS ( expr )
    (41) expr -> . ID = ONES ( expr )
    (42) expr -> . ID = EYE ( expr )
    (43) expr -> . expr + expr
    (44) expr -> . expr - expr
    (45) expr -> . expr * expr
    (46) expr -> . expr / expr
    (47) expr -> . expr MPLUS expr
    (48) expr -> . expr MMINUS expr
    (49) expr -> . expr MMLTP expr
    (50) expr -> . expr MDIV expr
    (51) expr -> . expr EQ expr
    (52) expr -> . expr NEQ expr
    (53) expr -> . expr GTEQ expr
    (54) expr -> . expr LTEQ expr
    (55) expr -> . expr > expr
    (56) expr -> . expr < expr
    (64) loop_cond_expr -> . loop_cond_if
    (65) loop_cond_expr -> . cond_while
    (66) loop_cond_expr -> . cond_for
    (75) loop_instruction -> . BREAK ;
    (76) loop_instruction -> . CONTINUE ;
    (77) loop_instruction -> . RETURN expr ;
    (78) loop_instruction -> . PRINT array_interior ;
    (69) loop_cond_if -> . IF ( expr ) loop_cond_block
    (70) loop_cond_if -> . loop_cond_if ELSE loop_cond_block
    (71) cond_while -> . WHILE ( expr ) loop_cond_block
    (72) cond_for -> . FOR ID = expr : expr loop_cond_block

    {               shift and go to state 118
    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ID              shift and go to state 10
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13
    BREAK           shift and go to state 124
    CONTINUE        shift and go to state 125
    RETURN          shift and go to state 126
    PRINT           shift and go to state 127
    IF              shift and go to state 128
    WHILE           shift and go to state 20
    FOR             shift and go to state 21

    expr                           shift and go to state 115
    loop_cond_block                shift and go to state 116
    loop_struct                    shift and go to state 117
    loop_cond_expr                 shift and go to state 119
    loop_instruction               shift and go to state 120
    loop_cond_if                   shift and go to state 121
    cond_while                     shift and go to state 122
    cond_for                       shift and go to state 123

state 103

    (72) cond_for -> FOR ID = expr . : expr loop_cond_block
    (21) expr -> expr . '
    (43) expr -> expr . + expr
    (44) expr -> expr . - expr
    (45) expr -> expr . * expr
    (46) expr -> expr . / expr
    (47) expr -> expr . MPLUS expr
    (48) expr -> expr . MMINUS expr
    (49) expr -> expr . MMLTP expr
    (50) expr -> expr . MDIV expr
    (51) expr -> expr . EQ expr
    (52) expr -> expr . NEQ expr
    (53) expr -> expr . GTEQ expr
    (54) expr -> expr . LTEQ expr
    (55) expr -> expr . > expr
    (56) expr -> expr . < expr

    :               shift and go to state 129
    '               shift and go to state 26
    +               shift and go to state 27
    -               shift and go to state 28
    *               shift and go to state 29
    /               shift and go to state 30
    MPLUS           shift and go to state 31
    MMINUS          shift and go to state 32
    MMLTP           shift and go to state 33
    MDIV            shift and go to state 34
    EQ              shift and go to state 35
    NEQ             shift and go to state 36
    GTEQ            shift and go to state 37
    LTEQ            shift and go to state 38
    >               shift and go to state 39
    <               shift and go to state 40


state 104

    (40) expr -> ID = ZEROS ( expr . )
    (21) expr -> expr . '
    (43) expr -> expr . + expr
    (44) expr -> expr . - expr
    (45) expr -> expr . * expr
    (46) expr -> expr . / expr
    (47) expr -> expr . MPLUS expr
    (48) expr -> expr . MMINUS expr
    (49) expr -> expr . MMLTP expr
    (50) expr -> expr . MDIV expr
    (51) expr -> expr . EQ expr
    (52) expr -> expr . NEQ expr
    (53) expr -> expr . GTEQ expr
    (54) expr -> expr . LTEQ expr
    (55) expr -> expr . > expr
    (56) expr -> expr . < expr

    )               shift and go to state 130
    '               shift and go to state 26
    +               shift and go to state 27
    -               shift and go to state 28
    *               shift and go to state 29
    /               shift and go to state 30
    MPLUS           shift and go to state 31
    MMINUS          shift and go to state 32
    MMLTP           shift and go to state 33
    MDIV            shift and go to state 34
    EQ              shift and go to state 35
    NEQ             shift and go to state 36
    GTEQ            shift and go to state 37
    LTEQ            shift and go to state 38
    >               shift and go to state 39
    <               shift and go to state 40


state 105

    (41) expr -> ID = ONES ( expr . )
    (21) expr -> expr . '
    (43) expr -> expr . + expr
    (44) expr -> expr . - expr
    (45) expr -> expr . * expr
    (46) expr -> expr . / expr
    (47) expr -> expr . MPLUS expr
    (48) expr -> expr . MMINUS expr
    (49) expr -> expr . MMLTP expr
    (50) expr -> expr . MDIV expr
    (51) expr -> expr . EQ expr
    (52) expr -> expr . NEQ expr
    (53) expr -> expr . GTEQ expr
    (54) expr -> expr . LTEQ expr
    (55) expr -> expr . > expr
    (56) expr -> expr . < expr

    )               shift and go to state 131
    '               shift and go to state 26
    +               shift and go to state 27
    -               shift and go to state 28
    *               shift and go to state 29
    /               shift and go to state 30
    MPLUS           shift and go to state 31
    MMINUS          shift and go to state 32
    MMLTP           shift and go to state 33
    MDIV            shift and go to state 34
    EQ              shift and go to state 35
    NEQ             shift and go to state 36
    GTEQ            shift and go to state 37
    LTEQ            shift and go to state 38
    >               shift and go to state 39
    <               shift and go to state 40


state 106

    (42) expr -> ID = EYE ( expr . )
    (21) expr -> expr . '
    (43) expr -> expr . + expr
    (44) expr -> expr . - expr
    (45) expr -> expr . * expr
    (46) expr -> expr . / expr
    (47) expr -> expr . MPLUS expr
    (48) expr -> expr . MMINUS expr
    (49) expr -> expr . MMLTP expr
    (50) expr -> expr . MDIV expr
    (51) expr -> expr . EQ expr
    (52) expr -> expr . NEQ expr
    (53) expr -> expr . GTEQ expr
    (54) expr -> expr . LTEQ expr
    (55) expr -> expr . > expr
    (56) expr -> expr . < expr

    )               shift and go to state 132
    '               shift and go to state 26
    +               shift and go to state 27
    -               shift and go to state 28
    *               shift and go to state 29
    /               shift and go to state 30
    MPLUS           shift and go to state 31
    MMINUS          shift and go to state 32
    MMLTP           shift and go to state 33
    MDIV            shift and go to state 34
    EQ              shift and go to state 35
    NEQ             shift and go to state 36
    GTEQ            shift and go to state 37
    LTEQ            shift and go to state 38
    >               shift and go to state 39
    <               shift and go to state 40


state 107

    (30) expr -> ID [ expr ] = . expr
    (15) expr -> . INTNUM
    (16) expr -> . FLOATNUM
    (17) expr -> . STRING
    (18) expr -> . ID
    (19) expr -> . ( expr )
    (20) expr -> . - expr
    (21) expr -> . expr '
    (24) expr -> . [ array_interior ]
    (25) expr -> . ID = expr
    (26) expr -> . ID PLUSASSIGN expr
    (27) expr -> . ID MINASSIGN expr
    (28) expr -> . ID MULTASSIGN expr
    (29) expr -> . ID DIVASSIGN expr
    (30) expr -> . ID [ expr ] = expr
    (31) expr -> . ID [ expr ] PLUSASSIGN expr
    (32) expr -> . ID [ expr ] MINASSIGN expr
    (33) expr -> . ID [ expr ] MULTASSIGN expr
    (34) expr -> . ID [ expr ] DIVASSIGN expr
    (35) expr -> . ID [ expr , expr ] = expr
    (36) expr -> . ID [ expr , expr ] PLUSASSIGN expr
    (37) expr -> . ID [ expr , expr ] MINASSIGN expr
    (38) expr -> . ID [ expr , expr ] MULTASSIGN expr
    (39) expr -> . ID [ expr , expr ] DIVASSIGN expr
    (40) expr -> . ID = ZEROS ( expr )
    (41) expr -> . ID = ONES ( expr )
    (42) expr -> . ID = EYE ( expr )
    (43) expr -> . expr + expr
    (44) expr -> . expr - expr
    (45) expr -> . expr * expr
    (46) expr -> . expr / expr
    (47) expr -> . expr MPLUS expr
    (48) expr -> . expr MMINUS expr
    (49) expr -> . expr MMLTP expr
    (50) expr -> . expr MDIV expr
    (51) expr -> . expr EQ expr
    (52) expr -> . expr NEQ expr
    (53) expr -> . expr GTEQ expr
    (54) expr -> . expr LTEQ expr
    (55) expr -> . expr > expr
    (56) expr -> . expr < expr

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ID              shift and go to state 10
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13

    expr                           shift and go to state 133

state 108

    (31) expr -> ID [ expr ] PLUSASSIGN . expr
    (15) expr -> . INTNUM
    (16) expr -> . FLOATNUM
    (17) expr -> . STRING
    (18) expr -> . ID
    (19) expr -> . ( expr )
    (20) expr -> . - expr
    (21) expr -> . expr '
    (24) expr -> . [ array_interior ]
    (25) expr -> . ID = expr
    (26) expr -> . ID PLUSASSIGN expr
    (27) expr -> . ID MINASSIGN expr
    (28) expr -> . ID MULTASSIGN expr
    (29) expr -> . ID DIVASSIGN expr
    (30) expr -> . ID [ expr ] = expr
    (31) expr -> . ID [ expr ] PLUSASSIGN expr
    (32) expr -> . ID [ expr ] MINASSIGN expr
    (33) expr -> . ID [ expr ] MULTASSIGN expr
    (34) expr -> . ID [ expr ] DIVASSIGN expr
    (35) expr -> . ID [ expr , expr ] = expr
    (36) expr -> . ID [ expr , expr ] PLUSASSIGN expr
    (37) expr -> . ID [ expr , expr ] MINASSIGN expr
    (38) expr -> . ID [ expr , expr ] MULTASSIGN expr
    (39) expr -> . ID [ expr , expr ] DIVASSIGN expr
    (40) expr -> . ID = ZEROS ( expr )
    (41) expr -> . ID = ONES ( expr )
    (42) expr -> . ID = EYE ( expr )
    (43) expr -> . expr + expr
    (44) expr -> . expr - expr
    (45) expr -> . expr * expr
    (46) expr -> . expr / expr
    (47) expr -> . expr MPLUS expr
    (48) expr -> . expr MMINUS expr
    (49) expr -> . expr MMLTP expr
    (50) expr -> . expr MDIV expr
    (51) expr -> . expr EQ expr
    (52) expr -> . expr NEQ expr
    (53) expr -> . expr GTEQ expr
    (54) expr -> . expr LTEQ expr
    (55) expr -> . expr > expr
    (56) expr -> . expr < expr

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ID              shift and go to state 10
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13

    expr                           shift and go to state 134

state 109

    (32) expr -> ID [ expr ] MINASSIGN . expr
    (15) expr -> . INTNUM
    (16) expr -> . FLOATNUM
    (17) expr -> . STRING
    (18) expr -> . ID
    (19) expr -> . ( expr )
    (20) expr -> . - expr
    (21) expr -> . expr '
    (24) expr -> . [ array_interior ]
    (25) expr -> . ID = expr
    (26) expr -> . ID PLUSASSIGN expr
    (27) expr -> . ID MINASSIGN expr
    (28) expr -> . ID MULTASSIGN expr
    (29) expr -> . ID DIVASSIGN expr
    (30) expr -> . ID [ expr ] = expr
    (31) expr -> . ID [ expr ] PLUSASSIGN expr
    (32) expr -> . ID [ expr ] MINASSIGN expr
    (33) expr -> . ID [ expr ] MULTASSIGN expr
    (34) expr -> . ID [ expr ] DIVASSIGN expr
    (35) expr -> . ID [ expr , expr ] = expr
    (36) expr -> . ID [ expr , expr ] PLUSASSIGN expr
    (37) expr -> . ID [ expr , expr ] MINASSIGN expr
    (38) expr -> . ID [ expr , expr ] MULTASSIGN expr
    (39) expr -> . ID [ expr , expr ] DIVASSIGN expr
    (40) expr -> . ID = ZEROS ( expr )
    (41) expr -> . ID = ONES ( expr )
    (42) expr -> . ID = EYE ( expr )
    (43) expr -> . expr + expr
    (44) expr -> . expr - expr
    (45) expr -> . expr * expr
    (46) expr -> . expr / expr
    (47) expr -> . expr MPLUS expr
    (48) expr -> . expr MMINUS expr
    (49) expr -> . expr MMLTP expr
    (50) expr -> . expr MDIV expr
    (51) expr -> . expr EQ expr
    (52) expr -> . expr NEQ expr
    (53) expr -> . expr GTEQ expr
    (54) expr -> . expr LTEQ expr
    (55) expr -> . expr > expr
    (56) expr -> . expr < expr

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ID              shift and go to state 10
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13

    expr                           shift and go to state 135

state 110

    (33) expr -> ID [ expr ] MULTASSIGN . expr
    (15) expr -> . INTNUM
    (16) expr -> . FLOATNUM
    (17) expr -> . STRING
    (18) expr -> . ID
    (19) expr -> . ( expr )
    (20) expr -> . - expr
    (21) expr -> . expr '
    (24) expr -> . [ array_interior ]
    (25) expr -> . ID = expr
    (26) expr -> . ID PLUSASSIGN expr
    (27) expr -> . ID MINASSIGN expr
    (28) expr -> . ID MULTASSIGN expr
    (29) expr -> . ID DIVASSIGN expr
    (30) expr -> . ID [ expr ] = expr
    (31) expr -> . ID [ expr ] PLUSASSIGN expr
    (32) expr -> . ID [ expr ] MINASSIGN expr
    (33) expr -> . ID [ expr ] MULTASSIGN expr
    (34) expr -> . ID [ expr ] DIVASSIGN expr
    (35) expr -> . ID [ expr , expr ] = expr
    (36) expr -> . ID [ expr , expr ] PLUSASSIGN expr
    (37) expr -> . ID [ expr , expr ] MINASSIGN expr
    (38) expr -> . ID [ expr , expr ] MULTASSIGN expr
    (39) expr -> . ID [ expr , expr ] DIVASSIGN expr
    (40) expr -> . ID = ZEROS ( expr )
    (41) expr -> . ID = ONES ( expr )
    (42) expr -> . ID = EYE ( expr )
    (43) expr -> . expr + expr
    (44) expr -> . expr - expr
    (45) expr -> . expr * expr
    (46) expr -> . expr / expr
    (47) expr -> . expr MPLUS expr
    (48) expr -> . expr MMINUS expr
    (49) expr -> . expr MMLTP expr
    (50) expr -> . expr MDIV expr
    (51) expr -> . expr EQ expr
    (52) expr -> . expr NEQ expr
    (53) expr -> . expr GTEQ expr
    (54) expr -> . expr LTEQ expr
    (55) expr -> . expr > expr
    (56) expr -> . expr < expr

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ID              shift and go to state 10
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13

    expr                           shift and go to state 136

state 111

    (34) expr -> ID [ expr ] DIVASSIGN . expr
    (15) expr -> . INTNUM
    (16) expr -> . FLOATNUM
    (17) expr -> . STRING
    (18) expr -> . ID
    (19) expr -> . ( expr )
    (20) expr -> . - expr
    (21) expr -> . expr '
    (24) expr -> . [ array_interior ]
    (25) expr -> . ID = expr
    (26) expr -> . ID PLUSASSIGN expr
    (27) expr -> . ID MINASSIGN expr
    (28) expr -> . ID MULTASSIGN expr
    (29) expr -> . ID DIVASSIGN expr
    (30) expr -> . ID [ expr ] = expr
    (31) expr -> . ID [ expr ] PLUSASSIGN expr
    (32) expr -> . ID [ expr ] MINASSIGN expr
    (33) expr -> . ID [ expr ] MULTASSIGN expr
    (34) expr -> . ID [ expr ] DIVASSIGN expr
    (35) expr -> . ID [ expr , expr ] = expr
    (36) expr -> . ID [ expr , expr ] PLUSASSIGN expr
    (37) expr -> . ID [ expr , expr ] MINASSIGN expr
    (38) expr -> . ID [ expr , expr ] MULTASSIGN expr
    (39) expr -> . ID [ expr , expr ] DIVASSIGN expr
    (40) expr -> . ID = ZEROS ( expr )
    (41) expr -> . ID = ONES ( expr )
    (42) expr -> . ID = EYE ( expr )
    (43) expr -> . expr + expr
    (44) expr -> . expr - expr
    (45) expr -> . expr * expr
    (46) expr -> . expr / expr
    (47) expr -> . expr MPLUS expr
    (48) expr -> . expr MMINUS expr
    (49) expr -> . expr MMLTP expr
    (50) expr -> . expr MDIV expr
    (51) expr -> . expr EQ expr
    (52) expr -> . expr NEQ expr
    (53) expr -> . expr GTEQ expr
    (54) expr -> . expr LTEQ expr
    (55) expr -> . expr > expr
    (56) expr -> . expr < expr

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ID              shift and go to state 10
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13

    expr                           shift and go to state 137

state 112

    (35) expr -> ID [ expr , expr . ] = expr
    (36) expr -> ID [ expr , expr . ] PLUSASSIGN expr
    (37) expr -> ID [ expr , expr . ] MINASSIGN expr
    (38) expr -> ID [ expr , expr . ] MULTASSIGN expr
    (39) expr -> ID [ expr , expr . ] DIVASSIGN expr
    (21) expr -> expr . '
    (43) expr -> expr . + expr
    (44) expr -> expr . - expr
    (45) expr -> expr . * expr
    (46) expr -> expr . / expr
    (47) expr -> expr . MPLUS expr
    (48) expr -> expr . MMINUS expr
    (49) expr -> expr . MMLTP expr
    (50) expr -> expr . MDIV expr
    (51) expr -> expr . EQ expr
    (52) expr -> expr . NEQ expr
    (53) expr -> expr . GTEQ expr
    (54) expr -> expr . LTEQ expr
    (55) expr -> expr . > expr
    (56) expr -> expr . < expr

    ]               shift and go to state 138
    '               shift and go to state 26
    +               shift and go to state 27
    -               shift and go to state 28
    *               shift and go to state 29
    /               shift and go to state 30
    MPLUS           shift and go to state 31
    MMINUS          shift and go to state 32
    MMLTP           shift and go to state 33
    MDIV            shift and go to state 34
    EQ              shift and go to state 35
    NEQ             shift and go to state 36
    GTEQ            shift and go to state 37
    LTEQ            shift and go to state 38
    >               shift and go to state 39
    <               shift and go to state 40


state 113

    (61) cond_block -> { start } .

    ELSE            reduce using rule 61 (cond_block -> { start } .)
    {               reduce using rule 61 (cond_block -> { start } .)
    INTNUM          reduce using rule 61 (cond_block -> { start } .)
    FLOATNUM        reduce using rule 61 (cond_block -> { start } .)
    STRING          reduce using rule 61 (cond_block -> { start } .)
    ID              reduce using rule 61 (cond_block -> { start } .)
    (               reduce using rule 61 (cond_block -> { start } .)
    -               reduce using rule 61 (cond_block -> { start } .)
    [               reduce using rule 61 (cond_block -> { start } .)
    RETURN          reduce using rule 61 (cond_block -> { start } .)
    PRINT           reduce using rule 61 (cond_block -> { start } .)
    IF              reduce using rule 61 (cond_block -> { start } .)
    WHILE           reduce using rule 61 (cond_block -> { start } .)
    FOR             reduce using rule 61 (cond_block -> { start } .)
    $end            reduce using rule 61 (cond_block -> { start } .)
    }               reduce using rule 61 (cond_block -> { start } .)


state 114

    (62) cond_if -> IF ( expr ) cond_block .

    ELSE            reduce using rule 62 (cond_if -> IF ( expr ) cond_block .)
    {               reduce using rule 62 (cond_if -> IF ( expr ) cond_block .)
    INTNUM          reduce using rule 62 (cond_if -> IF ( expr ) cond_block .)
    FLOATNUM        reduce using rule 62 (cond_if -> IF ( expr ) cond_block .)
    STRING          reduce using rule 62 (cond_if -> IF ( expr ) cond_block .)
    ID              reduce using rule 62 (cond_if -> IF ( expr ) cond_block .)
    (               reduce using rule 62 (cond_if -> IF ( expr ) cond_block .)
    -               reduce using rule 62 (cond_if -> IF ( expr ) cond_block .)
    [               reduce using rule 62 (cond_if -> IF ( expr ) cond_block .)
    RETURN          reduce using rule 62 (cond_if -> IF ( expr ) cond_block .)
    PRINT           reduce using rule 62 (cond_if -> IF ( expr ) cond_block .)
    IF              reduce using rule 62 (cond_if -> IF ( expr ) cond_block .)
    WHILE           reduce using rule 62 (cond_if -> IF ( expr ) cond_block .)
    FOR             reduce using rule 62 (cond_if -> IF ( expr ) cond_block .)
    $end            reduce using rule 62 (cond_if -> IF ( expr ) cond_block .)
    }               reduce using rule 62 (cond_if -> IF ( expr ) cond_block .)


state 115

    (12) loop_struct -> expr . ;
    (21) expr -> expr . '
    (43) expr -> expr . + expr
    (44) expr -> expr . - expr
    (45) expr -> expr . * expr
    (46) expr -> expr . / expr
    (47) expr -> expr . MPLUS expr
    (48) expr -> expr . MMINUS expr
    (49) expr -> expr . MMLTP expr
    (50) expr -> expr . MDIV expr
    (51) expr -> expr . EQ expr
    (52) expr -> expr . NEQ expr
    (53) expr -> expr . GTEQ expr
    (54) expr -> expr . LTEQ expr
    (55) expr -> expr . > expr
    (56) expr -> expr . < expr

    ;               shift and go to state 139
    '               shift and go to state 26
    +               shift and go to state 27
    -               shift and go to state 28
    *               shift and go to state 29
    /               shift and go to state 30
    MPLUS           shift and go to state 31
    MMINUS          shift and go to state 32
    MMLTP           shift and go to state 33
    MDIV            shift and go to state 34
    EQ              shift and go to state 35
    NEQ             shift and go to state 36
    GTEQ            shift and go to state 37
    LTEQ            shift and go to state 38
    >               shift and go to state 39
    <               shift and go to state 40


state 116

    (71) cond_while -> WHILE ( expr ) loop_cond_block .

    {               reduce using rule 71 (cond_while -> WHILE ( expr ) loop_cond_block .)
    INTNUM          reduce using rule 71 (cond_while -> WHILE ( expr ) loop_cond_block .)
    FLOATNUM        reduce using rule 71 (cond_while -> WHILE ( expr ) loop_cond_block .)
    STRING          reduce using rule 71 (cond_while -> WHILE ( expr ) loop_cond_block .)
    ID              reduce using rule 71 (cond_while -> WHILE ( expr ) loop_cond_block .)
    (               reduce using rule 71 (cond_while -> WHILE ( expr ) loop_cond_block .)
    -               reduce using rule 71 (cond_while -> WHILE ( expr ) loop_cond_block .)
    [               reduce using rule 71 (cond_while -> WHILE ( expr ) loop_cond_block .)
    RETURN          reduce using rule 71 (cond_while -> WHILE ( expr ) loop_cond_block .)
    PRINT           reduce using rule 71 (cond_while -> WHILE ( expr ) loop_cond_block .)
    IF              reduce using rule 71 (cond_while -> WHILE ( expr ) loop_cond_block .)
    WHILE           reduce using rule 71 (cond_while -> WHILE ( expr ) loop_cond_block .)
    FOR             reduce using rule 71 (cond_while -> WHILE ( expr ) loop_cond_block .)
    $end            reduce using rule 71 (cond_while -> WHILE ( expr ) loop_cond_block .)
    }               reduce using rule 71 (cond_while -> WHILE ( expr ) loop_cond_block .)
    ELSE            reduce using rule 71 (cond_while -> WHILE ( expr ) loop_cond_block .)
    BREAK           reduce using rule 71 (cond_while -> WHILE ( expr ) loop_cond_block .)
    CONTINUE        reduce using rule 71 (cond_while -> WHILE ( expr ) loop_cond_block .)


state 117

    (67) loop_cond_block -> loop_struct .

    {               reduce using rule 67 (loop_cond_block -> loop_struct .)
    INTNUM          reduce using rule 67 (loop_cond_block -> loop_struct .)
    FLOATNUM        reduce using rule 67 (loop_cond_block -> loop_struct .)
    STRING          reduce using rule 67 (loop_cond_block -> loop_struct .)
    ID              reduce using rule 67 (loop_cond_block -> loop_struct .)
    (               reduce using rule 67 (loop_cond_block -> loop_struct .)
    -               reduce using rule 67 (loop_cond_block -> loop_struct .)
    [               reduce using rule 67 (loop_cond_block -> loop_struct .)
    RETURN          reduce using rule 67 (loop_cond_block -> loop_struct .)
    PRINT           reduce using rule 67 (loop_cond_block -> loop_struct .)
    IF              reduce using rule 67 (loop_cond_block -> loop_struct .)
    WHILE           reduce using rule 67 (loop_cond_block -> loop_struct .)
    FOR             reduce using rule 67 (loop_cond_block -> loop_struct .)
    $end            reduce using rule 67 (loop_cond_block -> loop_struct .)
    }               reduce using rule 67 (loop_cond_block -> loop_struct .)
    ELSE            reduce using rule 67 (loop_cond_block -> loop_struct .)
    BREAK           reduce using rule 67 (loop_cond_block -> loop_struct .)
    CONTINUE        reduce using rule 67 (loop_cond_block -> loop_struct .)


state 118

    (68) loop_cond_block -> { . loop_start }
    (8) loop_start -> . loop_struct
    (9) loop_start -> . loop_start loop_struct
    (10) loop_start -> . { loop_start }
    (11) loop_start -> . loop_start { loop_start }
    (12) loop_struct -> . expr ;
    (13) loop_struct -> . loop_cond_expr
    (14) loop_struct -> . loop_instruction
    (15) expr -> . INTNUM
    (16) expr -> . FLOATNUM
    (17) expr -> . STRING
    (18) expr -> . ID
    (19) expr -> . ( expr )
    (20) expr -> . - expr
    (21) expr -> . expr '
    (24) expr -> . [ array_interior ]
    (25) expr -> . ID = expr
    (26) expr -> . ID PLUSASSIGN expr
    (27) expr -> . ID MINASSIGN expr
    (28) expr -> . ID MULTASSIGN expr
    (29) expr -> . ID DIVASSIGN expr
    (30) expr -> . ID [ expr ] = expr
    (31) expr -> . ID [ expr ] PLUSASSIGN expr
    (32) expr -> . ID [ expr ] MINASSIGN expr
    (33) expr -> . ID [ expr ] MULTASSIGN expr
    (34) expr -> . ID [ expr ] DIVASSIGN expr
    (35) expr -> . ID [ expr , expr ] = expr
    (36) expr -> . ID [ expr , expr ] PLUSASSIGN expr
    (37) expr -> . ID [ expr , expr ] MINASSIGN expr
    (38) expr -> . ID [ expr , expr ] MULTASSIGN expr
    (39) expr -> . ID [ expr , expr ] DIVASSIGN expr
    (40) expr -> . ID = ZEROS ( expr )
    (41) expr -> . ID = ONES ( expr )
    (42) expr -> . ID = EYE ( expr )
    (43) expr -> . expr + expr
    (44) expr -> . expr - expr
    (45) expr -> . expr * expr
    (46) expr -> . expr / expr
    (47) expr -> . expr MPLUS expr
    (48) expr -> . expr MMINUS expr
    (49) expr -> . expr MMLTP expr
    (50) expr -> . expr MDIV expr
    (51) expr -> . expr EQ expr
    (52) expr -> . expr NEQ expr
    (53) expr -> . expr GTEQ expr
    (54) expr -> . expr LTEQ expr
    (55) expr -> . expr > expr
    (56) expr -> . expr < expr
    (64) loop_cond_expr -> . loop_cond_if
    (65) loop_cond_expr -> . cond_while
    (66) loop_cond_expr -> . cond_for
    (75) loop_instruction -> . BREAK ;
    (76) loop_instruction -> . CONTINUE ;
    (77) loop_instruction -> . RETURN expr ;
    (78) loop_instruction -> . PRINT array_interior ;
    (69) loop_cond_if -> . IF ( expr ) loop_cond_block
    (70) loop_cond_if -> . loop_cond_if ELSE loop_cond_block
    (71) cond_while -> . WHILE ( expr ) loop_cond_block
    (72) cond_for -> . FOR ID = expr : expr loop_cond_block

    {               shift and go to state 140
    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ID              shift and go to state 10
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13
    BREAK           shift and go to state 124
    CONTINUE        shift and go to state 125
    RETURN          shift and go to state 126
    PRINT           shift and go to state 127
    IF              shift and go to state 128
    WHILE           shift and go to state 20
    FOR             shift and go to state 21

    loop_start                     shift and go to state 141
    loop_struct                    shift and go to state 142
    expr                           shift and go to state 115
    loop_cond_expr                 shift and go to state 119
    loop_instruction               shift and go to state 120
    loop_cond_if                   shift and go to state 121
    cond_while                     shift and go to state 122
    cond_for                       shift and go to state 123

state 119

    (13) loop_struct -> loop_cond_expr .

    {               reduce using rule 13 (loop_struct -> loop_cond_expr .)
    INTNUM          reduce using rule 13 (loop_struct -> loop_cond_expr .)
    FLOATNUM        reduce using rule 13 (loop_struct -> loop_cond_expr .)
    STRING          reduce using rule 13 (loop_struct -> loop_cond_expr .)
    ID              reduce using rule 13 (loop_struct -> loop_cond_expr .)
    (               reduce using rule 13 (loop_struct -> loop_cond_expr .)
    -               reduce using rule 13 (loop_struct -> loop_cond_expr .)
    [               reduce using rule 13 (loop_struct -> loop_cond_expr .)
    RETURN          reduce using rule 13 (loop_struct -> loop_cond_expr .)
    PRINT           reduce using rule 13 (loop_struct -> loop_cond_expr .)
    IF              reduce using rule 13 (loop_struct -> loop_cond_expr .)
    WHILE           reduce using rule 13 (loop_struct -> loop_cond_expr .)
    FOR             reduce using rule 13 (loop_struct -> loop_cond_expr .)
    $end            reduce using rule 13 (loop_struct -> loop_cond_expr .)
    }               reduce using rule 13 (loop_struct -> loop_cond_expr .)
    ELSE            reduce using rule 13 (loop_struct -> loop_cond_expr .)
    BREAK           reduce using rule 13 (loop_struct -> loop_cond_expr .)
    CONTINUE        reduce using rule 13 (loop_struct -> loop_cond_expr .)


state 120

    (14) loop_struct -> loop_instruction .

    {               reduce using rule 14 (loop_struct -> loop_instruction .)
    INTNUM          reduce using rule 14 (loop_struct -> loop_instruction .)
    FLOATNUM        reduce using rule 14 (loop_struct -> loop_instruction .)
    STRING          reduce using rule 14 (loop_struct -> loop_instruction .)
    ID              reduce using rule 14 (loop_struct -> loop_instruction .)
    (               reduce using rule 14 (loop_struct -> loop_instruction .)
    -               reduce using rule 14 (loop_struct -> loop_instruction .)
    [               reduce using rule 14 (loop_struct -> loop_instruction .)
    RETURN          reduce using rule 14 (loop_struct -> loop_instruction .)
    PRINT           reduce using rule 14 (loop_struct -> loop_instruction .)
    IF              reduce using rule 14 (loop_struct -> loop_instruction .)
    WHILE           reduce using rule 14 (loop_struct -> loop_instruction .)
    FOR             reduce using rule 14 (loop_struct -> loop_instruction .)
    $end            reduce using rule 14 (loop_struct -> loop_instruction .)
    }               reduce using rule 14 (loop_struct -> loop_instruction .)
    ELSE            reduce using rule 14 (loop_struct -> loop_instruction .)
    BREAK           reduce using rule 14 (loop_struct -> loop_instruction .)
    CONTINUE        reduce using rule 14 (loop_struct -> loop_instruction .)


state 121

    (64) loop_cond_expr -> loop_cond_if .
    (70) loop_cond_if -> loop_cond_if . ELSE loop_cond_block

  ! shift/reduce conflict for ELSE resolved as shift
    {               reduce using rule 64 (loop_cond_expr -> loop_cond_if .)
    INTNUM          reduce using rule 64 (loop_cond_expr -> loop_cond_if .)
    FLOATNUM        reduce using rule 64 (loop_cond_expr -> loop_cond_if .)
    STRING          reduce using rule 64 (loop_cond_expr -> loop_cond_if .)
    ID              reduce using rule 64 (loop_cond_expr -> loop_cond_if .)
    (               reduce using rule 64 (loop_cond_expr -> loop_cond_if .)
    -               reduce using rule 64 (loop_cond_expr -> loop_cond_if .)
    [               reduce using rule 64 (loop_cond_expr -> loop_cond_if .)
    RETURN          reduce using rule 64 (loop_cond_expr -> loop_cond_if .)
    PRINT           reduce using rule 64 (loop_cond_expr -> loop_cond_if .)
    IF              reduce using rule 64 (loop_cond_expr -> loop_cond_if .)
    WHILE           reduce using rule 64 (loop_cond_expr -> loop_cond_if .)
    FOR             reduce using rule 64 (loop_cond_expr -> loop_cond_if .)
    $end            reduce using rule 64 (loop_cond_expr -> loop_cond_if .)
    }               reduce using rule 64 (loop_cond_expr -> loop_cond_if .)
    BREAK           reduce using rule 64 (loop_cond_expr -> loop_cond_if .)
    CONTINUE        reduce using rule 64 (loop_cond_expr -> loop_cond_if .)
    ELSE            shift and go to state 143

  ! ELSE            [ reduce using rule 64 (loop_cond_expr -> loop_cond_if .) ]


state 122

    (65) loop_cond_expr -> cond_while .

    {               reduce using rule 65 (loop_cond_expr -> cond_while .)
    INTNUM          reduce using rule 65 (loop_cond_expr -> cond_while .)
    FLOATNUM        reduce using rule 65 (loop_cond_expr -> cond_while .)
    STRING          reduce using rule 65 (loop_cond_expr -> cond_while .)
    ID              reduce using rule 65 (loop_cond_expr -> cond_while .)
    (               reduce using rule 65 (loop_cond_expr -> cond_while .)
    -               reduce using rule 65 (loop_cond_expr -> cond_while .)
    [               reduce using rule 65 (loop_cond_expr -> cond_while .)
    RETURN          reduce using rule 65 (loop_cond_expr -> cond_while .)
    PRINT           reduce using rule 65 (loop_cond_expr -> cond_while .)
    IF              reduce using rule 65 (loop_cond_expr -> cond_while .)
    WHILE           reduce using rule 65 (loop_cond_expr -> cond_while .)
    FOR             reduce using rule 65 (loop_cond_expr -> cond_while .)
    $end            reduce using rule 65 (loop_cond_expr -> cond_while .)
    }               reduce using rule 65 (loop_cond_expr -> cond_while .)
    ELSE            reduce using rule 65 (loop_cond_expr -> cond_while .)
    BREAK           reduce using rule 65 (loop_cond_expr -> cond_while .)
    CONTINUE        reduce using rule 65 (loop_cond_expr -> cond_while .)


state 123

    (66) loop_cond_expr -> cond_for .

    {               reduce using rule 66 (loop_cond_expr -> cond_for .)
    INTNUM          reduce using rule 66 (loop_cond_expr -> cond_for .)
    FLOATNUM        reduce using rule 66 (loop_cond_expr -> cond_for .)
    STRING          reduce using rule 66 (loop_cond_expr -> cond_for .)
    ID              reduce using rule 66 (loop_cond_expr -> cond_for .)
    (               reduce using rule 66 (loop_cond_expr -> cond_for .)
    -               reduce using rule 66 (loop_cond_expr -> cond_for .)
    [               reduce using rule 66 (loop_cond_expr -> cond_for .)
    RETURN          reduce using rule 66 (loop_cond_expr -> cond_for .)
    PRINT           reduce using rule 66 (loop_cond_expr -> cond_for .)
    IF              reduce using rule 66 (loop_cond_expr -> cond_for .)
    WHILE           reduce using rule 66 (loop_cond_expr -> cond_for .)
    FOR             reduce using rule 66 (loop_cond_expr -> cond_for .)
    $end            reduce using rule 66 (loop_cond_expr -> cond_for .)
    }               reduce using rule 66 (loop_cond_expr -> cond_for .)
    ELSE            reduce using rule 66 (loop_cond_expr -> cond_for .)
    BREAK           reduce using rule 66 (loop_cond_expr -> cond_for .)
    CONTINUE        reduce using rule 66 (loop_cond_expr -> cond_for .)


state 124

    (75) loop_instruction -> BREAK . ;

    ;               shift and go to state 144


state 125

    (76) loop_instruction -> CONTINUE . ;

    ;               shift and go to state 145


state 126

    (77) loop_instruction -> RETURN . expr ;
    (15) expr -> . INTNUM
    (16) expr -> . FLOATNUM
    (17) expr -> . STRING
    (18) expr -> . ID
    (19) expr -> . ( expr )
    (20) expr -> . - expr
    (21) expr -> . expr '
    (24) expr -> . [ array_interior ]
    (25) expr -> . ID = expr
    (26) expr -> . ID PLUSASSIGN expr
    (27) expr -> . ID MINASSIGN expr
    (28) expr -> . ID MULTASSIGN expr
    (29) expr -> . ID DIVASSIGN expr
    (30) expr -> . ID [ expr ] = expr
    (31) expr -> . ID [ expr ] PLUSASSIGN expr
    (32) expr -> . ID [ expr ] MINASSIGN expr
    (33) expr -> . ID [ expr ] MULTASSIGN expr
    (34) expr -> . ID [ expr ] DIVASSIGN expr
    (35) expr -> . ID [ expr , expr ] = expr
    (36) expr -> . ID [ expr , expr ] PLUSASSIGN expr
    (37) expr -> . ID [ expr , expr ] MINASSIGN expr
    (38) expr -> . ID [ expr , expr ] MULTASSIGN expr
    (39) expr -> . ID [ expr , expr ] DIVASSIGN expr
    (40) expr -> . ID = ZEROS ( expr )
    (41) expr -> . ID = ONES ( expr )
    (42) expr -> . ID = EYE ( expr )
    (43) expr -> . expr + expr
    (44) expr -> . expr - expr
    (45) expr -> . expr * expr
    (46) expr -> . expr / expr
    (47) expr -> . expr MPLUS expr
    (48) expr -> . expr MMINUS expr
    (49) expr -> . expr MMLTP expr
    (50) expr -> . expr MDIV expr
    (51) expr -> . expr EQ expr
    (52) expr -> . expr NEQ expr
    (53) expr -> . expr GTEQ expr
    (54) expr -> . expr LTEQ expr
    (55) expr -> . expr > expr
    (56) expr -> . expr < expr

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ID              shift and go to state 10
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13

    expr                           shift and go to state 146

state 127

    (78) loop_instruction -> PRINT . array_interior ;
    (22) array_interior -> . array_interior , expr
    (23) array_interior -> . expr
    (15) expr -> . INTNUM
    (16) expr -> . FLOATNUM
    (17) expr -> . STRING
    (18) expr -> . ID
    (19) expr -> . ( expr )
    (20) expr -> . - expr
    (21) expr -> . expr '
    (24) expr -> . [ array_interior ]
    (25) expr -> . ID = expr
    (26) expr -> . ID PLUSASSIGN expr
    (27) expr -> . ID MINASSIGN expr
    (28) expr -> . ID MULTASSIGN expr
    (29) expr -> . ID DIVASSIGN expr
    (30) expr -> . ID [ expr ] = expr
    (31) expr -> . ID [ expr ] PLUSASSIGN expr
    (32) expr -> . ID [ expr ] MINASSIGN expr
    (33) expr -> . ID [ expr ] MULTASSIGN expr
    (34) expr -> . ID [ expr ] DIVASSIGN expr
    (35) expr -> . ID [ expr , expr ] = expr
    (36) expr -> . ID [ expr , expr ] PLUSASSIGN expr
    (37) expr -> . ID [ expr , expr ] MINASSIGN expr
    (38) expr -> . ID [ expr , expr ] MULTASSIGN expr
    (39) expr -> . ID [ expr , expr ] DIVASSIGN expr
    (40) expr -> . ID = ZEROS ( expr )
    (41) expr -> . ID = ONES ( expr )
    (42) expr -> . ID = EYE ( expr )
    (43) expr -> . expr + expr
    (44) expr -> . expr - expr
    (45) expr -> . expr * expr
    (46) expr -> . expr / expr
    (47) expr -> . expr MPLUS expr
    (48) expr -> . expr MMINUS expr
    (49) expr -> . expr MMLTP expr
    (50) expr -> . expr MDIV expr
    (51) expr -> . expr EQ expr
    (52) expr -> . expr NEQ expr
    (53) expr -> . expr GTEQ expr
    (54) expr -> . expr LTEQ expr
    (55) expr -> . expr > expr
    (56) expr -> . expr < expr

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ID              shift and go to state 10
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13

    array_interior                 shift and go to state 147
    expr                           shift and go to state 50

state 128

    (69) loop_cond_if -> IF . ( expr ) loop_cond_block

    (               shift and go to state 148


state 129

    (72) cond_for -> FOR ID = expr : . expr loop_cond_block
    (15) expr -> . INTNUM
    (16) expr -> . FLOATNUM
    (17) expr -> . STRING
    (18) expr -> . ID
    (19) expr -> . ( expr )
    (20) expr -> . - expr
    (21) expr -> . expr '
    (24) expr -> . [ array_interior ]
    (25) expr -> . ID = expr
    (26) expr -> . ID PLUSASSIGN expr
    (27) expr -> . ID MINASSIGN expr
    (28) expr -> . ID MULTASSIGN expr
    (29) expr -> . ID DIVASSIGN expr
    (30) expr -> . ID [ expr ] = expr
    (31) expr -> . ID [ expr ] PLUSASSIGN expr
    (32) expr -> . ID [ expr ] MINASSIGN expr
    (33) expr -> . ID [ expr ] MULTASSIGN expr
    (34) expr -> . ID [ expr ] DIVASSIGN expr
    (35) expr -> . ID [ expr , expr ] = expr
    (36) expr -> . ID [ expr , expr ] PLUSASSIGN expr
    (37) expr -> . ID [ expr , expr ] MINASSIGN expr
    (38) expr -> . ID [ expr , expr ] MULTASSIGN expr
    (39) expr -> . ID [ expr , expr ] DIVASSIGN expr
    (40) expr -> . ID = ZEROS ( expr )
    (41) expr -> . ID = ONES ( expr )
    (42) expr -> . ID = EYE ( expr )
    (43) expr -> . expr + expr
    (44) expr -> . expr - expr
    (45) expr -> . expr * expr
    (46) expr -> . expr / expr
    (47) expr -> . expr MPLUS expr
    (48) expr -> . expr MMINUS expr
    (49) expr -> . expr MMLTP expr
    (50) expr -> . expr MDIV expr
    (51) expr -> . expr EQ expr
    (52) expr -> . expr NEQ expr
    (53) expr -> . expr GTEQ expr
    (54) expr -> . expr LTEQ expr
    (55) expr -> . expr > expr
    (56) expr -> . expr < expr

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ID              shift and go to state 10
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13

    expr                           shift and go to state 149

state 130

    (40) expr -> ID = ZEROS ( expr ) .

    ;               reduce using rule 40 (expr -> ID = ZEROS ( expr ) .)
    '               reduce using rule 40 (expr -> ID = ZEROS ( expr ) .)
    +               reduce using rule 40 (expr -> ID = ZEROS ( expr ) .)
    -               reduce using rule 40 (expr -> ID = ZEROS ( expr ) .)
    *               reduce using rule 40 (expr -> ID = ZEROS ( expr ) .)
    /               reduce using rule 40 (expr -> ID = ZEROS ( expr ) .)
    MPLUS           reduce using rule 40 (expr -> ID = ZEROS ( expr ) .)
    MMINUS          reduce using rule 40 (expr -> ID = ZEROS ( expr ) .)
    MMLTP           reduce using rule 40 (expr -> ID = ZEROS ( expr ) .)
    MDIV            reduce using rule 40 (expr -> ID = ZEROS ( expr ) .)
    EQ              reduce using rule 40 (expr -> ID = ZEROS ( expr ) .)
    NEQ             reduce using rule 40 (expr -> ID = ZEROS ( expr ) .)
    GTEQ            reduce using rule 40 (expr -> ID = ZEROS ( expr ) .)
    LTEQ            reduce using rule 40 (expr -> ID = ZEROS ( expr ) .)
    >               reduce using rule 40 (expr -> ID = ZEROS ( expr ) .)
    <               reduce using rule 40 (expr -> ID = ZEROS ( expr ) .)
    )               reduce using rule 40 (expr -> ID = ZEROS ( expr ) .)
    ]               reduce using rule 40 (expr -> ID = ZEROS ( expr ) .)
    ,               reduce using rule 40 (expr -> ID = ZEROS ( expr ) .)
    :               reduce using rule 40 (expr -> ID = ZEROS ( expr ) .)
    {               reduce using rule 40 (expr -> ID = ZEROS ( expr ) .)
    INTNUM          reduce using rule 40 (expr -> ID = ZEROS ( expr ) .)
    FLOATNUM        reduce using rule 40 (expr -> ID = ZEROS ( expr ) .)
    STRING          reduce using rule 40 (expr -> ID = ZEROS ( expr ) .)
    ID              reduce using rule 40 (expr -> ID = ZEROS ( expr ) .)
    (               reduce using rule 40 (expr -> ID = ZEROS ( expr ) .)
    [               reduce using rule 40 (expr -> ID = ZEROS ( expr ) .)
    BREAK           reduce using rule 40 (expr -> ID = ZEROS ( expr ) .)
    CONTINUE        reduce using rule 40 (expr -> ID = ZEROS ( expr ) .)
    RETURN          reduce using rule 40 (expr -> ID = ZEROS ( expr ) .)
    PRINT           reduce using rule 40 (expr -> ID = ZEROS ( expr ) .)
    IF              reduce using rule 40 (expr -> ID = ZEROS ( expr ) .)
    WHILE           reduce using rule 40 (expr -> ID = ZEROS ( expr ) .)
    FOR             reduce using rule 40 (expr -> ID = ZEROS ( expr ) .)


state 131

    (41) expr -> ID = ONES ( expr ) .

    ;               reduce using rule 41 (expr -> ID = ONES ( expr ) .)
    '               reduce using rule 41 (expr -> ID = ONES ( expr ) .)
    +               reduce using rule 41 (expr -> ID = ONES ( expr ) .)
    -               reduce using rule 41 (expr -> ID = ONES ( expr ) .)
    *               reduce using rule 41 (expr -> ID = ONES ( expr ) .)
    /               reduce using rule 41 (expr -> ID = ONES ( expr ) .)
    MPLUS           reduce using rule 41 (expr -> ID = ONES ( expr ) .)
    MMINUS          reduce using rule 41 (expr -> ID = ONES ( expr ) .)
    MMLTP           reduce using rule 41 (expr -> ID = ONES ( expr ) .)
    MDIV            reduce using rule 41 (expr -> ID = ONES ( expr ) .)
    EQ              reduce using rule 41 (expr -> ID = ONES ( expr ) .)
    NEQ             reduce using rule 41 (expr -> ID = ONES ( expr ) .)
    GTEQ            reduce using rule 41 (expr -> ID = ONES ( expr ) .)
    LTEQ            reduce using rule 41 (expr -> ID = ONES ( expr ) .)
    >               reduce using rule 41 (expr -> ID = ONES ( expr ) .)
    <               reduce using rule 41 (expr -> ID = ONES ( expr ) .)
    )               reduce using rule 41 (expr -> ID = ONES ( expr ) .)
    ]               reduce using rule 41 (expr -> ID = ONES ( expr ) .)
    ,               reduce using rule 41 (expr -> ID = ONES ( expr ) .)
    :               reduce using rule 41 (expr -> ID = ONES ( expr ) .)
    {               reduce using rule 41 (expr -> ID = ONES ( expr ) .)
    INTNUM          reduce using rule 41 (expr -> ID = ONES ( expr ) .)
    FLOATNUM        reduce using rule 41 (expr -> ID = ONES ( expr ) .)
    STRING          reduce using rule 41 (expr -> ID = ONES ( expr ) .)
    ID              reduce using rule 41 (expr -> ID = ONES ( expr ) .)
    (               reduce using rule 41 (expr -> ID = ONES ( expr ) .)
    [               reduce using rule 41 (expr -> ID = ONES ( expr ) .)
    BREAK           reduce using rule 41 (expr -> ID = ONES ( expr ) .)
    CONTINUE        reduce using rule 41 (expr -> ID = ONES ( expr ) .)
    RETURN          reduce using rule 41 (expr -> ID = ONES ( expr ) .)
    PRINT           reduce using rule 41 (expr -> ID = ONES ( expr ) .)
    IF              reduce using rule 41 (expr -> ID = ONES ( expr ) .)
    WHILE           reduce using rule 41 (expr -> ID = ONES ( expr ) .)
    FOR             reduce using rule 41 (expr -> ID = ONES ( expr ) .)


state 132

    (42) expr -> ID = EYE ( expr ) .

    ;               reduce using rule 42 (expr -> ID = EYE ( expr ) .)
    '               reduce using rule 42 (expr -> ID = EYE ( expr ) .)
    +               reduce using rule 42 (expr -> ID = EYE ( expr ) .)
    -               reduce using rule 42 (expr -> ID = EYE ( expr ) .)
    *               reduce using rule 42 (expr -> ID = EYE ( expr ) .)
    /               reduce using rule 42 (expr -> ID = EYE ( expr ) .)
    MPLUS           reduce using rule 42 (expr -> ID = EYE ( expr ) .)
    MMINUS          reduce using rule 42 (expr -> ID = EYE ( expr ) .)
    MMLTP           reduce using rule 42 (expr -> ID = EYE ( expr ) .)
    MDIV            reduce using rule 42 (expr -> ID = EYE ( expr ) .)
    EQ              reduce using rule 42 (expr -> ID = EYE ( expr ) .)
    NEQ             reduce using rule 42 (expr -> ID = EYE ( expr ) .)
    GTEQ            reduce using rule 42 (expr -> ID = EYE ( expr ) .)
    LTEQ            reduce using rule 42 (expr -> ID = EYE ( expr ) .)
    >               reduce using rule 42 (expr -> ID = EYE ( expr ) .)
    <               reduce using rule 42 (expr -> ID = EYE ( expr ) .)
    )               reduce using rule 42 (expr -> ID = EYE ( expr ) .)
    ]               reduce using rule 42 (expr -> ID = EYE ( expr ) .)
    ,               reduce using rule 42 (expr -> ID = EYE ( expr ) .)
    :               reduce using rule 42 (expr -> ID = EYE ( expr ) .)
    {               reduce using rule 42 (expr -> ID = EYE ( expr ) .)
    INTNUM          reduce using rule 42 (expr -> ID = EYE ( expr ) .)
    FLOATNUM        reduce using rule 42 (expr -> ID = EYE ( expr ) .)
    STRING          reduce using rule 42 (expr -> ID = EYE ( expr ) .)
    ID              reduce using rule 42 (expr -> ID = EYE ( expr ) .)
    (               reduce using rule 42 (expr -> ID = EYE ( expr ) .)
    [               reduce using rule 42 (expr -> ID = EYE ( expr ) .)
    BREAK           reduce using rule 42 (expr -> ID = EYE ( expr ) .)
    CONTINUE        reduce using rule 42 (expr -> ID = EYE ( expr ) .)
    RETURN          reduce using rule 42 (expr -> ID = EYE ( expr ) .)
    PRINT           reduce using rule 42 (expr -> ID = EYE ( expr ) .)
    IF              reduce using rule 42 (expr -> ID = EYE ( expr ) .)
    WHILE           reduce using rule 42 (expr -> ID = EYE ( expr ) .)
    FOR             reduce using rule 42 (expr -> ID = EYE ( expr ) .)


state 133

    (30) expr -> ID [ expr ] = expr .
    (21) expr -> expr . '
    (43) expr -> expr . + expr
    (44) expr -> expr . - expr
    (45) expr -> expr . * expr
    (46) expr -> expr . / expr
    (47) expr -> expr . MPLUS expr
    (48) expr -> expr . MMINUS expr
    (49) expr -> expr . MMLTP expr
    (50) expr -> expr . MDIV expr
    (51) expr -> expr . EQ expr
    (52) expr -> expr . NEQ expr
    (53) expr -> expr . GTEQ expr
    (54) expr -> expr . LTEQ expr
    (55) expr -> expr . > expr
    (56) expr -> expr . < expr

    ;               reduce using rule 30 (expr -> ID [ expr ] = expr .)
    EQ              reduce using rule 30 (expr -> ID [ expr ] = expr .)
    NEQ             reduce using rule 30 (expr -> ID [ expr ] = expr .)
    GTEQ            reduce using rule 30 (expr -> ID [ expr ] = expr .)
    LTEQ            reduce using rule 30 (expr -> ID [ expr ] = expr .)
    >               reduce using rule 30 (expr -> ID [ expr ] = expr .)
    <               reduce using rule 30 (expr -> ID [ expr ] = expr .)
    )               reduce using rule 30 (expr -> ID [ expr ] = expr .)
    ]               reduce using rule 30 (expr -> ID [ expr ] = expr .)
    ,               reduce using rule 30 (expr -> ID [ expr ] = expr .)
    :               reduce using rule 30 (expr -> ID [ expr ] = expr .)
    {               reduce using rule 30 (expr -> ID [ expr ] = expr .)
    INTNUM          reduce using rule 30 (expr -> ID [ expr ] = expr .)
    FLOATNUM        reduce using rule 30 (expr -> ID [ expr ] = expr .)
    STRING          reduce using rule 30 (expr -> ID [ expr ] = expr .)
    ID              reduce using rule 30 (expr -> ID [ expr ] = expr .)
    (               reduce using rule 30 (expr -> ID [ expr ] = expr .)
    [               reduce using rule 30 (expr -> ID [ expr ] = expr .)
    BREAK           reduce using rule 30 (expr -> ID [ expr ] = expr .)
    CONTINUE        reduce using rule 30 (expr -> ID [ expr ] = expr .)
    RETURN          reduce using rule 30 (expr -> ID [ expr ] = expr .)
    PRINT           reduce using rule 30 (expr -> ID [ expr ] = expr .)
    IF              reduce using rule 30 (expr -> ID [ expr ] = expr .)
    WHILE           reduce using rule 30 (expr -> ID [ expr ] = expr .)
    FOR             reduce using rule 30 (expr -> ID [ expr ] = expr .)
    '               shift and go to state 26
    +               shift and go to state 27
    -               shift and go to state 28
    *               shift and go to state 29
    /               shift and go to state 30
    MPLUS           shift and go to state 31
    MMINUS          shift and go to state 32
    MMLTP           shift and go to state 33
    MDIV            shift and go to state 34

  ! '               [ reduce using rule 30 (expr -> ID [ expr ] = expr .) ]
  ! +               [ reduce using rule 30 (expr -> ID [ expr ] = expr .) ]
  ! -               [ reduce using rule 30 (expr -> ID [ expr ] = expr .) ]
  ! *               [ reduce using rule 30 (expr -> ID [ expr ] = expr .) ]
  ! /               [ reduce using rule 30 (expr -> ID [ expr ] = expr .) ]
  ! MPLUS           [ reduce using rule 30 (expr -> ID [ expr ] = expr .) ]
  ! MMINUS          [ reduce using rule 30 (expr -> ID [ expr ] = expr .) ]
  ! MMLTP           [ reduce using rule 30 (expr -> ID [ expr ] = expr .) ]
  ! MDIV            [ reduce using rule 30 (expr -> ID [ expr ] = expr .) ]
  ! EQ              [ shift and go to state 35 ]
  ! NEQ             [ shift and go to state 36 ]
  ! GTEQ            [ shift and go to state 37 ]
  ! LTEQ            [ shift and go to state 38 ]
  ! >               [ shift and go to state 39 ]
  ! <               [ shift and go to state 40 ]


state 134

    (31) expr -> ID [ expr ] PLUSASSIGN expr .
    (21) expr -> expr . '
    (43) expr -> expr . + expr
    (44) expr -> expr . - expr
    (45) expr -> expr . * expr
    (46) expr -> expr . / expr
    (47) expr -> expr . MPLUS expr
    (48) expr -> expr . MMINUS expr
    (49) expr -> expr . MMLTP expr
    (50) expr -> expr . MDIV expr
    (51) expr -> expr . EQ expr
    (52) expr -> expr . NEQ expr
    (53) expr -> expr . GTEQ expr
    (54) expr -> expr . LTEQ expr
    (55) expr -> expr . > expr
    (56) expr -> expr . < expr

    ;               reduce using rule 31 (expr -> ID [ expr ] PLUSASSIGN expr .)
    EQ              reduce using rule 31 (expr -> ID [ expr ] PLUSASSIGN expr .)
    NEQ             reduce using rule 31 (expr -> ID [ expr ] PLUSASSIGN expr .)
    GTEQ            reduce using rule 31 (expr -> ID [ expr ] PLUSASSIGN expr .)
    LTEQ            reduce using rule 31 (expr -> ID [ expr ] PLUSASSIGN expr .)
    >               reduce using rule 31 (expr -> ID [ expr ] PLUSASSIGN expr .)
    <               reduce using rule 31 (expr -> ID [ expr ] PLUSASSIGN expr .)
    )               reduce using rule 31 (expr -> ID [ expr ] PLUSASSIGN expr .)
    ]               reduce using rule 31 (expr -> ID [ expr ] PLUSASSIGN expr .)
    ,               reduce using rule 31 (expr -> ID [ expr ] PLUSASSIGN expr .)
    :               reduce using rule 31 (expr -> ID [ expr ] PLUSASSIGN expr .)
    {               reduce using rule 31 (expr -> ID [ expr ] PLUSASSIGN expr .)
    INTNUM          reduce using rule 31 (expr -> ID [ expr ] PLUSASSIGN expr .)
    FLOATNUM        reduce using rule 31 (expr -> ID [ expr ] PLUSASSIGN expr .)
    STRING          reduce using rule 31 (expr -> ID [ expr ] PLUSASSIGN expr .)
    ID              reduce using rule 31 (expr -> ID [ expr ] PLUSASSIGN expr .)
    (               reduce using rule 31 (expr -> ID [ expr ] PLUSASSIGN expr .)
    [               reduce using rule 31 (expr -> ID [ expr ] PLUSASSIGN expr .)
    BREAK           reduce using rule 31 (expr -> ID [ expr ] PLUSASSIGN expr .)
    CONTINUE        reduce using rule 31 (expr -> ID [ expr ] PLUSASSIGN expr .)
    RETURN          reduce using rule 31 (expr -> ID [ expr ] PLUSASSIGN expr .)
    PRINT           reduce using rule 31 (expr -> ID [ expr ] PLUSASSIGN expr .)
    IF              reduce using rule 31 (expr -> ID [ expr ] PLUSASSIGN expr .)
    WHILE           reduce using rule 31 (expr -> ID [ expr ] PLUSASSIGN expr .)
    FOR             reduce using rule 31 (expr -> ID [ expr ] PLUSASSIGN expr .)
    '               shift and go to state 26
    +               shift and go to state 27
    -               shift and go to state 28
    *               shift and go to state 29
    /               shift and go to state 30
    MPLUS           shift and go to state 31
    MMINUS          shift and go to state 32
    MMLTP           shift and go to state 33
    MDIV            shift and go to state 34

  ! '               [ reduce using rule 31 (expr -> ID [ expr ] PLUSASSIGN expr .) ]
  ! +               [ reduce using rule 31 (expr -> ID [ expr ] PLUSASSIGN expr .) ]
  ! -               [ reduce using rule 31 (expr -> ID [ expr ] PLUSASSIGN expr .) ]
  ! *               [ reduce using rule 31 (expr -> ID [ expr ] PLUSASSIGN expr .) ]
  ! /               [ reduce using rule 31 (expr -> ID [ expr ] PLUSASSIGN expr .) ]
  ! MPLUS           [ reduce using rule 31 (expr -> ID [ expr ] PLUSASSIGN expr .) ]
  ! MMINUS          [ reduce using rule 31 (expr -> ID [ expr ] PLUSASSIGN expr .) ]
  ! MMLTP           [ reduce using rule 31 (expr -> ID [ expr ] PLUSASSIGN expr .) ]
  ! MDIV            [ reduce using rule 31 (expr -> ID [ expr ] PLUSASSIGN expr .) ]
  ! EQ              [ shift and go to state 35 ]
  ! NEQ             [ shift and go to state 36 ]
  ! GTEQ            [ shift and go to state 37 ]
  ! LTEQ            [ shift and go to state 38 ]
  ! >               [ shift and go to state 39 ]
  ! <               [ shift and go to state 40 ]


state 135

    (32) expr -> ID [ expr ] MINASSIGN expr .
    (21) expr -> expr . '
    (43) expr -> expr . + expr
    (44) expr -> expr . - expr
    (45) expr -> expr . * expr
    (46) expr -> expr . / expr
    (47) expr -> expr . MPLUS expr
    (48) expr -> expr . MMINUS expr
    (49) expr -> expr . MMLTP expr
    (50) expr -> expr . MDIV expr
    (51) expr -> expr . EQ expr
    (52) expr -> expr . NEQ expr
    (53) expr -> expr . GTEQ expr
    (54) expr -> expr . LTEQ expr
    (55) expr -> expr . > expr
    (56) expr -> expr . < expr

    ;               reduce using rule 32 (expr -> ID [ expr ] MINASSIGN expr .)
    EQ              reduce using rule 32 (expr -> ID [ expr ] MINASSIGN expr .)
    NEQ             reduce using rule 32 (expr -> ID [ expr ] MINASSIGN expr .)
    GTEQ            reduce using rule 32 (expr -> ID [ expr ] MINASSIGN expr .)
    LTEQ            reduce using rule 32 (expr -> ID [ expr ] MINASSIGN expr .)
    >               reduce using rule 32 (expr -> ID [ expr ] MINASSIGN expr .)
    <               reduce using rule 32 (expr -> ID [ expr ] MINASSIGN expr .)
    )               reduce using rule 32 (expr -> ID [ expr ] MINASSIGN expr .)
    ]               reduce using rule 32 (expr -> ID [ expr ] MINASSIGN expr .)
    ,               reduce using rule 32 (expr -> ID [ expr ] MINASSIGN expr .)
    :               reduce using rule 32 (expr -> ID [ expr ] MINASSIGN expr .)
    {               reduce using rule 32 (expr -> ID [ expr ] MINASSIGN expr .)
    INTNUM          reduce using rule 32 (expr -> ID [ expr ] MINASSIGN expr .)
    FLOATNUM        reduce using rule 32 (expr -> ID [ expr ] MINASSIGN expr .)
    STRING          reduce using rule 32 (expr -> ID [ expr ] MINASSIGN expr .)
    ID              reduce using rule 32 (expr -> ID [ expr ] MINASSIGN expr .)
    (               reduce using rule 32 (expr -> ID [ expr ] MINASSIGN expr .)
    [               reduce using rule 32 (expr -> ID [ expr ] MINASSIGN expr .)
    BREAK           reduce using rule 32 (expr -> ID [ expr ] MINASSIGN expr .)
    CONTINUE        reduce using rule 32 (expr -> ID [ expr ] MINASSIGN expr .)
    RETURN          reduce using rule 32 (expr -> ID [ expr ] MINASSIGN expr .)
    PRINT           reduce using rule 32 (expr -> ID [ expr ] MINASSIGN expr .)
    IF              reduce using rule 32 (expr -> ID [ expr ] MINASSIGN expr .)
    WHILE           reduce using rule 32 (expr -> ID [ expr ] MINASSIGN expr .)
    FOR             reduce using rule 32 (expr -> ID [ expr ] MINASSIGN expr .)
    '               shift and go to state 26
    +               shift and go to state 27
    -               shift and go to state 28
    *               shift and go to state 29
    /               shift and go to state 30
    MPLUS           shift and go to state 31
    MMINUS          shift and go to state 32
    MMLTP           shift and go to state 33
    MDIV            shift and go to state 34

  ! '               [ reduce using rule 32 (expr -> ID [ expr ] MINASSIGN expr .) ]
  ! +               [ reduce using rule 32 (expr -> ID [ expr ] MINASSIGN expr .) ]
  ! -               [ reduce using rule 32 (expr -> ID [ expr ] MINASSIGN expr .) ]
  ! *               [ reduce using rule 32 (expr -> ID [ expr ] MINASSIGN expr .) ]
  ! /               [ reduce using rule 32 (expr -> ID [ expr ] MINASSIGN expr .) ]
  ! MPLUS           [ reduce using rule 32 (expr -> ID [ expr ] MINASSIGN expr .) ]
  ! MMINUS          [ reduce using rule 32 (expr -> ID [ expr ] MINASSIGN expr .) ]
  ! MMLTP           [ reduce using rule 32 (expr -> ID [ expr ] MINASSIGN expr .) ]
  ! MDIV            [ reduce using rule 32 (expr -> ID [ expr ] MINASSIGN expr .) ]
  ! EQ              [ shift and go to state 35 ]
  ! NEQ             [ shift and go to state 36 ]
  ! GTEQ            [ shift and go to state 37 ]
  ! LTEQ            [ shift and go to state 38 ]
  ! >               [ shift and go to state 39 ]
  ! <               [ shift and go to state 40 ]


state 136

    (33) expr -> ID [ expr ] MULTASSIGN expr .
    (21) expr -> expr . '
    (43) expr -> expr . + expr
    (44) expr -> expr . - expr
    (45) expr -> expr . * expr
    (46) expr -> expr . / expr
    (47) expr -> expr . MPLUS expr
    (48) expr -> expr . MMINUS expr
    (49) expr -> expr . MMLTP expr
    (50) expr -> expr . MDIV expr
    (51) expr -> expr . EQ expr
    (52) expr -> expr . NEQ expr
    (53) expr -> expr . GTEQ expr
    (54) expr -> expr . LTEQ expr
    (55) expr -> expr . > expr
    (56) expr -> expr . < expr

    ;               reduce using rule 33 (expr -> ID [ expr ] MULTASSIGN expr .)
    EQ              reduce using rule 33 (expr -> ID [ expr ] MULTASSIGN expr .)
    NEQ             reduce using rule 33 (expr -> ID [ expr ] MULTASSIGN expr .)
    GTEQ            reduce using rule 33 (expr -> ID [ expr ] MULTASSIGN expr .)
    LTEQ            reduce using rule 33 (expr -> ID [ expr ] MULTASSIGN expr .)
    >               reduce using rule 33 (expr -> ID [ expr ] MULTASSIGN expr .)
    <               reduce using rule 33 (expr -> ID [ expr ] MULTASSIGN expr .)
    )               reduce using rule 33 (expr -> ID [ expr ] MULTASSIGN expr .)
    ]               reduce using rule 33 (expr -> ID [ expr ] MULTASSIGN expr .)
    ,               reduce using rule 33 (expr -> ID [ expr ] MULTASSIGN expr .)
    :               reduce using rule 33 (expr -> ID [ expr ] MULTASSIGN expr .)
    {               reduce using rule 33 (expr -> ID [ expr ] MULTASSIGN expr .)
    INTNUM          reduce using rule 33 (expr -> ID [ expr ] MULTASSIGN expr .)
    FLOATNUM        reduce using rule 33 (expr -> ID [ expr ] MULTASSIGN expr .)
    STRING          reduce using rule 33 (expr -> ID [ expr ] MULTASSIGN expr .)
    ID              reduce using rule 33 (expr -> ID [ expr ] MULTASSIGN expr .)
    (               reduce using rule 33 (expr -> ID [ expr ] MULTASSIGN expr .)
    [               reduce using rule 33 (expr -> ID [ expr ] MULTASSIGN expr .)
    BREAK           reduce using rule 33 (expr -> ID [ expr ] MULTASSIGN expr .)
    CONTINUE        reduce using rule 33 (expr -> ID [ expr ] MULTASSIGN expr .)
    RETURN          reduce using rule 33 (expr -> ID [ expr ] MULTASSIGN expr .)
    PRINT           reduce using rule 33 (expr -> ID [ expr ] MULTASSIGN expr .)
    IF              reduce using rule 33 (expr -> ID [ expr ] MULTASSIGN expr .)
    WHILE           reduce using rule 33 (expr -> ID [ expr ] MULTASSIGN expr .)
    FOR             reduce using rule 33 (expr -> ID [ expr ] MULTASSIGN expr .)
    '               shift and go to state 26
    +               shift and go to state 27
    -               shift and go to state 28
    *               shift and go to state 29
    /               shift and go to state 30
    MPLUS           shift and go to state 31
    MMINUS          shift and go to state 32
    MMLTP           shift and go to state 33
    MDIV            shift and go to state 34

  ! '               [ reduce using rule 33 (expr -> ID [ expr ] MULTASSIGN expr .) ]
  ! +               [ reduce using rule 33 (expr -> ID [ expr ] MULTASSIGN expr .) ]
  ! -               [ reduce using rule 33 (expr -> ID [ expr ] MULTASSIGN expr .) ]
  ! *               [ reduce using rule 33 (expr -> ID [ expr ] MULTASSIGN expr .) ]
  ! /               [ reduce using rule 33 (expr -> ID [ expr ] MULTASSIGN expr .) ]
  ! MPLUS           [ reduce using rule 33 (expr -> ID [ expr ] MULTASSIGN expr .) ]
  ! MMINUS          [ reduce using rule 33 (expr -> ID [ expr ] MULTASSIGN expr .) ]
  ! MMLTP           [ reduce using rule 33 (expr -> ID [ expr ] MULTASSIGN expr .) ]
  ! MDIV            [ reduce using rule 33 (expr -> ID [ expr ] MULTASSIGN expr .) ]
  ! EQ              [ shift and go to state 35 ]
  ! NEQ             [ shift and go to state 36 ]
  ! GTEQ            [ shift and go to state 37 ]
  ! LTEQ            [ shift and go to state 38 ]
  ! >               [ shift and go to state 39 ]
  ! <               [ shift and go to state 40 ]


state 137

    (34) expr -> ID [ expr ] DIVASSIGN expr .
    (21) expr -> expr . '
    (43) expr -> expr . + expr
    (44) expr -> expr . - expr
    (45) expr -> expr . * expr
    (46) expr -> expr . / expr
    (47) expr -> expr . MPLUS expr
    (48) expr -> expr . MMINUS expr
    (49) expr -> expr . MMLTP expr
    (50) expr -> expr . MDIV expr
    (51) expr -> expr . EQ expr
    (52) expr -> expr . NEQ expr
    (53) expr -> expr . GTEQ expr
    (54) expr -> expr . LTEQ expr
    (55) expr -> expr . > expr
    (56) expr -> expr . < expr

    ;               reduce using rule 34 (expr -> ID [ expr ] DIVASSIGN expr .)
    EQ              reduce using rule 34 (expr -> ID [ expr ] DIVASSIGN expr .)
    NEQ             reduce using rule 34 (expr -> ID [ expr ] DIVASSIGN expr .)
    GTEQ            reduce using rule 34 (expr -> ID [ expr ] DIVASSIGN expr .)
    LTEQ            reduce using rule 34 (expr -> ID [ expr ] DIVASSIGN expr .)
    >               reduce using rule 34 (expr -> ID [ expr ] DIVASSIGN expr .)
    <               reduce using rule 34 (expr -> ID [ expr ] DIVASSIGN expr .)
    )               reduce using rule 34 (expr -> ID [ expr ] DIVASSIGN expr .)
    ]               reduce using rule 34 (expr -> ID [ expr ] DIVASSIGN expr .)
    ,               reduce using rule 34 (expr -> ID [ expr ] DIVASSIGN expr .)
    :               reduce using rule 34 (expr -> ID [ expr ] DIVASSIGN expr .)
    {               reduce using rule 34 (expr -> ID [ expr ] DIVASSIGN expr .)
    INTNUM          reduce using rule 34 (expr -> ID [ expr ] DIVASSIGN expr .)
    FLOATNUM        reduce using rule 34 (expr -> ID [ expr ] DIVASSIGN expr .)
    STRING          reduce using rule 34 (expr -> ID [ expr ] DIVASSIGN expr .)
    ID              reduce using rule 34 (expr -> ID [ expr ] DIVASSIGN expr .)
    (               reduce using rule 34 (expr -> ID [ expr ] DIVASSIGN expr .)
    [               reduce using rule 34 (expr -> ID [ expr ] DIVASSIGN expr .)
    BREAK           reduce using rule 34 (expr -> ID [ expr ] DIVASSIGN expr .)
    CONTINUE        reduce using rule 34 (expr -> ID [ expr ] DIVASSIGN expr .)
    RETURN          reduce using rule 34 (expr -> ID [ expr ] DIVASSIGN expr .)
    PRINT           reduce using rule 34 (expr -> ID [ expr ] DIVASSIGN expr .)
    IF              reduce using rule 34 (expr -> ID [ expr ] DIVASSIGN expr .)
    WHILE           reduce using rule 34 (expr -> ID [ expr ] DIVASSIGN expr .)
    FOR             reduce using rule 34 (expr -> ID [ expr ] DIVASSIGN expr .)
    '               shift and go to state 26
    +               shift and go to state 27
    -               shift and go to state 28
    *               shift and go to state 29
    /               shift and go to state 30
    MPLUS           shift and go to state 31
    MMINUS          shift and go to state 32
    MMLTP           shift and go to state 33
    MDIV            shift and go to state 34

  ! '               [ reduce using rule 34 (expr -> ID [ expr ] DIVASSIGN expr .) ]
  ! +               [ reduce using rule 34 (expr -> ID [ expr ] DIVASSIGN expr .) ]
  ! -               [ reduce using rule 34 (expr -> ID [ expr ] DIVASSIGN expr .) ]
  ! *               [ reduce using rule 34 (expr -> ID [ expr ] DIVASSIGN expr .) ]
  ! /               [ reduce using rule 34 (expr -> ID [ expr ] DIVASSIGN expr .) ]
  ! MPLUS           [ reduce using rule 34 (expr -> ID [ expr ] DIVASSIGN expr .) ]
  ! MMINUS          [ reduce using rule 34 (expr -> ID [ expr ] DIVASSIGN expr .) ]
  ! MMLTP           [ reduce using rule 34 (expr -> ID [ expr ] DIVASSIGN expr .) ]
  ! MDIV            [ reduce using rule 34 (expr -> ID [ expr ] DIVASSIGN expr .) ]
  ! EQ              [ shift and go to state 35 ]
  ! NEQ             [ shift and go to state 36 ]
  ! GTEQ            [ shift and go to state 37 ]
  ! LTEQ            [ shift and go to state 38 ]
  ! >               [ shift and go to state 39 ]
  ! <               [ shift and go to state 40 ]


state 138

    (35) expr -> ID [ expr , expr ] . = expr
    (36) expr -> ID [ expr , expr ] . PLUSASSIGN expr
    (37) expr -> ID [ expr , expr ] . MINASSIGN expr
    (38) expr -> ID [ expr , expr ] . MULTASSIGN expr
    (39) expr -> ID [ expr , expr ] . DIVASSIGN expr

    =               shift and go to state 150
    PLUSASSIGN      shift and go to state 151
    MINASSIGN       shift and go to state 152
    MULTASSIGN      shift and go to state 153
    DIVASSIGN       shift and go to state 154


state 139

    (12) loop_struct -> expr ; .

    {               reduce using rule 12 (loop_struct -> expr ; .)
    INTNUM          reduce using rule 12 (loop_struct -> expr ; .)
    FLOATNUM        reduce using rule 12 (loop_struct -> expr ; .)
    STRING          reduce using rule 12 (loop_struct -> expr ; .)
    ID              reduce using rule 12 (loop_struct -> expr ; .)
    (               reduce using rule 12 (loop_struct -> expr ; .)
    -               reduce using rule 12 (loop_struct -> expr ; .)
    [               reduce using rule 12 (loop_struct -> expr ; .)
    RETURN          reduce using rule 12 (loop_struct -> expr ; .)
    PRINT           reduce using rule 12 (loop_struct -> expr ; .)
    IF              reduce using rule 12 (loop_struct -> expr ; .)
    WHILE           reduce using rule 12 (loop_struct -> expr ; .)
    FOR             reduce using rule 12 (loop_struct -> expr ; .)
    $end            reduce using rule 12 (loop_struct -> expr ; .)
    }               reduce using rule 12 (loop_struct -> expr ; .)
    ELSE            reduce using rule 12 (loop_struct -> expr ; .)
    BREAK           reduce using rule 12 (loop_struct -> expr ; .)
    CONTINUE        reduce using rule 12 (loop_struct -> expr ; .)


state 140

    (10) loop_start -> { . loop_start }
    (8) loop_start -> . loop_struct
    (9) loop_start -> . loop_start loop_struct
    (10) loop_start -> . { loop_start }
    (11) loop_start -> . loop_start { loop_start }
    (12) loop_struct -> . expr ;
    (13) loop_struct -> . loop_cond_expr
    (14) loop_struct -> . loop_instruction
    (15) expr -> . INTNUM
    (16) expr -> . FLOATNUM
    (17) expr -> . STRING
    (18) expr -> . ID
    (19) expr -> . ( expr )
    (20) expr -> . - expr
    (21) expr -> . expr '
    (24) expr -> . [ array_interior ]
    (25) expr -> . ID = expr
    (26) expr -> . ID PLUSASSIGN expr
    (27) expr -> . ID MINASSIGN expr
    (28) expr -> . ID MULTASSIGN expr
    (29) expr -> . ID DIVASSIGN expr
    (30) expr -> . ID [ expr ] = expr
    (31) expr -> . ID [ expr ] PLUSASSIGN expr
    (32) expr -> . ID [ expr ] MINASSIGN expr
    (33) expr -> . ID [ expr ] MULTASSIGN expr
    (34) expr -> . ID [ expr ] DIVASSIGN expr
    (35) expr -> . ID [ expr , expr ] = expr
    (36) expr -> . ID [ expr , expr ] PLUSASSIGN expr
    (37) expr -> . ID [ expr , expr ] MINASSIGN expr
    (38) expr -> . ID [ expr , expr ] MULTASSIGN expr
    (39) expr -> . ID [ expr , expr ] DIVASSIGN expr
    (40) expr -> . ID = ZEROS ( expr )
    (41) expr -> . ID = ONES ( expr )
    (42) expr -> . ID = EYE ( expr )
    (43) expr -> . expr + expr
    (44) expr -> . expr - expr
    (45) expr -> . expr * expr
    (46) expr -> . expr / expr
    (47) expr -> . expr MPLUS expr
    (48) expr -> . expr MMINUS expr
    (49) expr -> . expr MMLTP expr
    (50) expr -> . expr MDIV expr
    (51) expr -> . expr EQ expr
    (52) expr -> . expr NEQ expr
    (53) expr -> . expr GTEQ expr
    (54) expr -> . expr LTEQ expr
    (55) expr -> . expr > expr
    (56) expr -> . expr < expr
    (64) loop_cond_expr -> . loop_cond_if
    (65) loop_cond_expr -> . cond_while
    (66) loop_cond_expr -> . cond_for
    (75) loop_instruction -> . BREAK ;
    (76) loop_instruction -> . CONTINUE ;
    (77) loop_instruction -> . RETURN expr ;
    (78) loop_instruction -> . PRINT array_interior ;
    (69) loop_cond_if -> . IF ( expr ) loop_cond_block
    (70) loop_cond_if -> . loop_cond_if ELSE loop_cond_block
    (71) cond_while -> . WHILE ( expr ) loop_cond_block
    (72) cond_for -> . FOR ID = expr : expr loop_cond_block

    {               shift and go to state 140
    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ID              shift and go to state 10
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13
    BREAK           shift and go to state 124
    CONTINUE        shift and go to state 125
    RETURN          shift and go to state 126
    PRINT           shift and go to state 127
    IF              shift and go to state 128
    WHILE           shift and go to state 20
    FOR             shift and go to state 21

    loop_start                     shift and go to state 155
    loop_struct                    shift and go to state 142
    expr                           shift and go to state 115
    loop_cond_expr                 shift and go to state 119
    loop_instruction               shift and go to state 120
    loop_cond_if                   shift and go to state 121
    cond_while                     shift and go to state 122
    cond_for                       shift and go to state 123

state 141

    (68) loop_cond_block -> { loop_start . }
    (9) loop_start -> loop_start . loop_struct
    (11) loop_start -> loop_start . { loop_start }
    (12) loop_struct -> . expr ;
    (13) loop_struct -> . loop_cond_expr
    (14) loop_struct -> . loop_instruction
    (15) expr -> . INTNUM
    (16) expr -> . FLOATNUM
    (17) expr -> . STRING
    (18) expr -> . ID
    (19) expr -> . ( expr )
    (20) expr -> . - expr
    (21) expr -> . expr '
    (24) expr -> . [ array_interior ]
    (25) expr -> . ID = expr
    (26) expr -> . ID PLUSASSIGN expr
    (27) expr -> . ID MINASSIGN expr
    (28) expr -> . ID MULTASSIGN expr
    (29) expr -> . ID DIVASSIGN expr
    (30) expr -> . ID [ expr ] = expr
    (31) expr -> . ID [ expr ] PLUSASSIGN expr
    (32) expr -> . ID [ expr ] MINASSIGN expr
    (33) expr -> . ID [ expr ] MULTASSIGN expr
    (34) expr -> . ID [ expr ] DIVASSIGN expr
    (35) expr -> . ID [ expr , expr ] = expr
    (36) expr -> . ID [ expr , expr ] PLUSASSIGN expr
    (37) expr -> . ID [ expr , expr ] MINASSIGN expr
    (38) expr -> . ID [ expr , expr ] MULTASSIGN expr
    (39) expr -> . ID [ expr , expr ] DIVASSIGN expr
    (40) expr -> . ID = ZEROS ( expr )
    (41) expr -> . ID = ONES ( expr )
    (42) expr -> . ID = EYE ( expr )
    (43) expr -> . expr + expr
    (44) expr -> . expr - expr
    (45) expr -> . expr * expr
    (46) expr -> . expr / expr
    (47) expr -> . expr MPLUS expr
    (48) expr -> . expr MMINUS expr
    (49) expr -> . expr MMLTP expr
    (50) expr -> . expr MDIV expr
    (51) expr -> . expr EQ expr
    (52) expr -> . expr NEQ expr
    (53) expr -> . expr GTEQ expr
    (54) expr -> . expr LTEQ expr
    (55) expr -> . expr > expr
    (56) expr -> . expr < expr
    (64) loop_cond_expr -> . loop_cond_if
    (65) loop_cond_expr -> . cond_while
    (66) loop_cond_expr -> . cond_for
    (75) loop_instruction -> . BREAK ;
    (76) loop_instruction -> . CONTINUE ;
    (77) loop_instruction -> . RETURN expr ;
    (78) loop_instruction -> . PRINT array_interior ;
    (69) loop_cond_if -> . IF ( expr ) loop_cond_block
    (70) loop_cond_if -> . loop_cond_if ELSE loop_cond_block
    (71) cond_while -> . WHILE ( expr ) loop_cond_block
    (72) cond_for -> . FOR ID = expr : expr loop_cond_block

    }               shift and go to state 157
    {               shift and go to state 156
    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ID              shift and go to state 10
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13
    BREAK           shift and go to state 124
    CONTINUE        shift and go to state 125
    RETURN          shift and go to state 126
    PRINT           shift and go to state 127
    IF              shift and go to state 128
    WHILE           shift and go to state 20
    FOR             shift and go to state 21

    loop_struct                    shift and go to state 158
    expr                           shift and go to state 115
    loop_cond_expr                 shift and go to state 119
    loop_instruction               shift and go to state 120
    loop_cond_if                   shift and go to state 121
    cond_while                     shift and go to state 122
    cond_for                       shift and go to state 123

state 142

    (8) loop_start -> loop_struct .

    }               reduce using rule 8 (loop_start -> loop_struct .)
    {               reduce using rule 8 (loop_start -> loop_struct .)
    INTNUM          reduce using rule 8 (loop_start -> loop_struct .)
    FLOATNUM        reduce using rule 8 (loop_start -> loop_struct .)
    STRING          reduce using rule 8 (loop_start -> loop_struct .)
    ID              reduce using rule 8 (loop_start -> loop_struct .)
    (               reduce using rule 8 (loop_start -> loop_struct .)
    -               reduce using rule 8 (loop_start -> loop_struct .)
    [               reduce using rule 8 (loop_start -> loop_struct .)
    BREAK           reduce using rule 8 (loop_start -> loop_struct .)
    CONTINUE        reduce using rule 8 (loop_start -> loop_struct .)
    RETURN          reduce using rule 8 (loop_start -> loop_struct .)
    PRINT           reduce using rule 8 (loop_start -> loop_struct .)
    IF              reduce using rule 8 (loop_start -> loop_struct .)
    WHILE           reduce using rule 8 (loop_start -> loop_struct .)
    FOR             reduce using rule 8 (loop_start -> loop_struct .)


state 143

    (70) loop_cond_if -> loop_cond_if ELSE . loop_cond_block
    (67) loop_cond_block -> . loop_struct
    (68) loop_cond_block -> . { loop_start }
    (12) loop_struct -> . expr ;
    (13) loop_struct -> . loop_cond_expr
    (14) loop_struct -> . loop_instruction
    (15) expr -> . INTNUM
    (16) expr -> . FLOATNUM
    (17) expr -> . STRING
    (18) expr -> . ID
    (19) expr -> . ( expr )
    (20) expr -> . - expr
    (21) expr -> . expr '
    (24) expr -> . [ array_interior ]
    (25) expr -> . ID = expr
    (26) expr -> . ID PLUSASSIGN expr
    (27) expr -> . ID MINASSIGN expr
    (28) expr -> . ID MULTASSIGN expr
    (29) expr -> . ID DIVASSIGN expr
    (30) expr -> . ID [ expr ] = expr
    (31) expr -> . ID [ expr ] PLUSASSIGN expr
    (32) expr -> . ID [ expr ] MINASSIGN expr
    (33) expr -> . ID [ expr ] MULTASSIGN expr
    (34) expr -> . ID [ expr ] DIVASSIGN expr
    (35) expr -> . ID [ expr , expr ] = expr
    (36) expr -> . ID [ expr , expr ] PLUSASSIGN expr
    (37) expr -> . ID [ expr , expr ] MINASSIGN expr
    (38) expr -> . ID [ expr , expr ] MULTASSIGN expr
    (39) expr -> . ID [ expr , expr ] DIVASSIGN expr
    (40) expr -> . ID = ZEROS ( expr )
    (41) expr -> . ID = ONES ( expr )
    (42) expr -> . ID = EYE ( expr )
    (43) expr -> . expr + expr
    (44) expr -> . expr - expr
    (45) expr -> . expr * expr
    (46) expr -> . expr / expr
    (47) expr -> . expr MPLUS expr
    (48) expr -> . expr MMINUS expr
    (49) expr -> . expr MMLTP expr
    (50) expr -> . expr MDIV expr
    (51) expr -> . expr EQ expr
    (52) expr -> . expr NEQ expr
    (53) expr -> . expr GTEQ expr
    (54) expr -> . expr LTEQ expr
    (55) expr -> . expr > expr
    (56) expr -> . expr < expr
    (64) loop_cond_expr -> . loop_cond_if
    (65) loop_cond_expr -> . cond_while
    (66) loop_cond_expr -> . cond_for
    (75) loop_instruction -> . BREAK ;
    (76) loop_instruction -> . CONTINUE ;
    (77) loop_instruction -> . RETURN expr ;
    (78) loop_instruction -> . PRINT array_interior ;
    (69) loop_cond_if -> . IF ( expr ) loop_cond_block
    (70) loop_cond_if -> . loop_cond_if ELSE loop_cond_block
    (71) cond_while -> . WHILE ( expr ) loop_cond_block
    (72) cond_for -> . FOR ID = expr : expr loop_cond_block

    {               shift and go to state 118
    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ID              shift and go to state 10
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13
    BREAK           shift and go to state 124
    CONTINUE        shift and go to state 125
    RETURN          shift and go to state 126
    PRINT           shift and go to state 127
    IF              shift and go to state 128
    WHILE           shift and go to state 20
    FOR             shift and go to state 21

    loop_cond_if                   shift and go to state 121
    loop_cond_block                shift and go to state 159
    loop_struct                    shift and go to state 117
    expr                           shift and go to state 115
    loop_cond_expr                 shift and go to state 119
    loop_instruction               shift and go to state 120
    cond_while                     shift and go to state 122
    cond_for                       shift and go to state 123

state 144

    (75) loop_instruction -> BREAK ; .

    {               reduce using rule 75 (loop_instruction -> BREAK ; .)
    INTNUM          reduce using rule 75 (loop_instruction -> BREAK ; .)
    FLOATNUM        reduce using rule 75 (loop_instruction -> BREAK ; .)
    STRING          reduce using rule 75 (loop_instruction -> BREAK ; .)
    ID              reduce using rule 75 (loop_instruction -> BREAK ; .)
    (               reduce using rule 75 (loop_instruction -> BREAK ; .)
    -               reduce using rule 75 (loop_instruction -> BREAK ; .)
    [               reduce using rule 75 (loop_instruction -> BREAK ; .)
    RETURN          reduce using rule 75 (loop_instruction -> BREAK ; .)
    PRINT           reduce using rule 75 (loop_instruction -> BREAK ; .)
    IF              reduce using rule 75 (loop_instruction -> BREAK ; .)
    WHILE           reduce using rule 75 (loop_instruction -> BREAK ; .)
    FOR             reduce using rule 75 (loop_instruction -> BREAK ; .)
    $end            reduce using rule 75 (loop_instruction -> BREAK ; .)
    }               reduce using rule 75 (loop_instruction -> BREAK ; .)
    ELSE            reduce using rule 75 (loop_instruction -> BREAK ; .)
    BREAK           reduce using rule 75 (loop_instruction -> BREAK ; .)
    CONTINUE        reduce using rule 75 (loop_instruction -> BREAK ; .)


state 145

    (76) loop_instruction -> CONTINUE ; .

    {               reduce using rule 76 (loop_instruction -> CONTINUE ; .)
    INTNUM          reduce using rule 76 (loop_instruction -> CONTINUE ; .)
    FLOATNUM        reduce using rule 76 (loop_instruction -> CONTINUE ; .)
    STRING          reduce using rule 76 (loop_instruction -> CONTINUE ; .)
    ID              reduce using rule 76 (loop_instruction -> CONTINUE ; .)
    (               reduce using rule 76 (loop_instruction -> CONTINUE ; .)
    -               reduce using rule 76 (loop_instruction -> CONTINUE ; .)
    [               reduce using rule 76 (loop_instruction -> CONTINUE ; .)
    RETURN          reduce using rule 76 (loop_instruction -> CONTINUE ; .)
    PRINT           reduce using rule 76 (loop_instruction -> CONTINUE ; .)
    IF              reduce using rule 76 (loop_instruction -> CONTINUE ; .)
    WHILE           reduce using rule 76 (loop_instruction -> CONTINUE ; .)
    FOR             reduce using rule 76 (loop_instruction -> CONTINUE ; .)
    $end            reduce using rule 76 (loop_instruction -> CONTINUE ; .)
    }               reduce using rule 76 (loop_instruction -> CONTINUE ; .)
    ELSE            reduce using rule 76 (loop_instruction -> CONTINUE ; .)
    BREAK           reduce using rule 76 (loop_instruction -> CONTINUE ; .)
    CONTINUE        reduce using rule 76 (loop_instruction -> CONTINUE ; .)


state 146

    (77) loop_instruction -> RETURN expr . ;
    (21) expr -> expr . '
    (43) expr -> expr . + expr
    (44) expr -> expr . - expr
    (45) expr -> expr . * expr
    (46) expr -> expr . / expr
    (47) expr -> expr . MPLUS expr
    (48) expr -> expr . MMINUS expr
    (49) expr -> expr . MMLTP expr
    (50) expr -> expr . MDIV expr
    (51) expr -> expr . EQ expr
    (52) expr -> expr . NEQ expr
    (53) expr -> expr . GTEQ expr
    (54) expr -> expr . LTEQ expr
    (55) expr -> expr . > expr
    (56) expr -> expr . < expr

    ;               shift and go to state 160
    '               shift and go to state 26
    +               shift and go to state 27
    -               shift and go to state 28
    *               shift and go to state 29
    /               shift and go to state 30
    MPLUS           shift and go to state 31
    MMINUS          shift and go to state 32
    MMLTP           shift and go to state 33
    MDIV            shift and go to state 34
    EQ              shift and go to state 35
    NEQ             shift and go to state 36
    GTEQ            shift and go to state 37
    LTEQ            shift and go to state 38
    >               shift and go to state 39
    <               shift and go to state 40


state 147

    (78) loop_instruction -> PRINT array_interior . ;
    (22) array_interior -> array_interior . , expr

    ;               shift and go to state 161
    ,               shift and go to state 84


state 148

    (69) loop_cond_if -> IF ( . expr ) loop_cond_block
    (15) expr -> . INTNUM
    (16) expr -> . FLOATNUM
    (17) expr -> . STRING
    (18) expr -> . ID
    (19) expr -> . ( expr )
    (20) expr -> . - expr
    (21) expr -> . expr '
    (24) expr -> . [ array_interior ]
    (25) expr -> . ID = expr
    (26) expr -> . ID PLUSASSIGN expr
    (27) expr -> . ID MINASSIGN expr
    (28) expr -> . ID MULTASSIGN expr
    (29) expr -> . ID DIVASSIGN expr
    (30) expr -> . ID [ expr ] = expr
    (31) expr -> . ID [ expr ] PLUSASSIGN expr
    (32) expr -> . ID [ expr ] MINASSIGN expr
    (33) expr -> . ID [ expr ] MULTASSIGN expr
    (34) expr -> . ID [ expr ] DIVASSIGN expr
    (35) expr -> . ID [ expr , expr ] = expr
    (36) expr -> . ID [ expr , expr ] PLUSASSIGN expr
    (37) expr -> . ID [ expr , expr ] MINASSIGN expr
    (38) expr -> . ID [ expr , expr ] MULTASSIGN expr
    (39) expr -> . ID [ expr , expr ] DIVASSIGN expr
    (40) expr -> . ID = ZEROS ( expr )
    (41) expr -> . ID = ONES ( expr )
    (42) expr -> . ID = EYE ( expr )
    (43) expr -> . expr + expr
    (44) expr -> . expr - expr
    (45) expr -> . expr * expr
    (46) expr -> . expr / expr
    (47) expr -> . expr MPLUS expr
    (48) expr -> . expr MMINUS expr
    (49) expr -> . expr MMLTP expr
    (50) expr -> . expr MDIV expr
    (51) expr -> . expr EQ expr
    (52) expr -> . expr NEQ expr
    (53) expr -> . expr GTEQ expr
    (54) expr -> . expr LTEQ expr
    (55) expr -> . expr > expr
    (56) expr -> . expr < expr

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ID              shift and go to state 10
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13

    expr                           shift and go to state 162

state 149

    (72) cond_for -> FOR ID = expr : expr . loop_cond_block
    (21) expr -> expr . '
    (43) expr -> expr . + expr
    (44) expr -> expr . - expr
    (45) expr -> expr . * expr
    (46) expr -> expr . / expr
    (47) expr -> expr . MPLUS expr
    (48) expr -> expr . MMINUS expr
    (49) expr -> expr . MMLTP expr
    (50) expr -> expr . MDIV expr
    (51) expr -> expr . EQ expr
    (52) expr -> expr . NEQ expr
    (53) expr -> expr . GTEQ expr
    (54) expr -> expr . LTEQ expr
    (55) expr -> expr . > expr
    (56) expr -> expr . < expr
    (67) loop_cond_block -> . loop_struct
    (68) loop_cond_block -> . { loop_start }
    (12) loop_struct -> . expr ;
    (13) loop_struct -> . loop_cond_expr
    (14) loop_struct -> . loop_instruction
    (15) expr -> . INTNUM
    (16) expr -> . FLOATNUM
    (17) expr -> . STRING
    (18) expr -> . ID
    (19) expr -> . ( expr )
    (20) expr -> . - expr
    (21) expr -> . expr '
    (24) expr -> . [ array_interior ]
    (25) expr -> . ID = expr
    (26) expr -> . ID PLUSASSIGN expr
    (27) expr -> . ID MINASSIGN expr
    (28) expr -> . ID MULTASSIGN expr
    (29) expr -> . ID DIVASSIGN expr
    (30) expr -> . ID [ expr ] = expr
    (31) expr -> . ID [ expr ] PLUSASSIGN expr
    (32) expr -> . ID [ expr ] MINASSIGN expr
    (33) expr -> . ID [ expr ] MULTASSIGN expr
    (34) expr -> . ID [ expr ] DIVASSIGN expr
    (35) expr -> . ID [ expr , expr ] = expr
    (36) expr -> . ID [ expr , expr ] PLUSASSIGN expr
    (37) expr -> . ID [ expr , expr ] MINASSIGN expr
    (38) expr -> . ID [ expr , expr ] MULTASSIGN expr
    (39) expr -> . ID [ expr , expr ] DIVASSIGN expr
    (40) expr -> . ID = ZEROS ( expr )
    (41) expr -> . ID = ONES ( expr )
    (42) expr -> . ID = EYE ( expr )
    (43) expr -> . expr + expr
    (44) expr -> . expr - expr
    (45) expr -> . expr * expr
    (46) expr -> . expr / expr
    (47) expr -> . expr MPLUS expr
    (48) expr -> . expr MMINUS expr
    (49) expr -> . expr MMLTP expr
    (50) expr -> . expr MDIV expr
    (51) expr -> . expr EQ expr
    (52) expr -> . expr NEQ expr
    (53) expr -> . expr GTEQ expr
    (54) expr -> . expr LTEQ expr
    (55) expr -> . expr > expr
    (56) expr -> . expr < expr
    (64) loop_cond_expr -> . loop_cond_if
    (65) loop_cond_expr -> . cond_while
    (66) loop_cond_expr -> . cond_for
    (75) loop_instruction -> . BREAK ;
    (76) loop_instruction -> . CONTINUE ;
    (77) loop_instruction -> . RETURN expr ;
    (78) loop_instruction -> . PRINT array_interior ;
    (69) loop_cond_if -> . IF ( expr ) loop_cond_block
    (70) loop_cond_if -> . loop_cond_if ELSE loop_cond_block
    (71) cond_while -> . WHILE ( expr ) loop_cond_block
    (72) cond_for -> . FOR ID = expr : expr loop_cond_block

    '               shift and go to state 26
    +               shift and go to state 27
    -               shift and go to state 164
    *               shift and go to state 29
    /               shift and go to state 30
    MPLUS           shift and go to state 31
    MMINUS          shift and go to state 32
    MMLTP           shift and go to state 33
    MDIV            shift and go to state 34
    EQ              shift and go to state 35
    NEQ             shift and go to state 36
    GTEQ            shift and go to state 37
    LTEQ            shift and go to state 38
    >               shift and go to state 39
    <               shift and go to state 40
    {               shift and go to state 118
    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ID              shift and go to state 10
    (               shift and go to state 11
    [               shift and go to state 13
    BREAK           shift and go to state 124
    CONTINUE        shift and go to state 125
    RETURN          shift and go to state 126
    PRINT           shift and go to state 127
    IF              shift and go to state 128
    WHILE           shift and go to state 20
    FOR             shift and go to state 21

    expr                           shift and go to state 115
    loop_cond_block                shift and go to state 163
    loop_struct                    shift and go to state 117
    loop_cond_expr                 shift and go to state 119
    loop_instruction               shift and go to state 120
    loop_cond_if                   shift and go to state 121
    cond_while                     shift and go to state 122
    cond_for                       shift and go to state 123

state 150

    (35) expr -> ID [ expr , expr ] = . expr
    (15) expr -> . INTNUM
    (16) expr -> . FLOATNUM
    (17) expr -> . STRING
    (18) expr -> . ID
    (19) expr -> . ( expr )
    (20) expr -> . - expr
    (21) expr -> . expr '
    (24) expr -> . [ array_interior ]
    (25) expr -> . ID = expr
    (26) expr -> . ID PLUSASSIGN expr
    (27) expr -> . ID MINASSIGN expr
    (28) expr -> . ID MULTASSIGN expr
    (29) expr -> . ID DIVASSIGN expr
    (30) expr -> . ID [ expr ] = expr
    (31) expr -> . ID [ expr ] PLUSASSIGN expr
    (32) expr -> . ID [ expr ] MINASSIGN expr
    (33) expr -> . ID [ expr ] MULTASSIGN expr
    (34) expr -> . ID [ expr ] DIVASSIGN expr
    (35) expr -> . ID [ expr , expr ] = expr
    (36) expr -> . ID [ expr , expr ] PLUSASSIGN expr
    (37) expr -> . ID [ expr , expr ] MINASSIGN expr
    (38) expr -> . ID [ expr , expr ] MULTASSIGN expr
    (39) expr -> . ID [ expr , expr ] DIVASSIGN expr
    (40) expr -> . ID = ZEROS ( expr )
    (41) expr -> . ID = ONES ( expr )
    (42) expr -> . ID = EYE ( expr )
    (43) expr -> . expr + expr
    (44) expr -> . expr - expr
    (45) expr -> . expr * expr
    (46) expr -> . expr / expr
    (47) expr -> . expr MPLUS expr
    (48) expr -> . expr MMINUS expr
    (49) expr -> . expr MMLTP expr
    (50) expr -> . expr MDIV expr
    (51) expr -> . expr EQ expr
    (52) expr -> . expr NEQ expr
    (53) expr -> . expr GTEQ expr
    (54) expr -> . expr LTEQ expr
    (55) expr -> . expr > expr
    (56) expr -> . expr < expr

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ID              shift and go to state 10
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13

    expr                           shift and go to state 165

state 151

    (36) expr -> ID [ expr , expr ] PLUSASSIGN . expr
    (15) expr -> . INTNUM
    (16) expr -> . FLOATNUM
    (17) expr -> . STRING
    (18) expr -> . ID
    (19) expr -> . ( expr )
    (20) expr -> . - expr
    (21) expr -> . expr '
    (24) expr -> . [ array_interior ]
    (25) expr -> . ID = expr
    (26) expr -> . ID PLUSASSIGN expr
    (27) expr -> . ID MINASSIGN expr
    (28) expr -> . ID MULTASSIGN expr
    (29) expr -> . ID DIVASSIGN expr
    (30) expr -> . ID [ expr ] = expr
    (31) expr -> . ID [ expr ] PLUSASSIGN expr
    (32) expr -> . ID [ expr ] MINASSIGN expr
    (33) expr -> . ID [ expr ] MULTASSIGN expr
    (34) expr -> . ID [ expr ] DIVASSIGN expr
    (35) expr -> . ID [ expr , expr ] = expr
    (36) expr -> . ID [ expr , expr ] PLUSASSIGN expr
    (37) expr -> . ID [ expr , expr ] MINASSIGN expr
    (38) expr -> . ID [ expr , expr ] MULTASSIGN expr
    (39) expr -> . ID [ expr , expr ] DIVASSIGN expr
    (40) expr -> . ID = ZEROS ( expr )
    (41) expr -> . ID = ONES ( expr )
    (42) expr -> . ID = EYE ( expr )
    (43) expr -> . expr + expr
    (44) expr -> . expr - expr
    (45) expr -> . expr * expr
    (46) expr -> . expr / expr
    (47) expr -> . expr MPLUS expr
    (48) expr -> . expr MMINUS expr
    (49) expr -> . expr MMLTP expr
    (50) expr -> . expr MDIV expr
    (51) expr -> . expr EQ expr
    (52) expr -> . expr NEQ expr
    (53) expr -> . expr GTEQ expr
    (54) expr -> . expr LTEQ expr
    (55) expr -> . expr > expr
    (56) expr -> . expr < expr

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ID              shift and go to state 10
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13

    expr                           shift and go to state 166

state 152

    (37) expr -> ID [ expr , expr ] MINASSIGN . expr
    (15) expr -> . INTNUM
    (16) expr -> . FLOATNUM
    (17) expr -> . STRING
    (18) expr -> . ID
    (19) expr -> . ( expr )
    (20) expr -> . - expr
    (21) expr -> . expr '
    (24) expr -> . [ array_interior ]
    (25) expr -> . ID = expr
    (26) expr -> . ID PLUSASSIGN expr
    (27) expr -> . ID MINASSIGN expr
    (28) expr -> . ID MULTASSIGN expr
    (29) expr -> . ID DIVASSIGN expr
    (30) expr -> . ID [ expr ] = expr
    (31) expr -> . ID [ expr ] PLUSASSIGN expr
    (32) expr -> . ID [ expr ] MINASSIGN expr
    (33) expr -> . ID [ expr ] MULTASSIGN expr
    (34) expr -> . ID [ expr ] DIVASSIGN expr
    (35) expr -> . ID [ expr , expr ] = expr
    (36) expr -> . ID [ expr , expr ] PLUSASSIGN expr
    (37) expr -> . ID [ expr , expr ] MINASSIGN expr
    (38) expr -> . ID [ expr , expr ] MULTASSIGN expr
    (39) expr -> . ID [ expr , expr ] DIVASSIGN expr
    (40) expr -> . ID = ZEROS ( expr )
    (41) expr -> . ID = ONES ( expr )
    (42) expr -> . ID = EYE ( expr )
    (43) expr -> . expr + expr
    (44) expr -> . expr - expr
    (45) expr -> . expr * expr
    (46) expr -> . expr / expr
    (47) expr -> . expr MPLUS expr
    (48) expr -> . expr MMINUS expr
    (49) expr -> . expr MMLTP expr
    (50) expr -> . expr MDIV expr
    (51) expr -> . expr EQ expr
    (52) expr -> . expr NEQ expr
    (53) expr -> . expr GTEQ expr
    (54) expr -> . expr LTEQ expr
    (55) expr -> . expr > expr
    (56) expr -> . expr < expr

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ID              shift and go to state 10
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13

    expr                           shift and go to state 167

state 153

    (38) expr -> ID [ expr , expr ] MULTASSIGN . expr
    (15) expr -> . INTNUM
    (16) expr -> . FLOATNUM
    (17) expr -> . STRING
    (18) expr -> . ID
    (19) expr -> . ( expr )
    (20) expr -> . - expr
    (21) expr -> . expr '
    (24) expr -> . [ array_interior ]
    (25) expr -> . ID = expr
    (26) expr -> . ID PLUSASSIGN expr
    (27) expr -> . ID MINASSIGN expr
    (28) expr -> . ID MULTASSIGN expr
    (29) expr -> . ID DIVASSIGN expr
    (30) expr -> . ID [ expr ] = expr
    (31) expr -> . ID [ expr ] PLUSASSIGN expr
    (32) expr -> . ID [ expr ] MINASSIGN expr
    (33) expr -> . ID [ expr ] MULTASSIGN expr
    (34) expr -> . ID [ expr ] DIVASSIGN expr
    (35) expr -> . ID [ expr , expr ] = expr
    (36) expr -> . ID [ expr , expr ] PLUSASSIGN expr
    (37) expr -> . ID [ expr , expr ] MINASSIGN expr
    (38) expr -> . ID [ expr , expr ] MULTASSIGN expr
    (39) expr -> . ID [ expr , expr ] DIVASSIGN expr
    (40) expr -> . ID = ZEROS ( expr )
    (41) expr -> . ID = ONES ( expr )
    (42) expr -> . ID = EYE ( expr )
    (43) expr -> . expr + expr
    (44) expr -> . expr - expr
    (45) expr -> . expr * expr
    (46) expr -> . expr / expr
    (47) expr -> . expr MPLUS expr
    (48) expr -> . expr MMINUS expr
    (49) expr -> . expr MMLTP expr
    (50) expr -> . expr MDIV expr
    (51) expr -> . expr EQ expr
    (52) expr -> . expr NEQ expr
    (53) expr -> . expr GTEQ expr
    (54) expr -> . expr LTEQ expr
    (55) expr -> . expr > expr
    (56) expr -> . expr < expr

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ID              shift and go to state 10
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13

    expr                           shift and go to state 168

state 154

    (39) expr -> ID [ expr , expr ] DIVASSIGN . expr
    (15) expr -> . INTNUM
    (16) expr -> . FLOATNUM
    (17) expr -> . STRING
    (18) expr -> . ID
    (19) expr -> . ( expr )
    (20) expr -> . - expr
    (21) expr -> . expr '
    (24) expr -> . [ array_interior ]
    (25) expr -> . ID = expr
    (26) expr -> . ID PLUSASSIGN expr
    (27) expr -> . ID MINASSIGN expr
    (28) expr -> . ID MULTASSIGN expr
    (29) expr -> . ID DIVASSIGN expr
    (30) expr -> . ID [ expr ] = expr
    (31) expr -> . ID [ expr ] PLUSASSIGN expr
    (32) expr -> . ID [ expr ] MINASSIGN expr
    (33) expr -> . ID [ expr ] MULTASSIGN expr
    (34) expr -> . ID [ expr ] DIVASSIGN expr
    (35) expr -> . ID [ expr , expr ] = expr
    (36) expr -> . ID [ expr , expr ] PLUSASSIGN expr
    (37) expr -> . ID [ expr , expr ] MINASSIGN expr
    (38) expr -> . ID [ expr , expr ] MULTASSIGN expr
    (39) expr -> . ID [ expr , expr ] DIVASSIGN expr
    (40) expr -> . ID = ZEROS ( expr )
    (41) expr -> . ID = ONES ( expr )
    (42) expr -> . ID = EYE ( expr )
    (43) expr -> . expr + expr
    (44) expr -> . expr - expr
    (45) expr -> . expr * expr
    (46) expr -> . expr / expr
    (47) expr -> . expr MPLUS expr
    (48) expr -> . expr MMINUS expr
    (49) expr -> . expr MMLTP expr
    (50) expr -> . expr MDIV expr
    (51) expr -> . expr EQ expr
    (52) expr -> . expr NEQ expr
    (53) expr -> . expr GTEQ expr
    (54) expr -> . expr LTEQ expr
    (55) expr -> . expr > expr
    (56) expr -> . expr < expr

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ID              shift and go to state 10
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13

    expr                           shift and go to state 169

state 155

    (10) loop_start -> { loop_start . }
    (9) loop_start -> loop_start . loop_struct
    (11) loop_start -> loop_start . { loop_start }
    (12) loop_struct -> . expr ;
    (13) loop_struct -> . loop_cond_expr
    (14) loop_struct -> . loop_instruction
    (15) expr -> . INTNUM
    (16) expr -> . FLOATNUM
    (17) expr -> . STRING
    (18) expr -> . ID
    (19) expr -> . ( expr )
    (20) expr -> . - expr
    (21) expr -> . expr '
    (24) expr -> . [ array_interior ]
    (25) expr -> . ID = expr
    (26) expr -> . ID PLUSASSIGN expr
    (27) expr -> . ID MINASSIGN expr
    (28) expr -> . ID MULTASSIGN expr
    (29) expr -> . ID DIVASSIGN expr
    (30) expr -> . ID [ expr ] = expr
    (31) expr -> . ID [ expr ] PLUSASSIGN expr
    (32) expr -> . ID [ expr ] MINASSIGN expr
    (33) expr -> . ID [ expr ] MULTASSIGN expr
    (34) expr -> . ID [ expr ] DIVASSIGN expr
    (35) expr -> . ID [ expr , expr ] = expr
    (36) expr -> . ID [ expr , expr ] PLUSASSIGN expr
    (37) expr -> . ID [ expr , expr ] MINASSIGN expr
    (38) expr -> . ID [ expr , expr ] MULTASSIGN expr
    (39) expr -> . ID [ expr , expr ] DIVASSIGN expr
    (40) expr -> . ID = ZEROS ( expr )
    (41) expr -> . ID = ONES ( expr )
    (42) expr -> . ID = EYE ( expr )
    (43) expr -> . expr + expr
    (44) expr -> . expr - expr
    (45) expr -> . expr * expr
    (46) expr -> . expr / expr
    (47) expr -> . expr MPLUS expr
    (48) expr -> . expr MMINUS expr
    (49) expr -> . expr MMLTP expr
    (50) expr -> . expr MDIV expr
    (51) expr -> . expr EQ expr
    (52) expr -> . expr NEQ expr
    (53) expr -> . expr GTEQ expr
    (54) expr -> . expr LTEQ expr
    (55) expr -> . expr > expr
    (56) expr -> . expr < expr
    (64) loop_cond_expr -> . loop_cond_if
    (65) loop_cond_expr -> . cond_while
    (66) loop_cond_expr -> . cond_for
    (75) loop_instruction -> . BREAK ;
    (76) loop_instruction -> . CONTINUE ;
    (77) loop_instruction -> . RETURN expr ;
    (78) loop_instruction -> . PRINT array_interior ;
    (69) loop_cond_if -> . IF ( expr ) loop_cond_block
    (70) loop_cond_if -> . loop_cond_if ELSE loop_cond_block
    (71) cond_while -> . WHILE ( expr ) loop_cond_block
    (72) cond_for -> . FOR ID = expr : expr loop_cond_block

    }               shift and go to state 170
    {               shift and go to state 156
    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ID              shift and go to state 10
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13
    BREAK           shift and go to state 124
    CONTINUE        shift and go to state 125
    RETURN          shift and go to state 126
    PRINT           shift and go to state 127
    IF              shift and go to state 128
    WHILE           shift and go to state 20
    FOR             shift and go to state 21

    loop_struct                    shift and go to state 158
    expr                           shift and go to state 115
    loop_cond_expr                 shift and go to state 119
    loop_instruction               shift and go to state 120
    loop_cond_if                   shift and go to state 121
    cond_while                     shift and go to state 122
    cond_for                       shift and go to state 123

state 156

    (11) loop_start -> loop_start { . loop_start }
    (8) loop_start -> . loop_struct
    (9) loop_start -> . loop_start loop_struct
    (10) loop_start -> . { loop_start }
    (11) loop_start -> . loop_start { loop_start }
    (12) loop_struct -> . expr ;
    (13) loop_struct -> . loop_cond_expr
    (14) loop_struct -> . loop_instruction
    (15) expr -> . INTNUM
    (16) expr -> . FLOATNUM
    (17) expr -> . STRING
    (18) expr -> . ID
    (19) expr -> . ( expr )
    (20) expr -> . - expr
    (21) expr -> . expr '
    (24) expr -> . [ array_interior ]
    (25) expr -> . ID = expr
    (26) expr -> . ID PLUSASSIGN expr
    (27) expr -> . ID MINASSIGN expr
    (28) expr -> . ID MULTASSIGN expr
    (29) expr -> . ID DIVASSIGN expr
    (30) expr -> . ID [ expr ] = expr
    (31) expr -> . ID [ expr ] PLUSASSIGN expr
    (32) expr -> . ID [ expr ] MINASSIGN expr
    (33) expr -> . ID [ expr ] MULTASSIGN expr
    (34) expr -> . ID [ expr ] DIVASSIGN expr
    (35) expr -> . ID [ expr , expr ] = expr
    (36) expr -> . ID [ expr , expr ] PLUSASSIGN expr
    (37) expr -> . ID [ expr , expr ] MINASSIGN expr
    (38) expr -> . ID [ expr , expr ] MULTASSIGN expr
    (39) expr -> . ID [ expr , expr ] DIVASSIGN expr
    (40) expr -> . ID = ZEROS ( expr )
    (41) expr -> . ID = ONES ( expr )
    (42) expr -> . ID = EYE ( expr )
    (43) expr -> . expr + expr
    (44) expr -> . expr - expr
    (45) expr -> . expr * expr
    (46) expr -> . expr / expr
    (47) expr -> . expr MPLUS expr
    (48) expr -> . expr MMINUS expr
    (49) expr -> . expr MMLTP expr
    (50) expr -> . expr MDIV expr
    (51) expr -> . expr EQ expr
    (52) expr -> . expr NEQ expr
    (53) expr -> . expr GTEQ expr
    (54) expr -> . expr LTEQ expr
    (55) expr -> . expr > expr
    (56) expr -> . expr < expr
    (64) loop_cond_expr -> . loop_cond_if
    (65) loop_cond_expr -> . cond_while
    (66) loop_cond_expr -> . cond_for
    (75) loop_instruction -> . BREAK ;
    (76) loop_instruction -> . CONTINUE ;
    (77) loop_instruction -> . RETURN expr ;
    (78) loop_instruction -> . PRINT array_interior ;
    (69) loop_cond_if -> . IF ( expr ) loop_cond_block
    (70) loop_cond_if -> . loop_cond_if ELSE loop_cond_block
    (71) cond_while -> . WHILE ( expr ) loop_cond_block
    (72) cond_for -> . FOR ID = expr : expr loop_cond_block

    {               shift and go to state 140
    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ID              shift and go to state 10
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13
    BREAK           shift and go to state 124
    CONTINUE        shift and go to state 125
    RETURN          shift and go to state 126
    PRINT           shift and go to state 127
    IF              shift and go to state 128
    WHILE           shift and go to state 20
    FOR             shift and go to state 21

    loop_start                     shift and go to state 171
    loop_struct                    shift and go to state 142
    expr                           shift and go to state 115
    loop_cond_expr                 shift and go to state 119
    loop_instruction               shift and go to state 120
    loop_cond_if                   shift and go to state 121
    cond_while                     shift and go to state 122
    cond_for                       shift and go to state 123

state 157

    (68) loop_cond_block -> { loop_start } .

    {               reduce using rule 68 (loop_cond_block -> { loop_start } .)
    INTNUM          reduce using rule 68 (loop_cond_block -> { loop_start } .)
    FLOATNUM        reduce using rule 68 (loop_cond_block -> { loop_start } .)
    STRING          reduce using rule 68 (loop_cond_block -> { loop_start } .)
    ID              reduce using rule 68 (loop_cond_block -> { loop_start } .)
    (               reduce using rule 68 (loop_cond_block -> { loop_start } .)
    -               reduce using rule 68 (loop_cond_block -> { loop_start } .)
    [               reduce using rule 68 (loop_cond_block -> { loop_start } .)
    RETURN          reduce using rule 68 (loop_cond_block -> { loop_start } .)
    PRINT           reduce using rule 68 (loop_cond_block -> { loop_start } .)
    IF              reduce using rule 68 (loop_cond_block -> { loop_start } .)
    WHILE           reduce using rule 68 (loop_cond_block -> { loop_start } .)
    FOR             reduce using rule 68 (loop_cond_block -> { loop_start } .)
    $end            reduce using rule 68 (loop_cond_block -> { loop_start } .)
    }               reduce using rule 68 (loop_cond_block -> { loop_start } .)
    ELSE            reduce using rule 68 (loop_cond_block -> { loop_start } .)
    BREAK           reduce using rule 68 (loop_cond_block -> { loop_start } .)
    CONTINUE        reduce using rule 68 (loop_cond_block -> { loop_start } .)


state 158

    (9) loop_start -> loop_start loop_struct .

    }               reduce using rule 9 (loop_start -> loop_start loop_struct .)
    {               reduce using rule 9 (loop_start -> loop_start loop_struct .)
    INTNUM          reduce using rule 9 (loop_start -> loop_start loop_struct .)
    FLOATNUM        reduce using rule 9 (loop_start -> loop_start loop_struct .)
    STRING          reduce using rule 9 (loop_start -> loop_start loop_struct .)
    ID              reduce using rule 9 (loop_start -> loop_start loop_struct .)
    (               reduce using rule 9 (loop_start -> loop_start loop_struct .)
    -               reduce using rule 9 (loop_start -> loop_start loop_struct .)
    [               reduce using rule 9 (loop_start -> loop_start loop_struct .)
    BREAK           reduce using rule 9 (loop_start -> loop_start loop_struct .)
    CONTINUE        reduce using rule 9 (loop_start -> loop_start loop_struct .)
    RETURN          reduce using rule 9 (loop_start -> loop_start loop_struct .)
    PRINT           reduce using rule 9 (loop_start -> loop_start loop_struct .)
    IF              reduce using rule 9 (loop_start -> loop_start loop_struct .)
    WHILE           reduce using rule 9 (loop_start -> loop_start loop_struct .)
    FOR             reduce using rule 9 (loop_start -> loop_start loop_struct .)


state 159

    (70) loop_cond_if -> loop_cond_if ELSE loop_cond_block .

    {               reduce using rule 70 (loop_cond_if -> loop_cond_if ELSE loop_cond_block .)
    INTNUM          reduce using rule 70 (loop_cond_if -> loop_cond_if ELSE loop_cond_block .)
    FLOATNUM        reduce using rule 70 (loop_cond_if -> loop_cond_if ELSE loop_cond_block .)
    STRING          reduce using rule 70 (loop_cond_if -> loop_cond_if ELSE loop_cond_block .)
    ID              reduce using rule 70 (loop_cond_if -> loop_cond_if ELSE loop_cond_block .)
    (               reduce using rule 70 (loop_cond_if -> loop_cond_if ELSE loop_cond_block .)
    -               reduce using rule 70 (loop_cond_if -> loop_cond_if ELSE loop_cond_block .)
    [               reduce using rule 70 (loop_cond_if -> loop_cond_if ELSE loop_cond_block .)
    RETURN          reduce using rule 70 (loop_cond_if -> loop_cond_if ELSE loop_cond_block .)
    PRINT           reduce using rule 70 (loop_cond_if -> loop_cond_if ELSE loop_cond_block .)
    IF              reduce using rule 70 (loop_cond_if -> loop_cond_if ELSE loop_cond_block .)
    WHILE           reduce using rule 70 (loop_cond_if -> loop_cond_if ELSE loop_cond_block .)
    FOR             reduce using rule 70 (loop_cond_if -> loop_cond_if ELSE loop_cond_block .)
    $end            reduce using rule 70 (loop_cond_if -> loop_cond_if ELSE loop_cond_block .)
    }               reduce using rule 70 (loop_cond_if -> loop_cond_if ELSE loop_cond_block .)
    ELSE            reduce using rule 70 (loop_cond_if -> loop_cond_if ELSE loop_cond_block .)
    BREAK           reduce using rule 70 (loop_cond_if -> loop_cond_if ELSE loop_cond_block .)
    CONTINUE        reduce using rule 70 (loop_cond_if -> loop_cond_if ELSE loop_cond_block .)


state 160

    (77) loop_instruction -> RETURN expr ; .

    {               reduce using rule 77 (loop_instruction -> RETURN expr ; .)
    INTNUM          reduce using rule 77 (loop_instruction -> RETURN expr ; .)
    FLOATNUM        reduce using rule 77 (loop_instruction -> RETURN expr ; .)
    STRING          reduce using rule 77 (loop_instruction -> RETURN expr ; .)
    ID              reduce using rule 77 (loop_instruction -> RETURN expr ; .)
    (               reduce using rule 77 (loop_instruction -> RETURN expr ; .)
    -               reduce using rule 77 (loop_instruction -> RETURN expr ; .)
    [               reduce using rule 77 (loop_instruction -> RETURN expr ; .)
    RETURN          reduce using rule 77 (loop_instruction -> RETURN expr ; .)
    PRINT           reduce using rule 77 (loop_instruction -> RETURN expr ; .)
    IF              reduce using rule 77 (loop_instruction -> RETURN expr ; .)
    WHILE           reduce using rule 77 (loop_instruction -> RETURN expr ; .)
    FOR             reduce using rule 77 (loop_instruction -> RETURN expr ; .)
    $end            reduce using rule 77 (loop_instruction -> RETURN expr ; .)
    }               reduce using rule 77 (loop_instruction -> RETURN expr ; .)
    ELSE            reduce using rule 77 (loop_instruction -> RETURN expr ; .)
    BREAK           reduce using rule 77 (loop_instruction -> RETURN expr ; .)
    CONTINUE        reduce using rule 77 (loop_instruction -> RETURN expr ; .)


state 161

    (78) loop_instruction -> PRINT array_interior ; .

    {               reduce using rule 78 (loop_instruction -> PRINT array_interior ; .)
    INTNUM          reduce using rule 78 (loop_instruction -> PRINT array_interior ; .)
    FLOATNUM        reduce using rule 78 (loop_instruction -> PRINT array_interior ; .)
    STRING          reduce using rule 78 (loop_instruction -> PRINT array_interior ; .)
    ID              reduce using rule 78 (loop_instruction -> PRINT array_interior ; .)
    (               reduce using rule 78 (loop_instruction -> PRINT array_interior ; .)
    -               reduce using rule 78 (loop_instruction -> PRINT array_interior ; .)
    [               reduce using rule 78 (loop_instruction -> PRINT array_interior ; .)
    RETURN          reduce using rule 78 (loop_instruction -> PRINT array_interior ; .)
    PRINT           reduce using rule 78 (loop_instruction -> PRINT array_interior ; .)
    IF              reduce using rule 78 (loop_instruction -> PRINT array_interior ; .)
    WHILE           reduce using rule 78 (loop_instruction -> PRINT array_interior ; .)
    FOR             reduce using rule 78 (loop_instruction -> PRINT array_interior ; .)
    $end            reduce using rule 78 (loop_instruction -> PRINT array_interior ; .)
    }               reduce using rule 78 (loop_instruction -> PRINT array_interior ; .)
    ELSE            reduce using rule 78 (loop_instruction -> PRINT array_interior ; .)
    BREAK           reduce using rule 78 (loop_instruction -> PRINT array_interior ; .)
    CONTINUE        reduce using rule 78 (loop_instruction -> PRINT array_interior ; .)


state 162

    (69) loop_cond_if -> IF ( expr . ) loop_cond_block
    (21) expr -> expr . '
    (43) expr -> expr . + expr
    (44) expr -> expr . - expr
    (45) expr -> expr . * expr
    (46) expr -> expr . / expr
    (47) expr -> expr . MPLUS expr
    (48) expr -> expr . MMINUS expr
    (49) expr -> expr . MMLTP expr
    (50) expr -> expr . MDIV expr
    (51) expr -> expr . EQ expr
    (52) expr -> expr . NEQ expr
    (53) expr -> expr . GTEQ expr
    (54) expr -> expr . LTEQ expr
    (55) expr -> expr . > expr
    (56) expr -> expr . < expr

    )               shift and go to state 172
    '               shift and go to state 26
    +               shift and go to state 27
    -               shift and go to state 28
    *               shift and go to state 29
    /               shift and go to state 30
    MPLUS           shift and go to state 31
    MMINUS          shift and go to state 32
    MMLTP           shift and go to state 33
    MDIV            shift and go to state 34
    EQ              shift and go to state 35
    NEQ             shift and go to state 36
    GTEQ            shift and go to state 37
    LTEQ            shift and go to state 38
    >               shift and go to state 39
    <               shift and go to state 40


state 163

    (72) cond_for -> FOR ID = expr : expr loop_cond_block .

    {               reduce using rule 72 (cond_for -> FOR ID = expr : expr loop_cond_block .)
    INTNUM          reduce using rule 72 (cond_for -> FOR ID = expr : expr loop_cond_block .)
    FLOATNUM        reduce using rule 72 (cond_for -> FOR ID = expr : expr loop_cond_block .)
    STRING          reduce using rule 72 (cond_for -> FOR ID = expr : expr loop_cond_block .)
    ID              reduce using rule 72 (cond_for -> FOR ID = expr : expr loop_cond_block .)
    (               reduce using rule 72 (cond_for -> FOR ID = expr : expr loop_cond_block .)
    -               reduce using rule 72 (cond_for -> FOR ID = expr : expr loop_cond_block .)
    [               reduce using rule 72 (cond_for -> FOR ID = expr : expr loop_cond_block .)
    RETURN          reduce using rule 72 (cond_for -> FOR ID = expr : expr loop_cond_block .)
    PRINT           reduce using rule 72 (cond_for -> FOR ID = expr : expr loop_cond_block .)
    IF              reduce using rule 72 (cond_for -> FOR ID = expr : expr loop_cond_block .)
    WHILE           reduce using rule 72 (cond_for -> FOR ID = expr : expr loop_cond_block .)
    FOR             reduce using rule 72 (cond_for -> FOR ID = expr : expr loop_cond_block .)
    $end            reduce using rule 72 (cond_for -> FOR ID = expr : expr loop_cond_block .)
    }               reduce using rule 72 (cond_for -> FOR ID = expr : expr loop_cond_block .)
    ELSE            reduce using rule 72 (cond_for -> FOR ID = expr : expr loop_cond_block .)
    BREAK           reduce using rule 72 (cond_for -> FOR ID = expr : expr loop_cond_block .)
    CONTINUE        reduce using rule 72 (cond_for -> FOR ID = expr : expr loop_cond_block .)


state 164

    (44) expr -> expr - . expr
    (20) expr -> - . expr
    (15) expr -> . INTNUM
    (16) expr -> . FLOATNUM
    (17) expr -> . STRING
    (18) expr -> . ID
    (19) expr -> . ( expr )
    (20) expr -> . - expr
    (21) expr -> . expr '
    (24) expr -> . [ array_interior ]
    (25) expr -> . ID = expr
    (26) expr -> . ID PLUSASSIGN expr
    (27) expr -> . ID MINASSIGN expr
    (28) expr -> . ID MULTASSIGN expr
    (29) expr -> . ID DIVASSIGN expr
    (30) expr -> . ID [ expr ] = expr
    (31) expr -> . ID [ expr ] PLUSASSIGN expr
    (32) expr -> . ID [ expr ] MINASSIGN expr
    (33) expr -> . ID [ expr ] MULTASSIGN expr
    (34) expr -> . ID [ expr ] DIVASSIGN expr
    (35) expr -> . ID [ expr , expr ] = expr
    (36) expr -> . ID [ expr , expr ] PLUSASSIGN expr
    (37) expr -> . ID [ expr , expr ] MINASSIGN expr
    (38) expr -> . ID [ expr , expr ] MULTASSIGN expr
    (39) expr -> . ID [ expr , expr ] DIVASSIGN expr
    (40) expr -> . ID = ZEROS ( expr )
    (41) expr -> . ID = ONES ( expr )
    (42) expr -> . ID = EYE ( expr )
    (43) expr -> . expr + expr
    (44) expr -> . expr - expr
    (45) expr -> . expr * expr
    (46) expr -> . expr / expr
    (47) expr -> . expr MPLUS expr
    (48) expr -> . expr MMINUS expr
    (49) expr -> . expr MMLTP expr
    (50) expr -> . expr MDIV expr
    (51) expr -> . expr EQ expr
    (52) expr -> . expr NEQ expr
    (53) expr -> . expr GTEQ expr
    (54) expr -> . expr LTEQ expr
    (55) expr -> . expr > expr
    (56) expr -> . expr < expr

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ID              shift and go to state 10
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13

    expr                           shift and go to state 173

state 165

    (35) expr -> ID [ expr , expr ] = expr .
    (21) expr -> expr . '
    (43) expr -> expr . + expr
    (44) expr -> expr . - expr
    (45) expr -> expr . * expr
    (46) expr -> expr . / expr
    (47) expr -> expr . MPLUS expr
    (48) expr -> expr . MMINUS expr
    (49) expr -> expr . MMLTP expr
    (50) expr -> expr . MDIV expr
    (51) expr -> expr . EQ expr
    (52) expr -> expr . NEQ expr
    (53) expr -> expr . GTEQ expr
    (54) expr -> expr . LTEQ expr
    (55) expr -> expr . > expr
    (56) expr -> expr . < expr

    ;               reduce using rule 35 (expr -> ID [ expr , expr ] = expr .)
    EQ              reduce using rule 35 (expr -> ID [ expr , expr ] = expr .)
    NEQ             reduce using rule 35 (expr -> ID [ expr , expr ] = expr .)
    GTEQ            reduce using rule 35 (expr -> ID [ expr , expr ] = expr .)
    LTEQ            reduce using rule 35 (expr -> ID [ expr , expr ] = expr .)
    >               reduce using rule 35 (expr -> ID [ expr , expr ] = expr .)
    <               reduce using rule 35 (expr -> ID [ expr , expr ] = expr .)
    )               reduce using rule 35 (expr -> ID [ expr , expr ] = expr .)
    ]               reduce using rule 35 (expr -> ID [ expr , expr ] = expr .)
    ,               reduce using rule 35 (expr -> ID [ expr , expr ] = expr .)
    :               reduce using rule 35 (expr -> ID [ expr , expr ] = expr .)
    {               reduce using rule 35 (expr -> ID [ expr , expr ] = expr .)
    INTNUM          reduce using rule 35 (expr -> ID [ expr , expr ] = expr .)
    FLOATNUM        reduce using rule 35 (expr -> ID [ expr , expr ] = expr .)
    STRING          reduce using rule 35 (expr -> ID [ expr , expr ] = expr .)
    ID              reduce using rule 35 (expr -> ID [ expr , expr ] = expr .)
    (               reduce using rule 35 (expr -> ID [ expr , expr ] = expr .)
    [               reduce using rule 35 (expr -> ID [ expr , expr ] = expr .)
    BREAK           reduce using rule 35 (expr -> ID [ expr , expr ] = expr .)
    CONTINUE        reduce using rule 35 (expr -> ID [ expr , expr ] = expr .)
    RETURN          reduce using rule 35 (expr -> ID [ expr , expr ] = expr .)
    PRINT           reduce using rule 35 (expr -> ID [ expr , expr ] = expr .)
    IF              reduce using rule 35 (expr -> ID [ expr , expr ] = expr .)
    WHILE           reduce using rule 35 (expr -> ID [ expr , expr ] = expr .)
    FOR             reduce using rule 35 (expr -> ID [ expr , expr ] = expr .)
    '               shift and go to state 26
    +               shift and go to state 27
    -               shift and go to state 28
    *               shift and go to state 29
    /               shift and go to state 30
    MPLUS           shift and go to state 31
    MMINUS          shift and go to state 32
    MMLTP           shift and go to state 33
    MDIV            shift and go to state 34

  ! '               [ reduce using rule 35 (expr -> ID [ expr , expr ] = expr .) ]
  ! +               [ reduce using rule 35 (expr -> ID [ expr , expr ] = expr .) ]
  ! -               [ reduce using rule 35 (expr -> ID [ expr , expr ] = expr .) ]
  ! *               [ reduce using rule 35 (expr -> ID [ expr , expr ] = expr .) ]
  ! /               [ reduce using rule 35 (expr -> ID [ expr , expr ] = expr .) ]
  ! MPLUS           [ reduce using rule 35 (expr -> ID [ expr , expr ] = expr .) ]
  ! MMINUS          [ reduce using rule 35 (expr -> ID [ expr , expr ] = expr .) ]
  ! MMLTP           [ reduce using rule 35 (expr -> ID [ expr , expr ] = expr .) ]
  ! MDIV            [ reduce using rule 35 (expr -> ID [ expr , expr ] = expr .) ]
  ! EQ              [ shift and go to state 35 ]
  ! NEQ             [ shift and go to state 36 ]
  ! GTEQ            [ shift and go to state 37 ]
  ! LTEQ            [ shift and go to state 38 ]
  ! >               [ shift and go to state 39 ]
  ! <               [ shift and go to state 40 ]


state 166

    (36) expr -> ID [ expr , expr ] PLUSASSIGN expr .
    (21) expr -> expr . '
    (43) expr -> expr . + expr
    (44) expr -> expr . - expr
    (45) expr -> expr . * expr
    (46) expr -> expr . / expr
    (47) expr -> expr . MPLUS expr
    (48) expr -> expr . MMINUS expr
    (49) expr -> expr . MMLTP expr
    (50) expr -> expr . MDIV expr
    (51) expr -> expr . EQ expr
    (52) expr -> expr . NEQ expr
    (53) expr -> expr . GTEQ expr
    (54) expr -> expr . LTEQ expr
    (55) expr -> expr . > expr
    (56) expr -> expr . < expr

    ;               reduce using rule 36 (expr -> ID [ expr , expr ] PLUSASSIGN expr .)
    EQ              reduce using rule 36 (expr -> ID [ expr , expr ] PLUSASSIGN expr .)
    NEQ             reduce using rule 36 (expr -> ID [ expr , expr ] PLUSASSIGN expr .)
    GTEQ            reduce using rule 36 (expr -> ID [ expr , expr ] PLUSASSIGN expr .)
    LTEQ            reduce using rule 36 (expr -> ID [ expr , expr ] PLUSASSIGN expr .)
    >               reduce using rule 36 (expr -> ID [ expr , expr ] PLUSASSIGN expr .)
    <               reduce using rule 36 (expr -> ID [ expr , expr ] PLUSASSIGN expr .)
    )               reduce using rule 36 (expr -> ID [ expr , expr ] PLUSASSIGN expr .)
    ]               reduce using rule 36 (expr -> ID [ expr , expr ] PLUSASSIGN expr .)
    ,               reduce using rule 36 (expr -> ID [ expr , expr ] PLUSASSIGN expr .)
    :               reduce using rule 36 (expr -> ID [ expr , expr ] PLUSASSIGN expr .)
    {               reduce using rule 36 (expr -> ID [ expr , expr ] PLUSASSIGN expr .)
    INTNUM          reduce using rule 36 (expr -> ID [ expr , expr ] PLUSASSIGN expr .)
    FLOATNUM        reduce using rule 36 (expr -> ID [ expr , expr ] PLUSASSIGN expr .)
    STRING          reduce using rule 36 (expr -> ID [ expr , expr ] PLUSASSIGN expr .)
    ID              reduce using rule 36 (expr -> ID [ expr , expr ] PLUSASSIGN expr .)
    (               reduce using rule 36 (expr -> ID [ expr , expr ] PLUSASSIGN expr .)
    [               reduce using rule 36 (expr -> ID [ expr , expr ] PLUSASSIGN expr .)
    BREAK           reduce using rule 36 (expr -> ID [ expr , expr ] PLUSASSIGN expr .)
    CONTINUE        reduce using rule 36 (expr -> ID [ expr , expr ] PLUSASSIGN expr .)
    RETURN          reduce using rule 36 (expr -> ID [ expr , expr ] PLUSASSIGN expr .)
    PRINT           reduce using rule 36 (expr -> ID [ expr , expr ] PLUSASSIGN expr .)
    IF              reduce using rule 36 (expr -> ID [ expr , expr ] PLUSASSIGN expr .)
    WHILE           reduce using rule 36 (expr -> ID [ expr , expr ] PLUSASSIGN expr .)
    FOR             reduce using rule 36 (expr -> ID [ expr , expr ] PLUSASSIGN expr .)
    '               shift and go to state 26
    +               shift and go to state 27
    -               shift and go to state 28
    *               shift and go to state 29
    /               shift and go to state 30
    MPLUS           shift and go to state 31
    MMINUS          shift and go to state 32
    MMLTP           shift and go to state 33
    MDIV            shift and go to state 34

  ! '               [ reduce using rule 36 (expr -> ID [ expr , expr ] PLUSASSIGN expr .) ]
  ! +               [ reduce using rule 36 (expr -> ID [ expr , expr ] PLUSASSIGN expr .) ]
  ! -               [ reduce using rule 36 (expr -> ID [ expr , expr ] PLUSASSIGN expr .) ]
  ! *               [ reduce using rule 36 (expr -> ID [ expr , expr ] PLUSASSIGN expr .) ]
  ! /               [ reduce using rule 36 (expr -> ID [ expr , expr ] PLUSASSIGN expr .) ]
  ! MPLUS           [ reduce using rule 36 (expr -> ID [ expr , expr ] PLUSASSIGN expr .) ]
  ! MMINUS          [ reduce using rule 36 (expr -> ID [ expr , expr ] PLUSASSIGN expr .) ]
  ! MMLTP           [ reduce using rule 36 (expr -> ID [ expr , expr ] PLUSASSIGN expr .) ]
  ! MDIV            [ reduce using rule 36 (expr -> ID [ expr , expr ] PLUSASSIGN expr .) ]
  ! EQ              [ shift and go to state 35 ]
  ! NEQ             [ shift and go to state 36 ]
  ! GTEQ            [ shift and go to state 37 ]
  ! LTEQ            [ shift and go to state 38 ]
  ! >               [ shift and go to state 39 ]
  ! <               [ shift and go to state 40 ]


state 167

    (37) expr -> ID [ expr , expr ] MINASSIGN expr .
    (21) expr -> expr . '
    (43) expr -> expr . + expr
    (44) expr -> expr . - expr
    (45) expr -> expr . * expr
    (46) expr -> expr . / expr
    (47) expr -> expr . MPLUS expr
    (48) expr -> expr . MMINUS expr
    (49) expr -> expr . MMLTP expr
    (50) expr -> expr . MDIV expr
    (51) expr -> expr . EQ expr
    (52) expr -> expr . NEQ expr
    (53) expr -> expr . GTEQ expr
    (54) expr -> expr . LTEQ expr
    (55) expr -> expr . > expr
    (56) expr -> expr . < expr

    ;               reduce using rule 37 (expr -> ID [ expr , expr ] MINASSIGN expr .)
    EQ              reduce using rule 37 (expr -> ID [ expr , expr ] MINASSIGN expr .)
    NEQ             reduce using rule 37 (expr -> ID [ expr , expr ] MINASSIGN expr .)
    GTEQ            reduce using rule 37 (expr -> ID [ expr , expr ] MINASSIGN expr .)
    LTEQ            reduce using rule 37 (expr -> ID [ expr , expr ] MINASSIGN expr .)
    >               reduce using rule 37 (expr -> ID [ expr , expr ] MINASSIGN expr .)
    <               reduce using rule 37 (expr -> ID [ expr , expr ] MINASSIGN expr .)
    )               reduce using rule 37 (expr -> ID [ expr , expr ] MINASSIGN expr .)
    ]               reduce using rule 37 (expr -> ID [ expr , expr ] MINASSIGN expr .)
    ,               reduce using rule 37 (expr -> ID [ expr , expr ] MINASSIGN expr .)
    :               reduce using rule 37 (expr -> ID [ expr , expr ] MINASSIGN expr .)
    {               reduce using rule 37 (expr -> ID [ expr , expr ] MINASSIGN expr .)
    INTNUM          reduce using rule 37 (expr -> ID [ expr , expr ] MINASSIGN expr .)
    FLOATNUM        reduce using rule 37 (expr -> ID [ expr , expr ] MINASSIGN expr .)
    STRING          reduce using rule 37 (expr -> ID [ expr , expr ] MINASSIGN expr .)
    ID              reduce using rule 37 (expr -> ID [ expr , expr ] MINASSIGN expr .)
    (               reduce using rule 37 (expr -> ID [ expr , expr ] MINASSIGN expr .)
    [               reduce using rule 37 (expr -> ID [ expr , expr ] MINASSIGN expr .)
    BREAK           reduce using rule 37 (expr -> ID [ expr , expr ] MINASSIGN expr .)
    CONTINUE        reduce using rule 37 (expr -> ID [ expr , expr ] MINASSIGN expr .)
    RETURN          reduce using rule 37 (expr -> ID [ expr , expr ] MINASSIGN expr .)
    PRINT           reduce using rule 37 (expr -> ID [ expr , expr ] MINASSIGN expr .)
    IF              reduce using rule 37 (expr -> ID [ expr , expr ] MINASSIGN expr .)
    WHILE           reduce using rule 37 (expr -> ID [ expr , expr ] MINASSIGN expr .)
    FOR             reduce using rule 37 (expr -> ID [ expr , expr ] MINASSIGN expr .)
    '               shift and go to state 26
    +               shift and go to state 27
    -               shift and go to state 28
    *               shift and go to state 29
    /               shift and go to state 30
    MPLUS           shift and go to state 31
    MMINUS          shift and go to state 32
    MMLTP           shift and go to state 33
    MDIV            shift and go to state 34

  ! '               [ reduce using rule 37 (expr -> ID [ expr , expr ] MINASSIGN expr .) ]
  ! +               [ reduce using rule 37 (expr -> ID [ expr , expr ] MINASSIGN expr .) ]
  ! -               [ reduce using rule 37 (expr -> ID [ expr , expr ] MINASSIGN expr .) ]
  ! *               [ reduce using rule 37 (expr -> ID [ expr , expr ] MINASSIGN expr .) ]
  ! /               [ reduce using rule 37 (expr -> ID [ expr , expr ] MINASSIGN expr .) ]
  ! MPLUS           [ reduce using rule 37 (expr -> ID [ expr , expr ] MINASSIGN expr .) ]
  ! MMINUS          [ reduce using rule 37 (expr -> ID [ expr , expr ] MINASSIGN expr .) ]
  ! MMLTP           [ reduce using rule 37 (expr -> ID [ expr , expr ] MINASSIGN expr .) ]
  ! MDIV            [ reduce using rule 37 (expr -> ID [ expr , expr ] MINASSIGN expr .) ]
  ! EQ              [ shift and go to state 35 ]
  ! NEQ             [ shift and go to state 36 ]
  ! GTEQ            [ shift and go to state 37 ]
  ! LTEQ            [ shift and go to state 38 ]
  ! >               [ shift and go to state 39 ]
  ! <               [ shift and go to state 40 ]


state 168

    (38) expr -> ID [ expr , expr ] MULTASSIGN expr .
    (21) expr -> expr . '
    (43) expr -> expr . + expr
    (44) expr -> expr . - expr
    (45) expr -> expr . * expr
    (46) expr -> expr . / expr
    (47) expr -> expr . MPLUS expr
    (48) expr -> expr . MMINUS expr
    (49) expr -> expr . MMLTP expr
    (50) expr -> expr . MDIV expr
    (51) expr -> expr . EQ expr
    (52) expr -> expr . NEQ expr
    (53) expr -> expr . GTEQ expr
    (54) expr -> expr . LTEQ expr
    (55) expr -> expr . > expr
    (56) expr -> expr . < expr

    ;               reduce using rule 38 (expr -> ID [ expr , expr ] MULTASSIGN expr .)
    EQ              reduce using rule 38 (expr -> ID [ expr , expr ] MULTASSIGN expr .)
    NEQ             reduce using rule 38 (expr -> ID [ expr , expr ] MULTASSIGN expr .)
    GTEQ            reduce using rule 38 (expr -> ID [ expr , expr ] MULTASSIGN expr .)
    LTEQ            reduce using rule 38 (expr -> ID [ expr , expr ] MULTASSIGN expr .)
    >               reduce using rule 38 (expr -> ID [ expr , expr ] MULTASSIGN expr .)
    <               reduce using rule 38 (expr -> ID [ expr , expr ] MULTASSIGN expr .)
    )               reduce using rule 38 (expr -> ID [ expr , expr ] MULTASSIGN expr .)
    ]               reduce using rule 38 (expr -> ID [ expr , expr ] MULTASSIGN expr .)
    ,               reduce using rule 38 (expr -> ID [ expr , expr ] MULTASSIGN expr .)
    :               reduce using rule 38 (expr -> ID [ expr , expr ] MULTASSIGN expr .)
    {               reduce using rule 38 (expr -> ID [ expr , expr ] MULTASSIGN expr .)
    INTNUM          reduce using rule 38 (expr -> ID [ expr , expr ] MULTASSIGN expr .)
    FLOATNUM        reduce using rule 38 (expr -> ID [ expr , expr ] MULTASSIGN expr .)
    STRING          reduce using rule 38 (expr -> ID [ expr , expr ] MULTASSIGN expr .)
    ID              reduce using rule 38 (expr -> ID [ expr , expr ] MULTASSIGN expr .)
    (               reduce using rule 38 (expr -> ID [ expr , expr ] MULTASSIGN expr .)
    [               reduce using rule 38 (expr -> ID [ expr , expr ] MULTASSIGN expr .)
    BREAK           reduce using rule 38 (expr -> ID [ expr , expr ] MULTASSIGN expr .)
    CONTINUE        reduce using rule 38 (expr -> ID [ expr , expr ] MULTASSIGN expr .)
    RETURN          reduce using rule 38 (expr -> ID [ expr , expr ] MULTASSIGN expr .)
    PRINT           reduce using rule 38 (expr -> ID [ expr , expr ] MULTASSIGN expr .)
    IF              reduce using rule 38 (expr -> ID [ expr , expr ] MULTASSIGN expr .)
    WHILE           reduce using rule 38 (expr -> ID [ expr , expr ] MULTASSIGN expr .)
    FOR             reduce using rule 38 (expr -> ID [ expr , expr ] MULTASSIGN expr .)
    '               shift and go to state 26
    +               shift and go to state 27
    -               shift and go to state 28
    *               shift and go to state 29
    /               shift and go to state 30
    MPLUS           shift and go to state 31
    MMINUS          shift and go to state 32
    MMLTP           shift and go to state 33
    MDIV            shift and go to state 34

  ! '               [ reduce using rule 38 (expr -> ID [ expr , expr ] MULTASSIGN expr .) ]
  ! +               [ reduce using rule 38 (expr -> ID [ expr , expr ] MULTASSIGN expr .) ]
  ! -               [ reduce using rule 38 (expr -> ID [ expr , expr ] MULTASSIGN expr .) ]
  ! *               [ reduce using rule 38 (expr -> ID [ expr , expr ] MULTASSIGN expr .) ]
  ! /               [ reduce using rule 38 (expr -> ID [ expr , expr ] MULTASSIGN expr .) ]
  ! MPLUS           [ reduce using rule 38 (expr -> ID [ expr , expr ] MULTASSIGN expr .) ]
  ! MMINUS          [ reduce using rule 38 (expr -> ID [ expr , expr ] MULTASSIGN expr .) ]
  ! MMLTP           [ reduce using rule 38 (expr -> ID [ expr , expr ] MULTASSIGN expr .) ]
  ! MDIV            [ reduce using rule 38 (expr -> ID [ expr , expr ] MULTASSIGN expr .) ]
  ! EQ              [ shift and go to state 35 ]
  ! NEQ             [ shift and go to state 36 ]
  ! GTEQ            [ shift and go to state 37 ]
  ! LTEQ            [ shift and go to state 38 ]
  ! >               [ shift and go to state 39 ]
  ! <               [ shift and go to state 40 ]


state 169

    (39) expr -> ID [ expr , expr ] DIVASSIGN expr .
    (21) expr -> expr . '
    (43) expr -> expr . + expr
    (44) expr -> expr . - expr
    (45) expr -> expr . * expr
    (46) expr -> expr . / expr
    (47) expr -> expr . MPLUS expr
    (48) expr -> expr . MMINUS expr
    (49) expr -> expr . MMLTP expr
    (50) expr -> expr . MDIV expr
    (51) expr -> expr . EQ expr
    (52) expr -> expr . NEQ expr
    (53) expr -> expr . GTEQ expr
    (54) expr -> expr . LTEQ expr
    (55) expr -> expr . > expr
    (56) expr -> expr . < expr

    ;               reduce using rule 39 (expr -> ID [ expr , expr ] DIVASSIGN expr .)
    EQ              reduce using rule 39 (expr -> ID [ expr , expr ] DIVASSIGN expr .)
    NEQ             reduce using rule 39 (expr -> ID [ expr , expr ] DIVASSIGN expr .)
    GTEQ            reduce using rule 39 (expr -> ID [ expr , expr ] DIVASSIGN expr .)
    LTEQ            reduce using rule 39 (expr -> ID [ expr , expr ] DIVASSIGN expr .)
    >               reduce using rule 39 (expr -> ID [ expr , expr ] DIVASSIGN expr .)
    <               reduce using rule 39 (expr -> ID [ expr , expr ] DIVASSIGN expr .)
    )               reduce using rule 39 (expr -> ID [ expr , expr ] DIVASSIGN expr .)
    ]               reduce using rule 39 (expr -> ID [ expr , expr ] DIVASSIGN expr .)
    ,               reduce using rule 39 (expr -> ID [ expr , expr ] DIVASSIGN expr .)
    :               reduce using rule 39 (expr -> ID [ expr , expr ] DIVASSIGN expr .)
    {               reduce using rule 39 (expr -> ID [ expr , expr ] DIVASSIGN expr .)
    INTNUM          reduce using rule 39 (expr -> ID [ expr , expr ] DIVASSIGN expr .)
    FLOATNUM        reduce using rule 39 (expr -> ID [ expr , expr ] DIVASSIGN expr .)
    STRING          reduce using rule 39 (expr -> ID [ expr , expr ] DIVASSIGN expr .)
    ID              reduce using rule 39 (expr -> ID [ expr , expr ] DIVASSIGN expr .)
    (               reduce using rule 39 (expr -> ID [ expr , expr ] DIVASSIGN expr .)
    [               reduce using rule 39 (expr -> ID [ expr , expr ] DIVASSIGN expr .)
    BREAK           reduce using rule 39 (expr -> ID [ expr , expr ] DIVASSIGN expr .)
    CONTINUE        reduce using rule 39 (expr -> ID [ expr , expr ] DIVASSIGN expr .)
    RETURN          reduce using rule 39 (expr -> ID [ expr , expr ] DIVASSIGN expr .)
    PRINT           reduce using rule 39 (expr -> ID [ expr , expr ] DIVASSIGN expr .)
    IF              reduce using rule 39 (expr -> ID [ expr , expr ] DIVASSIGN expr .)
    WHILE           reduce using rule 39 (expr -> ID [ expr , expr ] DIVASSIGN expr .)
    FOR             reduce using rule 39 (expr -> ID [ expr , expr ] DIVASSIGN expr .)
    '               shift and go to state 26
    +               shift and go to state 27
    -               shift and go to state 28
    *               shift and go to state 29
    /               shift and go to state 30
    MPLUS           shift and go to state 31
    MMINUS          shift and go to state 32
    MMLTP           shift and go to state 33
    MDIV            shift and go to state 34

  ! '               [ reduce using rule 39 (expr -> ID [ expr , expr ] DIVASSIGN expr .) ]
  ! +               [ reduce using rule 39 (expr -> ID [ expr , expr ] DIVASSIGN expr .) ]
  ! -               [ reduce using rule 39 (expr -> ID [ expr , expr ] DIVASSIGN expr .) ]
  ! *               [ reduce using rule 39 (expr -> ID [ expr , expr ] DIVASSIGN expr .) ]
  ! /               [ reduce using rule 39 (expr -> ID [ expr , expr ] DIVASSIGN expr .) ]
  ! MPLUS           [ reduce using rule 39 (expr -> ID [ expr , expr ] DIVASSIGN expr .) ]
  ! MMINUS          [ reduce using rule 39 (expr -> ID [ expr , expr ] DIVASSIGN expr .) ]
  ! MMLTP           [ reduce using rule 39 (expr -> ID [ expr , expr ] DIVASSIGN expr .) ]
  ! MDIV            [ reduce using rule 39 (expr -> ID [ expr , expr ] DIVASSIGN expr .) ]
  ! EQ              [ shift and go to state 35 ]
  ! NEQ             [ shift and go to state 36 ]
  ! GTEQ            [ shift and go to state 37 ]
  ! LTEQ            [ shift and go to state 38 ]
  ! >               [ shift and go to state 39 ]
  ! <               [ shift and go to state 40 ]


state 170

    (10) loop_start -> { loop_start } .

    }               reduce using rule 10 (loop_start -> { loop_start } .)
    {               reduce using rule 10 (loop_start -> { loop_start } .)
    INTNUM          reduce using rule 10 (loop_start -> { loop_start } .)
    FLOATNUM        reduce using rule 10 (loop_start -> { loop_start } .)
    STRING          reduce using rule 10 (loop_start -> { loop_start } .)
    ID              reduce using rule 10 (loop_start -> { loop_start } .)
    (               reduce using rule 10 (loop_start -> { loop_start } .)
    -               reduce using rule 10 (loop_start -> { loop_start } .)
    [               reduce using rule 10 (loop_start -> { loop_start } .)
    BREAK           reduce using rule 10 (loop_start -> { loop_start } .)
    CONTINUE        reduce using rule 10 (loop_start -> { loop_start } .)
    RETURN          reduce using rule 10 (loop_start -> { loop_start } .)
    PRINT           reduce using rule 10 (loop_start -> { loop_start } .)
    IF              reduce using rule 10 (loop_start -> { loop_start } .)
    WHILE           reduce using rule 10 (loop_start -> { loop_start } .)
    FOR             reduce using rule 10 (loop_start -> { loop_start } .)


state 171

    (11) loop_start -> loop_start { loop_start . }
    (9) loop_start -> loop_start . loop_struct
    (11) loop_start -> loop_start . { loop_start }
    (12) loop_struct -> . expr ;
    (13) loop_struct -> . loop_cond_expr
    (14) loop_struct -> . loop_instruction
    (15) expr -> . INTNUM
    (16) expr -> . FLOATNUM
    (17) expr -> . STRING
    (18) expr -> . ID
    (19) expr -> . ( expr )
    (20) expr -> . - expr
    (21) expr -> . expr '
    (24) expr -> . [ array_interior ]
    (25) expr -> . ID = expr
    (26) expr -> . ID PLUSASSIGN expr
    (27) expr -> . ID MINASSIGN expr
    (28) expr -> . ID MULTASSIGN expr
    (29) expr -> . ID DIVASSIGN expr
    (30) expr -> . ID [ expr ] = expr
    (31) expr -> . ID [ expr ] PLUSASSIGN expr
    (32) expr -> . ID [ expr ] MINASSIGN expr
    (33) expr -> . ID [ expr ] MULTASSIGN expr
    (34) expr -> . ID [ expr ] DIVASSIGN expr
    (35) expr -> . ID [ expr , expr ] = expr
    (36) expr -> . ID [ expr , expr ] PLUSASSIGN expr
    (37) expr -> . ID [ expr , expr ] MINASSIGN expr
    (38) expr -> . ID [ expr , expr ] MULTASSIGN expr
    (39) expr -> . ID [ expr , expr ] DIVASSIGN expr
    (40) expr -> . ID = ZEROS ( expr )
    (41) expr -> . ID = ONES ( expr )
    (42) expr -> . ID = EYE ( expr )
    (43) expr -> . expr + expr
    (44) expr -> . expr - expr
    (45) expr -> . expr * expr
    (46) expr -> . expr / expr
    (47) expr -> . expr MPLUS expr
    (48) expr -> . expr MMINUS expr
    (49) expr -> . expr MMLTP expr
    (50) expr -> . expr MDIV expr
    (51) expr -> . expr EQ expr
    (52) expr -> . expr NEQ expr
    (53) expr -> . expr GTEQ expr
    (54) expr -> . expr LTEQ expr
    (55) expr -> . expr > expr
    (56) expr -> . expr < expr
    (64) loop_cond_expr -> . loop_cond_if
    (65) loop_cond_expr -> . cond_while
    (66) loop_cond_expr -> . cond_for
    (75) loop_instruction -> . BREAK ;
    (76) loop_instruction -> . CONTINUE ;
    (77) loop_instruction -> . RETURN expr ;
    (78) loop_instruction -> . PRINT array_interior ;
    (69) loop_cond_if -> . IF ( expr ) loop_cond_block
    (70) loop_cond_if -> . loop_cond_if ELSE loop_cond_block
    (71) cond_while -> . WHILE ( expr ) loop_cond_block
    (72) cond_for -> . FOR ID = expr : expr loop_cond_block

    }               shift and go to state 174
    {               shift and go to state 156
    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ID              shift and go to state 10
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13
    BREAK           shift and go to state 124
    CONTINUE        shift and go to state 125
    RETURN          shift and go to state 126
    PRINT           shift and go to state 127
    IF              shift and go to state 128
    WHILE           shift and go to state 20
    FOR             shift and go to state 21

    loop_struct                    shift and go to state 158
    expr                           shift and go to state 115
    loop_cond_expr                 shift and go to state 119
    loop_instruction               shift and go to state 120
    loop_cond_if                   shift and go to state 121
    cond_while                     shift and go to state 122
    cond_for                       shift and go to state 123

state 172

    (69) loop_cond_if -> IF ( expr ) . loop_cond_block
    (67) loop_cond_block -> . loop_struct
    (68) loop_cond_block -> . { loop_start }
    (12) loop_struct -> . expr ;
    (13) loop_struct -> . loop_cond_expr
    (14) loop_struct -> . loop_instruction
    (15) expr -> . INTNUM
    (16) expr -> . FLOATNUM
    (17) expr -> . STRING
    (18) expr -> . ID
    (19) expr -> . ( expr )
    (20) expr -> . - expr
    (21) expr -> . expr '
    (24) expr -> . [ array_interior ]
    (25) expr -> . ID = expr
    (26) expr -> . ID PLUSASSIGN expr
    (27) expr -> . ID MINASSIGN expr
    (28) expr -> . ID MULTASSIGN expr
    (29) expr -> . ID DIVASSIGN expr
    (30) expr -> . ID [ expr ] = expr
    (31) expr -> . ID [ expr ] PLUSASSIGN expr
    (32) expr -> . ID [ expr ] MINASSIGN expr
    (33) expr -> . ID [ expr ] MULTASSIGN expr
    (34) expr -> . ID [ expr ] DIVASSIGN expr
    (35) expr -> . ID [ expr , expr ] = expr
    (36) expr -> . ID [ expr , expr ] PLUSASSIGN expr
    (37) expr -> . ID [ expr , expr ] MINASSIGN expr
    (38) expr -> . ID [ expr , expr ] MULTASSIGN expr
    (39) expr -> . ID [ expr , expr ] DIVASSIGN expr
    (40) expr -> . ID = ZEROS ( expr )
    (41) expr -> . ID = ONES ( expr )
    (42) expr -> . ID = EYE ( expr )
    (43) expr -> . expr + expr
    (44) expr -> . expr - expr
    (45) expr -> . expr * expr
    (46) expr -> . expr / expr
    (47) expr -> . expr MPLUS expr
    (48) expr -> . expr MMINUS expr
    (49) expr -> . expr MMLTP expr
    (50) expr -> . expr MDIV expr
    (51) expr -> . expr EQ expr
    (52) expr -> . expr NEQ expr
    (53) expr -> . expr GTEQ expr
    (54) expr -> . expr LTEQ expr
    (55) expr -> . expr > expr
    (56) expr -> . expr < expr
    (64) loop_cond_expr -> . loop_cond_if
    (65) loop_cond_expr -> . cond_while
    (66) loop_cond_expr -> . cond_for
    (75) loop_instruction -> . BREAK ;
    (76) loop_instruction -> . CONTINUE ;
    (77) loop_instruction -> . RETURN expr ;
    (78) loop_instruction -> . PRINT array_interior ;
    (69) loop_cond_if -> . IF ( expr ) loop_cond_block
    (70) loop_cond_if -> . loop_cond_if ELSE loop_cond_block
    (71) cond_while -> . WHILE ( expr ) loop_cond_block
    (72) cond_for -> . FOR ID = expr : expr loop_cond_block

    {               shift and go to state 118
    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ID              shift and go to state 10
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13
    BREAK           shift and go to state 124
    CONTINUE        shift and go to state 125
    RETURN          shift and go to state 126
    PRINT           shift and go to state 127
    IF              shift and go to state 128
    WHILE           shift and go to state 20
    FOR             shift and go to state 21

    expr                           shift and go to state 115
    loop_cond_block                shift and go to state 175
    loop_struct                    shift and go to state 117
    loop_cond_expr                 shift and go to state 119
    loop_instruction               shift and go to state 120
    loop_cond_if                   shift and go to state 121
    cond_while                     shift and go to state 122
    cond_for                       shift and go to state 123

state 173

    (44) expr -> expr - expr .
    (20) expr -> - expr .
    (21) expr -> expr . '
    (43) expr -> expr . + expr
    (44) expr -> expr . - expr
    (45) expr -> expr . * expr
    (46) expr -> expr . / expr
    (47) expr -> expr . MPLUS expr
    (48) expr -> expr . MMINUS expr
    (49) expr -> expr . MMLTP expr
    (50) expr -> expr . MDIV expr
    (51) expr -> expr . EQ expr
    (52) expr -> expr . NEQ expr
    (53) expr -> expr . GTEQ expr
    (54) expr -> expr . LTEQ expr
    (55) expr -> expr . > expr
    (56) expr -> expr . < expr

  ! reduce/reduce conflict for ' resolved using rule 20 (expr -> - expr .)
  ! reduce/reduce conflict for + resolved using rule 20 (expr -> - expr .)
  ! reduce/reduce conflict for - resolved using rule 20 (expr -> - expr .)
  ! reduce/reduce conflict for * resolved using rule 20 (expr -> - expr .)
  ! reduce/reduce conflict for / resolved using rule 20 (expr -> - expr .)
  ! reduce/reduce conflict for MPLUS resolved using rule 20 (expr -> - expr .)
  ! reduce/reduce conflict for MMINUS resolved using rule 20 (expr -> - expr .)
  ! reduce/reduce conflict for MMLTP resolved using rule 20 (expr -> - expr .)
  ! reduce/reduce conflict for MDIV resolved using rule 20 (expr -> - expr .)
  ! reduce/reduce conflict for EQ resolved using rule 20 (expr -> - expr .)
  ! reduce/reduce conflict for NEQ resolved using rule 20 (expr -> - expr .)
  ! reduce/reduce conflict for GTEQ resolved using rule 20 (expr -> - expr .)
  ! reduce/reduce conflict for LTEQ resolved using rule 20 (expr -> - expr .)
  ! reduce/reduce conflict for > resolved using rule 20 (expr -> - expr .)
  ! reduce/reduce conflict for < resolved using rule 20 (expr -> - expr .)
    {               reduce using rule 44 (expr -> expr - expr .)
    INTNUM          reduce using rule 44 (expr -> expr - expr .)
    FLOATNUM        reduce using rule 44 (expr -> expr - expr .)
    STRING          reduce using rule 44 (expr -> expr - expr .)
    ID              reduce using rule 44 (expr -> expr - expr .)
    (               reduce using rule 44 (expr -> expr - expr .)
    [               reduce using rule 44 (expr -> expr - expr .)
    BREAK           reduce using rule 44 (expr -> expr - expr .)
    CONTINUE        reduce using rule 44 (expr -> expr - expr .)
    RETURN          reduce using rule 44 (expr -> expr - expr .)
    PRINT           reduce using rule 44 (expr -> expr - expr .)
    IF              reduce using rule 44 (expr -> expr - expr .)
    WHILE           reduce using rule 44 (expr -> expr - expr .)
    FOR             reduce using rule 44 (expr -> expr - expr .)
    ;               reduce using rule 20 (expr -> - expr .)
    +               reduce using rule 20 (expr -> - expr .)
    -               reduce using rule 20 (expr -> - expr .)
    MPLUS           reduce using rule 20 (expr -> - expr .)
    MMINUS          reduce using rule 20 (expr -> - expr .)
    EQ              reduce using rule 20 (expr -> - expr .)
    NEQ             reduce using rule 20 (expr -> - expr .)
    GTEQ            reduce using rule 20 (expr -> - expr .)
    LTEQ            reduce using rule 20 (expr -> - expr .)
    >               reduce using rule 20 (expr -> - expr .)
    <               reduce using rule 20 (expr -> - expr .)
    '               shift and go to state 26
    *               shift and go to state 29
    /               shift and go to state 30
    MMLTP           shift and go to state 33
    MDIV            shift and go to state 34

  ! '               [ reduce using rule 44 (expr -> expr - expr .) ]
  ! +               [ reduce using rule 44 (expr -> expr - expr .) ]
  ! -               [ reduce using rule 44 (expr -> expr - expr .) ]
  ! *               [ reduce using rule 44 (expr -> expr - expr .) ]
  ! /               [ reduce using rule 44 (expr -> expr - expr .) ]
  ! MPLUS           [ reduce using rule 44 (expr -> expr - expr .) ]
  ! MMINUS          [ reduce using rule 44 (expr -> expr - expr .) ]
  ! MMLTP           [ reduce using rule 44 (expr -> expr - expr .) ]
  ! MDIV            [ reduce using rule 44 (expr -> expr - expr .) ]
  ! EQ              [ reduce using rule 44 (expr -> expr - expr .) ]
  ! NEQ             [ reduce using rule 44 (expr -> expr - expr .) ]
  ! GTEQ            [ reduce using rule 44 (expr -> expr - expr .) ]
  ! LTEQ            [ reduce using rule 44 (expr -> expr - expr .) ]
  ! >               [ reduce using rule 44 (expr -> expr - expr .) ]
  ! <               [ reduce using rule 44 (expr -> expr - expr .) ]
  ! '               [ reduce using rule 20 (expr -> - expr .) ]
  ! *               [ reduce using rule 20 (expr -> - expr .) ]
  ! /               [ reduce using rule 20 (expr -> - expr .) ]
  ! MMLTP           [ reduce using rule 20 (expr -> - expr .) ]
  ! MDIV            [ reduce using rule 20 (expr -> - expr .) ]
  ! +               [ shift and go to state 27 ]
  ! -               [ shift and go to state 28 ]
  ! MPLUS           [ shift and go to state 31 ]
  ! MMINUS          [ shift and go to state 32 ]
  ! EQ              [ shift and go to state 35 ]
  ! NEQ             [ shift and go to state 36 ]
  ! GTEQ            [ shift and go to state 37 ]
  ! LTEQ            [ shift and go to state 38 ]
  ! >               [ shift and go to state 39 ]
  ! <               [ shift and go to state 40 ]


state 174

    (11) loop_start -> loop_start { loop_start } .

    }               reduce using rule 11 (loop_start -> loop_start { loop_start } .)
    {               reduce using rule 11 (loop_start -> loop_start { loop_start } .)
    INTNUM          reduce using rule 11 (loop_start -> loop_start { loop_start } .)
    FLOATNUM        reduce using rule 11 (loop_start -> loop_start { loop_start } .)
    STRING          reduce using rule 11 (loop_start -> loop_start { loop_start } .)
    ID              reduce using rule 11 (loop_start -> loop_start { loop_start } .)
    (               reduce using rule 11 (loop_start -> loop_start { loop_start } .)
    -               reduce using rule 11 (loop_start -> loop_start { loop_start } .)
    [               reduce using rule 11 (loop_start -> loop_start { loop_start } .)
    BREAK           reduce using rule 11 (loop_start -> loop_start { loop_start } .)
    CONTINUE        reduce using rule 11 (loop_start -> loop_start { loop_start } .)
    RETURN          reduce using rule 11 (loop_start -> loop_start { loop_start } .)
    PRINT           reduce using rule 11 (loop_start -> loop_start { loop_start } .)
    IF              reduce using rule 11 (loop_start -> loop_start { loop_start } .)
    WHILE           reduce using rule 11 (loop_start -> loop_start { loop_start } .)
    FOR             reduce using rule 11 (loop_start -> loop_start { loop_start } .)


state 175

    (69) loop_cond_if -> IF ( expr ) loop_cond_block .

    {               reduce using rule 69 (loop_cond_if -> IF ( expr ) loop_cond_block .)
    INTNUM          reduce using rule 69 (loop_cond_if -> IF ( expr ) loop_cond_block .)
    FLOATNUM        reduce using rule 69 (loop_cond_if -> IF ( expr ) loop_cond_block .)
    STRING          reduce using rule 69 (loop_cond_if -> IF ( expr ) loop_cond_block .)
    ID              reduce using rule 69 (loop_cond_if -> IF ( expr ) loop_cond_block .)
    (               reduce using rule 69 (loop_cond_if -> IF ( expr ) loop_cond_block .)
    -               reduce using rule 69 (loop_cond_if -> IF ( expr ) loop_cond_block .)
    [               reduce using rule 69 (loop_cond_if -> IF ( expr ) loop_cond_block .)
    RETURN          reduce using rule 69 (loop_cond_if -> IF ( expr ) loop_cond_block .)
    PRINT           reduce using rule 69 (loop_cond_if -> IF ( expr ) loop_cond_block .)
    IF              reduce using rule 69 (loop_cond_if -> IF ( expr ) loop_cond_block .)
    WHILE           reduce using rule 69 (loop_cond_if -> IF ( expr ) loop_cond_block .)
    FOR             reduce using rule 69 (loop_cond_if -> IF ( expr ) loop_cond_block .)
    $end            reduce using rule 69 (loop_cond_if -> IF ( expr ) loop_cond_block .)
    }               reduce using rule 69 (loop_cond_if -> IF ( expr ) loop_cond_block .)
    ELSE            reduce using rule 69 (loop_cond_if -> IF ( expr ) loop_cond_block .)
    BREAK           reduce using rule 69 (loop_cond_if -> IF ( expr ) loop_cond_block .)
    CONTINUE        reduce using rule 69 (loop_cond_if -> IF ( expr ) loop_cond_block .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for [ in state 10 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 14 resolved as shift
WARNING: shift/reduce conflict for ' in state 67 resolved as shift
WARNING: shift/reduce conflict for + in state 67 resolved as shift
WARNING: shift/reduce conflict for - in state 67 resolved as shift
WARNING: shift/reduce conflict for * in state 67 resolved as shift
WARNING: shift/reduce conflict for / in state 67 resolved as shift
WARNING: shift/reduce conflict for MPLUS in state 67 resolved as shift
WARNING: shift/reduce conflict for MMINUS in state 67 resolved as shift
WARNING: shift/reduce conflict for MMLTP in state 67 resolved as shift
WARNING: shift/reduce conflict for MDIV in state 67 resolved as shift
WARNING: shift/reduce conflict for EQ in state 67 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 67 resolved as shift
WARNING: shift/reduce conflict for GTEQ in state 67 resolved as shift
WARNING: shift/reduce conflict for LTEQ in state 67 resolved as shift
WARNING: shift/reduce conflict for > in state 67 resolved as shift
WARNING: shift/reduce conflict for < in state 67 resolved as shift
WARNING: shift/reduce conflict for ' in state 68 resolved as shift
WARNING: shift/reduce conflict for + in state 68 resolved as shift
WARNING: shift/reduce conflict for - in state 68 resolved as shift
WARNING: shift/reduce conflict for * in state 68 resolved as shift
WARNING: shift/reduce conflict for / in state 68 resolved as shift
WARNING: shift/reduce conflict for MPLUS in state 68 resolved as shift
WARNING: shift/reduce conflict for MMINUS in state 68 resolved as shift
WARNING: shift/reduce conflict for MMLTP in state 68 resolved as shift
WARNING: shift/reduce conflict for MDIV in state 68 resolved as shift
WARNING: shift/reduce conflict for EQ in state 68 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 68 resolved as shift
WARNING: shift/reduce conflict for GTEQ in state 68 resolved as shift
WARNING: shift/reduce conflict for LTEQ in state 68 resolved as shift
WARNING: shift/reduce conflict for > in state 68 resolved as shift
WARNING: shift/reduce conflict for < in state 68 resolved as shift
WARNING: shift/reduce conflict for ' in state 69 resolved as shift
WARNING: shift/reduce conflict for + in state 69 resolved as shift
WARNING: shift/reduce conflict for - in state 69 resolved as shift
WARNING: shift/reduce conflict for * in state 69 resolved as shift
WARNING: shift/reduce conflict for / in state 69 resolved as shift
WARNING: shift/reduce conflict for MPLUS in state 69 resolved as shift
WARNING: shift/reduce conflict for MMINUS in state 69 resolved as shift
WARNING: shift/reduce conflict for MMLTP in state 69 resolved as shift
WARNING: shift/reduce conflict for MDIV in state 69 resolved as shift
WARNING: shift/reduce conflict for EQ in state 69 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 69 resolved as shift
WARNING: shift/reduce conflict for GTEQ in state 69 resolved as shift
WARNING: shift/reduce conflict for LTEQ in state 69 resolved as shift
WARNING: shift/reduce conflict for > in state 69 resolved as shift
WARNING: shift/reduce conflict for < in state 69 resolved as shift
WARNING: shift/reduce conflict for ' in state 70 resolved as shift
WARNING: shift/reduce conflict for + in state 70 resolved as shift
WARNING: shift/reduce conflict for - in state 70 resolved as shift
WARNING: shift/reduce conflict for * in state 70 resolved as shift
WARNING: shift/reduce conflict for / in state 70 resolved as shift
WARNING: shift/reduce conflict for MPLUS in state 70 resolved as shift
WARNING: shift/reduce conflict for MMINUS in state 70 resolved as shift
WARNING: shift/reduce conflict for MMLTP in state 70 resolved as shift
WARNING: shift/reduce conflict for MDIV in state 70 resolved as shift
WARNING: shift/reduce conflict for EQ in state 70 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 70 resolved as shift
WARNING: shift/reduce conflict for GTEQ in state 70 resolved as shift
WARNING: shift/reduce conflict for LTEQ in state 70 resolved as shift
WARNING: shift/reduce conflict for > in state 70 resolved as shift
WARNING: shift/reduce conflict for < in state 70 resolved as shift
WARNING: shift/reduce conflict for ' in state 71 resolved as shift
WARNING: shift/reduce conflict for + in state 71 resolved as shift
WARNING: shift/reduce conflict for - in state 71 resolved as shift
WARNING: shift/reduce conflict for * in state 71 resolved as shift
WARNING: shift/reduce conflict for / in state 71 resolved as shift
WARNING: shift/reduce conflict for MPLUS in state 71 resolved as shift
WARNING: shift/reduce conflict for MMINUS in state 71 resolved as shift
WARNING: shift/reduce conflict for MMLTP in state 71 resolved as shift
WARNING: shift/reduce conflict for MDIV in state 71 resolved as shift
WARNING: shift/reduce conflict for EQ in state 71 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 71 resolved as shift
WARNING: shift/reduce conflict for GTEQ in state 71 resolved as shift
WARNING: shift/reduce conflict for LTEQ in state 71 resolved as shift
WARNING: shift/reduce conflict for > in state 71 resolved as shift
WARNING: shift/reduce conflict for < in state 71 resolved as shift
WARNING: shift/reduce conflict for ' in state 72 resolved as shift
WARNING: shift/reduce conflict for + in state 72 resolved as shift
WARNING: shift/reduce conflict for - in state 72 resolved as shift
WARNING: shift/reduce conflict for * in state 72 resolved as shift
WARNING: shift/reduce conflict for / in state 72 resolved as shift
WARNING: shift/reduce conflict for MPLUS in state 72 resolved as shift
WARNING: shift/reduce conflict for MMINUS in state 72 resolved as shift
WARNING: shift/reduce conflict for MMLTP in state 72 resolved as shift
WARNING: shift/reduce conflict for MDIV in state 72 resolved as shift
WARNING: shift/reduce conflict for EQ in state 72 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 72 resolved as shift
WARNING: shift/reduce conflict for GTEQ in state 72 resolved as shift
WARNING: shift/reduce conflict for LTEQ in state 72 resolved as shift
WARNING: shift/reduce conflict for > in state 72 resolved as shift
WARNING: shift/reduce conflict for < in state 72 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 121 resolved as shift
WARNING: reduce/reduce conflict in state 173 resolved using rule (expr -> - expr)
WARNING: rejected rule (expr -> expr - expr) in state 173
