Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> start
Rule 1     start -> struct
Rule 2     start -> start struct
Rule 3     start -> { start }
Rule 4     start -> start { start }
Rule 5     struct -> expr ;
Rule 6     struct -> cond_expr
Rule 7     struct -> instruction
Rule 8     expr -> INTNUM
Rule 9     expr -> FLOATNUM
Rule 10    expr -> STRING
Rule 11    expr -> ID
Rule 12    expr -> ( expr )
Rule 13    expr -> - expr
Rule 14    expr -> expr '
Rule 15    array_interior -> array_interior , expr
Rule 16    array_interior -> expr
Rule 17    expr -> [ array_interior ]
Rule 18    expr -> ID = expr
Rule 19    expr -> ID PLUSASSIGN expr
Rule 20    expr -> ID MINASSIGN expr
Rule 21    expr -> ID MULTASSIGN expr
Rule 22    expr -> ID DIVASSIGN expr
Rule 23    expr -> ID [ INTNUM ] = expr
Rule 24    expr -> ID [ INTNUM ] PLUSASSIGN expr
Rule 25    expr -> ID [ INTNUM ] MINASSIGN expr
Rule 26    expr -> ID [ INTNUM ] MULTASSIGN expr
Rule 27    expr -> ID [ INTNUM ] DIVASSIGN expr
Rule 28    expr -> ID [ INTNUM , INTNUM ] = expr
Rule 29    expr -> ID [ INTNUM , INTNUM ] PLUSASSIGN expr
Rule 30    expr -> ID [ INTNUM , INTNUM ] MINASSIGN expr
Rule 31    expr -> ID [ INTNUM , INTNUM ] MULTASSIGN expr
Rule 32    expr -> ID [ INTNUM , INTNUM ] DIVASSIGN expr
Rule 33    expr -> ID = ZEROS ( INTNUM )
Rule 34    expr -> ID = ONES ( INTNUM )
Rule 35    expr -> ID = EYE ( INTNUM )
Rule 36    expr -> expr + expr
Rule 37    expr -> expr - expr
Rule 38    expr -> expr * expr
Rule 39    expr -> expr / expr
Rule 40    expr -> expr MPLUS expr
Rule 41    expr -> expr MMINUS expr
Rule 42    expr -> expr MMLTP expr
Rule 43    expr -> expr MDIV expr
Rule 44    expr -> expr EQ expr
Rule 45    expr -> expr NEQ expr
Rule 46    expr -> expr GTEQ expr
Rule 47    expr -> expr LTEQ expr
Rule 48    expr -> expr > expr
Rule 49    expr -> expr < expr
Rule 50    cond_expr -> cond_if
Rule 51    cond_expr -> cond_while
Rule 52    cond_expr -> cond_for
Rule 53    cond_block -> struct
Rule 54    cond_block -> { start }
Rule 55    cond_if -> IF ( expr ) cond_block
Rule 56    cond_if -> cond_if ELSE cond_block
Rule 57    cond_while -> WHILE ( expr ) cond_block
Rule 58    cond_for -> FOR ID = expr : expr cond_block
Rule 59    instruction -> BREAK ;
Rule 60    instruction -> CONTINUE ;
Rule 61    instruction -> RETURN expr ;
Rule 62    instruction -> PRINT array_interior ;

Terminals, with rules where they appear

'                    : 14
(                    : 12 33 34 35 55 57
)                    : 12 33 34 35 55 57
*                    : 38
+                    : 36
,                    : 15 28 29 30 31 32
-                    : 13 37
/                    : 39
:                    : 58
;                    : 5 59 60 61 62
<                    : 49
=                    : 18 23 28 33 34 35 58
>                    : 48
BREAK                : 59
CONTINUE             : 60
DIVASSIGN            : 22 27 32
ELSE                 : 56
EQ                   : 44
EYE                  : 35
FLOATNUM             : 9
FOR                  : 58
GTEQ                 : 46
ID                   : 11 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 58
IF                   : 55
INTNUM               : 8 23 24 25 26 27 28 28 29 29 30 30 31 31 32 32 33 34 35
LTEQ                 : 47
MDIV                 : 43
MINASSIGN            : 20 25 30
MMINUS               : 41
MMLTP                : 42
MPLUS                : 40
MULTASSIGN           : 21 26 31
NEQ                  : 45
ONES                 : 34
PLUSASSIGN           : 19 24 29
PRINT                : 62
RETURN               : 61
STRING               : 10
WHILE                : 57
ZEROS                : 33
[                    : 17 23 24 25 26 27 28 29 30 31 32
]                    : 17 23 24 25 26 27 28 29 30 31 32
error                : 
{                    : 3 4 54
}                    : 3 4 54

Nonterminals, with rules where they appear

array_interior       : 15 17 62
cond_block           : 55 56 57 58
cond_expr            : 6
cond_for             : 52
cond_if              : 50 56
cond_while           : 51
expr                 : 5 12 13 14 15 16 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 36 36 37 37 38 38 39 39 40 40 41 41 42 42 43 43 44 44 45 45 46 46 47 47 48 48 49 49 55 57 58 58 61
instruction          : 7
start                : 2 3 4 4 54 0
struct               : 1 2 53

Parsing method: LALR

state 0

    (0) S' -> . start
    (1) start -> . struct
    (2) start -> . start struct
    (3) start -> . { start }
    (4) start -> . start { start }
    (5) struct -> . expr ;
    (6) struct -> . cond_expr
    (7) struct -> . instruction
    (8) expr -> . INTNUM
    (9) expr -> . FLOATNUM
    (10) expr -> . STRING
    (11) expr -> . ID
    (12) expr -> . ( expr )
    (13) expr -> . - expr
    (14) expr -> . expr '
    (17) expr -> . [ array_interior ]
    (18) expr -> . ID = expr
    (19) expr -> . ID PLUSASSIGN expr
    (20) expr -> . ID MINASSIGN expr
    (21) expr -> . ID MULTASSIGN expr
    (22) expr -> . ID DIVASSIGN expr
    (23) expr -> . ID [ INTNUM ] = expr
    (24) expr -> . ID [ INTNUM ] PLUSASSIGN expr
    (25) expr -> . ID [ INTNUM ] MINASSIGN expr
    (26) expr -> . ID [ INTNUM ] MULTASSIGN expr
    (27) expr -> . ID [ INTNUM ] DIVASSIGN expr
    (28) expr -> . ID [ INTNUM , INTNUM ] = expr
    (29) expr -> . ID [ INTNUM , INTNUM ] PLUSASSIGN expr
    (30) expr -> . ID [ INTNUM , INTNUM ] MINASSIGN expr
    (31) expr -> . ID [ INTNUM , INTNUM ] MULTASSIGN expr
    (32) expr -> . ID [ INTNUM , INTNUM ] DIVASSIGN expr
    (33) expr -> . ID = ZEROS ( INTNUM )
    (34) expr -> . ID = ONES ( INTNUM )
    (35) expr -> . ID = EYE ( INTNUM )
    (36) expr -> . expr + expr
    (37) expr -> . expr - expr
    (38) expr -> . expr * expr
    (39) expr -> . expr / expr
    (40) expr -> . expr MPLUS expr
    (41) expr -> . expr MMINUS expr
    (42) expr -> . expr MMLTP expr
    (43) expr -> . expr MDIV expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr > expr
    (49) expr -> . expr < expr
    (50) cond_expr -> . cond_if
    (51) cond_expr -> . cond_while
    (52) cond_expr -> . cond_for
    (59) instruction -> . BREAK ;
    (60) instruction -> . CONTINUE ;
    (61) instruction -> . RETURN expr ;
    (62) instruction -> . PRINT array_interior ;
    (55) cond_if -> . IF ( expr ) cond_block
    (56) cond_if -> . cond_if ELSE cond_block
    (57) cond_while -> . WHILE ( expr ) cond_block
    (58) cond_for -> . FOR ID = expr : expr cond_block

    {               shift and go to state 3
    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ID              shift and go to state 10
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13
    BREAK           shift and go to state 17
    CONTINUE        shift and go to state 18
    RETURN          shift and go to state 19
    PRINT           shift and go to state 20
    IF              shift and go to state 21
    WHILE           shift and go to state 22
    FOR             shift and go to state 23

    start                          shift and go to state 1
    struct                         shift and go to state 2
    expr                           shift and go to state 4
    cond_expr                      shift and go to state 5
    instruction                    shift and go to state 6
    cond_if                        shift and go to state 14
    cond_while                     shift and go to state 15
    cond_for                       shift and go to state 16

state 1

    (0) S' -> start .
    (2) start -> start . struct
    (4) start -> start . { start }
    (5) struct -> . expr ;
    (6) struct -> . cond_expr
    (7) struct -> . instruction
    (8) expr -> . INTNUM
    (9) expr -> . FLOATNUM
    (10) expr -> . STRING
    (11) expr -> . ID
    (12) expr -> . ( expr )
    (13) expr -> . - expr
    (14) expr -> . expr '
    (17) expr -> . [ array_interior ]
    (18) expr -> . ID = expr
    (19) expr -> . ID PLUSASSIGN expr
    (20) expr -> . ID MINASSIGN expr
    (21) expr -> . ID MULTASSIGN expr
    (22) expr -> . ID DIVASSIGN expr
    (23) expr -> . ID [ INTNUM ] = expr
    (24) expr -> . ID [ INTNUM ] PLUSASSIGN expr
    (25) expr -> . ID [ INTNUM ] MINASSIGN expr
    (26) expr -> . ID [ INTNUM ] MULTASSIGN expr
    (27) expr -> . ID [ INTNUM ] DIVASSIGN expr
    (28) expr -> . ID [ INTNUM , INTNUM ] = expr
    (29) expr -> . ID [ INTNUM , INTNUM ] PLUSASSIGN expr
    (30) expr -> . ID [ INTNUM , INTNUM ] MINASSIGN expr
    (31) expr -> . ID [ INTNUM , INTNUM ] MULTASSIGN expr
    (32) expr -> . ID [ INTNUM , INTNUM ] DIVASSIGN expr
    (33) expr -> . ID = ZEROS ( INTNUM )
    (34) expr -> . ID = ONES ( INTNUM )
    (35) expr -> . ID = EYE ( INTNUM )
    (36) expr -> . expr + expr
    (37) expr -> . expr - expr
    (38) expr -> . expr * expr
    (39) expr -> . expr / expr
    (40) expr -> . expr MPLUS expr
    (41) expr -> . expr MMINUS expr
    (42) expr -> . expr MMLTP expr
    (43) expr -> . expr MDIV expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr > expr
    (49) expr -> . expr < expr
    (50) cond_expr -> . cond_if
    (51) cond_expr -> . cond_while
    (52) cond_expr -> . cond_for
    (59) instruction -> . BREAK ;
    (60) instruction -> . CONTINUE ;
    (61) instruction -> . RETURN expr ;
    (62) instruction -> . PRINT array_interior ;
    (55) cond_if -> . IF ( expr ) cond_block
    (56) cond_if -> . cond_if ELSE cond_block
    (57) cond_while -> . WHILE ( expr ) cond_block
    (58) cond_for -> . FOR ID = expr : expr cond_block

    {               shift and go to state 25
    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ID              shift and go to state 10
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13
    BREAK           shift and go to state 17
    CONTINUE        shift and go to state 18
    RETURN          shift and go to state 19
    PRINT           shift and go to state 20
    IF              shift and go to state 21
    WHILE           shift and go to state 22
    FOR             shift and go to state 23

    struct                         shift and go to state 24
    expr                           shift and go to state 4
    cond_expr                      shift and go to state 5
    instruction                    shift and go to state 6
    cond_if                        shift and go to state 14
    cond_while                     shift and go to state 15
    cond_for                       shift and go to state 16

state 2

    (1) start -> struct .

    {               reduce using rule 1 (start -> struct .)
    INTNUM          reduce using rule 1 (start -> struct .)
    FLOATNUM        reduce using rule 1 (start -> struct .)
    STRING          reduce using rule 1 (start -> struct .)
    ID              reduce using rule 1 (start -> struct .)
    (               reduce using rule 1 (start -> struct .)
    -               reduce using rule 1 (start -> struct .)
    [               reduce using rule 1 (start -> struct .)
    BREAK           reduce using rule 1 (start -> struct .)
    CONTINUE        reduce using rule 1 (start -> struct .)
    RETURN          reduce using rule 1 (start -> struct .)
    PRINT           reduce using rule 1 (start -> struct .)
    IF              reduce using rule 1 (start -> struct .)
    WHILE           reduce using rule 1 (start -> struct .)
    FOR             reduce using rule 1 (start -> struct .)
    $end            reduce using rule 1 (start -> struct .)
    }               reduce using rule 1 (start -> struct .)


state 3

    (3) start -> { . start }
    (1) start -> . struct
    (2) start -> . start struct
    (3) start -> . { start }
    (4) start -> . start { start }
    (5) struct -> . expr ;
    (6) struct -> . cond_expr
    (7) struct -> . instruction
    (8) expr -> . INTNUM
    (9) expr -> . FLOATNUM
    (10) expr -> . STRING
    (11) expr -> . ID
    (12) expr -> . ( expr )
    (13) expr -> . - expr
    (14) expr -> . expr '
    (17) expr -> . [ array_interior ]
    (18) expr -> . ID = expr
    (19) expr -> . ID PLUSASSIGN expr
    (20) expr -> . ID MINASSIGN expr
    (21) expr -> . ID MULTASSIGN expr
    (22) expr -> . ID DIVASSIGN expr
    (23) expr -> . ID [ INTNUM ] = expr
    (24) expr -> . ID [ INTNUM ] PLUSASSIGN expr
    (25) expr -> . ID [ INTNUM ] MINASSIGN expr
    (26) expr -> . ID [ INTNUM ] MULTASSIGN expr
    (27) expr -> . ID [ INTNUM ] DIVASSIGN expr
    (28) expr -> . ID [ INTNUM , INTNUM ] = expr
    (29) expr -> . ID [ INTNUM , INTNUM ] PLUSASSIGN expr
    (30) expr -> . ID [ INTNUM , INTNUM ] MINASSIGN expr
    (31) expr -> . ID [ INTNUM , INTNUM ] MULTASSIGN expr
    (32) expr -> . ID [ INTNUM , INTNUM ] DIVASSIGN expr
    (33) expr -> . ID = ZEROS ( INTNUM )
    (34) expr -> . ID = ONES ( INTNUM )
    (35) expr -> . ID = EYE ( INTNUM )
    (36) expr -> . expr + expr
    (37) expr -> . expr - expr
    (38) expr -> . expr * expr
    (39) expr -> . expr / expr
    (40) expr -> . expr MPLUS expr
    (41) expr -> . expr MMINUS expr
    (42) expr -> . expr MMLTP expr
    (43) expr -> . expr MDIV expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr > expr
    (49) expr -> . expr < expr
    (50) cond_expr -> . cond_if
    (51) cond_expr -> . cond_while
    (52) cond_expr -> . cond_for
    (59) instruction -> . BREAK ;
    (60) instruction -> . CONTINUE ;
    (61) instruction -> . RETURN expr ;
    (62) instruction -> . PRINT array_interior ;
    (55) cond_if -> . IF ( expr ) cond_block
    (56) cond_if -> . cond_if ELSE cond_block
    (57) cond_while -> . WHILE ( expr ) cond_block
    (58) cond_for -> . FOR ID = expr : expr cond_block

    {               shift and go to state 3
    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ID              shift and go to state 10
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13
    BREAK           shift and go to state 17
    CONTINUE        shift and go to state 18
    RETURN          shift and go to state 19
    PRINT           shift and go to state 20
    IF              shift and go to state 21
    WHILE           shift and go to state 22
    FOR             shift and go to state 23

    start                          shift and go to state 26
    struct                         shift and go to state 2
    expr                           shift and go to state 4
    cond_expr                      shift and go to state 5
    instruction                    shift and go to state 6
    cond_if                        shift and go to state 14
    cond_while                     shift and go to state 15
    cond_for                       shift and go to state 16

state 4

    (5) struct -> expr . ;
    (14) expr -> expr . '
    (36) expr -> expr . + expr
    (37) expr -> expr . - expr
    (38) expr -> expr . * expr
    (39) expr -> expr . / expr
    (40) expr -> expr . MPLUS expr
    (41) expr -> expr . MMINUS expr
    (42) expr -> expr . MMLTP expr
    (43) expr -> expr . MDIV expr
    (44) expr -> expr . EQ expr
    (45) expr -> expr . NEQ expr
    (46) expr -> expr . GTEQ expr
    (47) expr -> expr . LTEQ expr
    (48) expr -> expr . > expr
    (49) expr -> expr . < expr

    ;               shift and go to state 27
    '               shift and go to state 28
    +               shift and go to state 29
    -               shift and go to state 30
    *               shift and go to state 31
    /               shift and go to state 32
    MPLUS           shift and go to state 33
    MMINUS          shift and go to state 34
    MMLTP           shift and go to state 35
    MDIV            shift and go to state 36
    EQ              shift and go to state 37
    NEQ             shift and go to state 38
    GTEQ            shift and go to state 39
    LTEQ            shift and go to state 40
    >               shift and go to state 41
    <               shift and go to state 42


state 5

    (6) struct -> cond_expr .

    {               reduce using rule 6 (struct -> cond_expr .)
    INTNUM          reduce using rule 6 (struct -> cond_expr .)
    FLOATNUM        reduce using rule 6 (struct -> cond_expr .)
    STRING          reduce using rule 6 (struct -> cond_expr .)
    ID              reduce using rule 6 (struct -> cond_expr .)
    (               reduce using rule 6 (struct -> cond_expr .)
    -               reduce using rule 6 (struct -> cond_expr .)
    [               reduce using rule 6 (struct -> cond_expr .)
    BREAK           reduce using rule 6 (struct -> cond_expr .)
    CONTINUE        reduce using rule 6 (struct -> cond_expr .)
    RETURN          reduce using rule 6 (struct -> cond_expr .)
    PRINT           reduce using rule 6 (struct -> cond_expr .)
    IF              reduce using rule 6 (struct -> cond_expr .)
    WHILE           reduce using rule 6 (struct -> cond_expr .)
    FOR             reduce using rule 6 (struct -> cond_expr .)
    $end            reduce using rule 6 (struct -> cond_expr .)
    }               reduce using rule 6 (struct -> cond_expr .)
    ELSE            reduce using rule 6 (struct -> cond_expr .)


state 6

    (7) struct -> instruction .

    {               reduce using rule 7 (struct -> instruction .)
    INTNUM          reduce using rule 7 (struct -> instruction .)
    FLOATNUM        reduce using rule 7 (struct -> instruction .)
    STRING          reduce using rule 7 (struct -> instruction .)
    ID              reduce using rule 7 (struct -> instruction .)
    (               reduce using rule 7 (struct -> instruction .)
    -               reduce using rule 7 (struct -> instruction .)
    [               reduce using rule 7 (struct -> instruction .)
    BREAK           reduce using rule 7 (struct -> instruction .)
    CONTINUE        reduce using rule 7 (struct -> instruction .)
    RETURN          reduce using rule 7 (struct -> instruction .)
    PRINT           reduce using rule 7 (struct -> instruction .)
    IF              reduce using rule 7 (struct -> instruction .)
    WHILE           reduce using rule 7 (struct -> instruction .)
    FOR             reduce using rule 7 (struct -> instruction .)
    $end            reduce using rule 7 (struct -> instruction .)
    }               reduce using rule 7 (struct -> instruction .)
    ELSE            reduce using rule 7 (struct -> instruction .)


state 7

    (8) expr -> INTNUM .

    ;               reduce using rule 8 (expr -> INTNUM .)
    '               reduce using rule 8 (expr -> INTNUM .)
    +               reduce using rule 8 (expr -> INTNUM .)
    -               reduce using rule 8 (expr -> INTNUM .)
    *               reduce using rule 8 (expr -> INTNUM .)
    /               reduce using rule 8 (expr -> INTNUM .)
    MPLUS           reduce using rule 8 (expr -> INTNUM .)
    MMINUS          reduce using rule 8 (expr -> INTNUM .)
    MMLTP           reduce using rule 8 (expr -> INTNUM .)
    MDIV            reduce using rule 8 (expr -> INTNUM .)
    EQ              reduce using rule 8 (expr -> INTNUM .)
    NEQ             reduce using rule 8 (expr -> INTNUM .)
    GTEQ            reduce using rule 8 (expr -> INTNUM .)
    LTEQ            reduce using rule 8 (expr -> INTNUM .)
    >               reduce using rule 8 (expr -> INTNUM .)
    <               reduce using rule 8 (expr -> INTNUM .)
    )               reduce using rule 8 (expr -> INTNUM .)
    ]               reduce using rule 8 (expr -> INTNUM .)
    ,               reduce using rule 8 (expr -> INTNUM .)
    :               reduce using rule 8 (expr -> INTNUM .)
    {               reduce using rule 8 (expr -> INTNUM .)
    INTNUM          reduce using rule 8 (expr -> INTNUM .)
    FLOATNUM        reduce using rule 8 (expr -> INTNUM .)
    STRING          reduce using rule 8 (expr -> INTNUM .)
    ID              reduce using rule 8 (expr -> INTNUM .)
    (               reduce using rule 8 (expr -> INTNUM .)
    [               reduce using rule 8 (expr -> INTNUM .)
    BREAK           reduce using rule 8 (expr -> INTNUM .)
    CONTINUE        reduce using rule 8 (expr -> INTNUM .)
    RETURN          reduce using rule 8 (expr -> INTNUM .)
    PRINT           reduce using rule 8 (expr -> INTNUM .)
    IF              reduce using rule 8 (expr -> INTNUM .)
    WHILE           reduce using rule 8 (expr -> INTNUM .)
    FOR             reduce using rule 8 (expr -> INTNUM .)


state 8

    (9) expr -> FLOATNUM .

    ;               reduce using rule 9 (expr -> FLOATNUM .)
    '               reduce using rule 9 (expr -> FLOATNUM .)
    +               reduce using rule 9 (expr -> FLOATNUM .)
    -               reduce using rule 9 (expr -> FLOATNUM .)
    *               reduce using rule 9 (expr -> FLOATNUM .)
    /               reduce using rule 9 (expr -> FLOATNUM .)
    MPLUS           reduce using rule 9 (expr -> FLOATNUM .)
    MMINUS          reduce using rule 9 (expr -> FLOATNUM .)
    MMLTP           reduce using rule 9 (expr -> FLOATNUM .)
    MDIV            reduce using rule 9 (expr -> FLOATNUM .)
    EQ              reduce using rule 9 (expr -> FLOATNUM .)
    NEQ             reduce using rule 9 (expr -> FLOATNUM .)
    GTEQ            reduce using rule 9 (expr -> FLOATNUM .)
    LTEQ            reduce using rule 9 (expr -> FLOATNUM .)
    >               reduce using rule 9 (expr -> FLOATNUM .)
    <               reduce using rule 9 (expr -> FLOATNUM .)
    )               reduce using rule 9 (expr -> FLOATNUM .)
    ]               reduce using rule 9 (expr -> FLOATNUM .)
    ,               reduce using rule 9 (expr -> FLOATNUM .)
    :               reduce using rule 9 (expr -> FLOATNUM .)
    {               reduce using rule 9 (expr -> FLOATNUM .)
    INTNUM          reduce using rule 9 (expr -> FLOATNUM .)
    FLOATNUM        reduce using rule 9 (expr -> FLOATNUM .)
    STRING          reduce using rule 9 (expr -> FLOATNUM .)
    ID              reduce using rule 9 (expr -> FLOATNUM .)
    (               reduce using rule 9 (expr -> FLOATNUM .)
    [               reduce using rule 9 (expr -> FLOATNUM .)
    BREAK           reduce using rule 9 (expr -> FLOATNUM .)
    CONTINUE        reduce using rule 9 (expr -> FLOATNUM .)
    RETURN          reduce using rule 9 (expr -> FLOATNUM .)
    PRINT           reduce using rule 9 (expr -> FLOATNUM .)
    IF              reduce using rule 9 (expr -> FLOATNUM .)
    WHILE           reduce using rule 9 (expr -> FLOATNUM .)
    FOR             reduce using rule 9 (expr -> FLOATNUM .)


state 9

    (10) expr -> STRING .

    ;               reduce using rule 10 (expr -> STRING .)
    '               reduce using rule 10 (expr -> STRING .)
    +               reduce using rule 10 (expr -> STRING .)
    -               reduce using rule 10 (expr -> STRING .)
    *               reduce using rule 10 (expr -> STRING .)
    /               reduce using rule 10 (expr -> STRING .)
    MPLUS           reduce using rule 10 (expr -> STRING .)
    MMINUS          reduce using rule 10 (expr -> STRING .)
    MMLTP           reduce using rule 10 (expr -> STRING .)
    MDIV            reduce using rule 10 (expr -> STRING .)
    EQ              reduce using rule 10 (expr -> STRING .)
    NEQ             reduce using rule 10 (expr -> STRING .)
    GTEQ            reduce using rule 10 (expr -> STRING .)
    LTEQ            reduce using rule 10 (expr -> STRING .)
    >               reduce using rule 10 (expr -> STRING .)
    <               reduce using rule 10 (expr -> STRING .)
    )               reduce using rule 10 (expr -> STRING .)
    ]               reduce using rule 10 (expr -> STRING .)
    ,               reduce using rule 10 (expr -> STRING .)
    :               reduce using rule 10 (expr -> STRING .)
    {               reduce using rule 10 (expr -> STRING .)
    INTNUM          reduce using rule 10 (expr -> STRING .)
    FLOATNUM        reduce using rule 10 (expr -> STRING .)
    STRING          reduce using rule 10 (expr -> STRING .)
    ID              reduce using rule 10 (expr -> STRING .)
    (               reduce using rule 10 (expr -> STRING .)
    [               reduce using rule 10 (expr -> STRING .)
    BREAK           reduce using rule 10 (expr -> STRING .)
    CONTINUE        reduce using rule 10 (expr -> STRING .)
    RETURN          reduce using rule 10 (expr -> STRING .)
    PRINT           reduce using rule 10 (expr -> STRING .)
    IF              reduce using rule 10 (expr -> STRING .)
    WHILE           reduce using rule 10 (expr -> STRING .)
    FOR             reduce using rule 10 (expr -> STRING .)


state 10

    (11) expr -> ID .
    (18) expr -> ID . = expr
    (19) expr -> ID . PLUSASSIGN expr
    (20) expr -> ID . MINASSIGN expr
    (21) expr -> ID . MULTASSIGN expr
    (22) expr -> ID . DIVASSIGN expr
    (23) expr -> ID . [ INTNUM ] = expr
    (24) expr -> ID . [ INTNUM ] PLUSASSIGN expr
    (25) expr -> ID . [ INTNUM ] MINASSIGN expr
    (26) expr -> ID . [ INTNUM ] MULTASSIGN expr
    (27) expr -> ID . [ INTNUM ] DIVASSIGN expr
    (28) expr -> ID . [ INTNUM , INTNUM ] = expr
    (29) expr -> ID . [ INTNUM , INTNUM ] PLUSASSIGN expr
    (30) expr -> ID . [ INTNUM , INTNUM ] MINASSIGN expr
    (31) expr -> ID . [ INTNUM , INTNUM ] MULTASSIGN expr
    (32) expr -> ID . [ INTNUM , INTNUM ] DIVASSIGN expr
    (33) expr -> ID . = ZEROS ( INTNUM )
    (34) expr -> ID . = ONES ( INTNUM )
    (35) expr -> ID . = EYE ( INTNUM )

  ! shift/reduce conflict for [ resolved as shift
    ;               reduce using rule 11 (expr -> ID .)
    '               reduce using rule 11 (expr -> ID .)
    +               reduce using rule 11 (expr -> ID .)
    -               reduce using rule 11 (expr -> ID .)
    *               reduce using rule 11 (expr -> ID .)
    /               reduce using rule 11 (expr -> ID .)
    MPLUS           reduce using rule 11 (expr -> ID .)
    MMINUS          reduce using rule 11 (expr -> ID .)
    MMLTP           reduce using rule 11 (expr -> ID .)
    MDIV            reduce using rule 11 (expr -> ID .)
    EQ              reduce using rule 11 (expr -> ID .)
    NEQ             reduce using rule 11 (expr -> ID .)
    GTEQ            reduce using rule 11 (expr -> ID .)
    LTEQ            reduce using rule 11 (expr -> ID .)
    >               reduce using rule 11 (expr -> ID .)
    <               reduce using rule 11 (expr -> ID .)
    )               reduce using rule 11 (expr -> ID .)
    ]               reduce using rule 11 (expr -> ID .)
    ,               reduce using rule 11 (expr -> ID .)
    :               reduce using rule 11 (expr -> ID .)
    {               reduce using rule 11 (expr -> ID .)
    INTNUM          reduce using rule 11 (expr -> ID .)
    FLOATNUM        reduce using rule 11 (expr -> ID .)
    STRING          reduce using rule 11 (expr -> ID .)
    ID              reduce using rule 11 (expr -> ID .)
    (               reduce using rule 11 (expr -> ID .)
    BREAK           reduce using rule 11 (expr -> ID .)
    CONTINUE        reduce using rule 11 (expr -> ID .)
    RETURN          reduce using rule 11 (expr -> ID .)
    PRINT           reduce using rule 11 (expr -> ID .)
    IF              reduce using rule 11 (expr -> ID .)
    WHILE           reduce using rule 11 (expr -> ID .)
    FOR             reduce using rule 11 (expr -> ID .)
    =               shift and go to state 43
    PLUSASSIGN      shift and go to state 44
    MINASSIGN       shift and go to state 45
    MULTASSIGN      shift and go to state 46
    DIVASSIGN       shift and go to state 47
    [               shift and go to state 48

  ! [               [ reduce using rule 11 (expr -> ID .) ]


state 11

    (12) expr -> ( . expr )
    (8) expr -> . INTNUM
    (9) expr -> . FLOATNUM
    (10) expr -> . STRING
    (11) expr -> . ID
    (12) expr -> . ( expr )
    (13) expr -> . - expr
    (14) expr -> . expr '
    (17) expr -> . [ array_interior ]
    (18) expr -> . ID = expr
    (19) expr -> . ID PLUSASSIGN expr
    (20) expr -> . ID MINASSIGN expr
    (21) expr -> . ID MULTASSIGN expr
    (22) expr -> . ID DIVASSIGN expr
    (23) expr -> . ID [ INTNUM ] = expr
    (24) expr -> . ID [ INTNUM ] PLUSASSIGN expr
    (25) expr -> . ID [ INTNUM ] MINASSIGN expr
    (26) expr -> . ID [ INTNUM ] MULTASSIGN expr
    (27) expr -> . ID [ INTNUM ] DIVASSIGN expr
    (28) expr -> . ID [ INTNUM , INTNUM ] = expr
    (29) expr -> . ID [ INTNUM , INTNUM ] PLUSASSIGN expr
    (30) expr -> . ID [ INTNUM , INTNUM ] MINASSIGN expr
    (31) expr -> . ID [ INTNUM , INTNUM ] MULTASSIGN expr
    (32) expr -> . ID [ INTNUM , INTNUM ] DIVASSIGN expr
    (33) expr -> . ID = ZEROS ( INTNUM )
    (34) expr -> . ID = ONES ( INTNUM )
    (35) expr -> . ID = EYE ( INTNUM )
    (36) expr -> . expr + expr
    (37) expr -> . expr - expr
    (38) expr -> . expr * expr
    (39) expr -> . expr / expr
    (40) expr -> . expr MPLUS expr
    (41) expr -> . expr MMINUS expr
    (42) expr -> . expr MMLTP expr
    (43) expr -> . expr MDIV expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr > expr
    (49) expr -> . expr < expr

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ID              shift and go to state 10
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13

    expr                           shift and go to state 49

state 12

    (13) expr -> - . expr
    (8) expr -> . INTNUM
    (9) expr -> . FLOATNUM
    (10) expr -> . STRING
    (11) expr -> . ID
    (12) expr -> . ( expr )
    (13) expr -> . - expr
    (14) expr -> . expr '
    (17) expr -> . [ array_interior ]
    (18) expr -> . ID = expr
    (19) expr -> . ID PLUSASSIGN expr
    (20) expr -> . ID MINASSIGN expr
    (21) expr -> . ID MULTASSIGN expr
    (22) expr -> . ID DIVASSIGN expr
    (23) expr -> . ID [ INTNUM ] = expr
    (24) expr -> . ID [ INTNUM ] PLUSASSIGN expr
    (25) expr -> . ID [ INTNUM ] MINASSIGN expr
    (26) expr -> . ID [ INTNUM ] MULTASSIGN expr
    (27) expr -> . ID [ INTNUM ] DIVASSIGN expr
    (28) expr -> . ID [ INTNUM , INTNUM ] = expr
    (29) expr -> . ID [ INTNUM , INTNUM ] PLUSASSIGN expr
    (30) expr -> . ID [ INTNUM , INTNUM ] MINASSIGN expr
    (31) expr -> . ID [ INTNUM , INTNUM ] MULTASSIGN expr
    (32) expr -> . ID [ INTNUM , INTNUM ] DIVASSIGN expr
    (33) expr -> . ID = ZEROS ( INTNUM )
    (34) expr -> . ID = ONES ( INTNUM )
    (35) expr -> . ID = EYE ( INTNUM )
    (36) expr -> . expr + expr
    (37) expr -> . expr - expr
    (38) expr -> . expr * expr
    (39) expr -> . expr / expr
    (40) expr -> . expr MPLUS expr
    (41) expr -> . expr MMINUS expr
    (42) expr -> . expr MMLTP expr
    (43) expr -> . expr MDIV expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr > expr
    (49) expr -> . expr < expr

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ID              shift and go to state 10
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13

    expr                           shift and go to state 50

state 13

    (17) expr -> [ . array_interior ]
    (15) array_interior -> . array_interior , expr
    (16) array_interior -> . expr
    (8) expr -> . INTNUM
    (9) expr -> . FLOATNUM
    (10) expr -> . STRING
    (11) expr -> . ID
    (12) expr -> . ( expr )
    (13) expr -> . - expr
    (14) expr -> . expr '
    (17) expr -> . [ array_interior ]
    (18) expr -> . ID = expr
    (19) expr -> . ID PLUSASSIGN expr
    (20) expr -> . ID MINASSIGN expr
    (21) expr -> . ID MULTASSIGN expr
    (22) expr -> . ID DIVASSIGN expr
    (23) expr -> . ID [ INTNUM ] = expr
    (24) expr -> . ID [ INTNUM ] PLUSASSIGN expr
    (25) expr -> . ID [ INTNUM ] MINASSIGN expr
    (26) expr -> . ID [ INTNUM ] MULTASSIGN expr
    (27) expr -> . ID [ INTNUM ] DIVASSIGN expr
    (28) expr -> . ID [ INTNUM , INTNUM ] = expr
    (29) expr -> . ID [ INTNUM , INTNUM ] PLUSASSIGN expr
    (30) expr -> . ID [ INTNUM , INTNUM ] MINASSIGN expr
    (31) expr -> . ID [ INTNUM , INTNUM ] MULTASSIGN expr
    (32) expr -> . ID [ INTNUM , INTNUM ] DIVASSIGN expr
    (33) expr -> . ID = ZEROS ( INTNUM )
    (34) expr -> . ID = ONES ( INTNUM )
    (35) expr -> . ID = EYE ( INTNUM )
    (36) expr -> . expr + expr
    (37) expr -> . expr - expr
    (38) expr -> . expr * expr
    (39) expr -> . expr / expr
    (40) expr -> . expr MPLUS expr
    (41) expr -> . expr MMINUS expr
    (42) expr -> . expr MMLTP expr
    (43) expr -> . expr MDIV expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr > expr
    (49) expr -> . expr < expr

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ID              shift and go to state 10
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13

    array_interior                 shift and go to state 51
    expr                           shift and go to state 52

state 14

    (50) cond_expr -> cond_if .
    (56) cond_if -> cond_if . ELSE cond_block

  ! shift/reduce conflict for ELSE resolved as shift
    {               reduce using rule 50 (cond_expr -> cond_if .)
    INTNUM          reduce using rule 50 (cond_expr -> cond_if .)
    FLOATNUM        reduce using rule 50 (cond_expr -> cond_if .)
    STRING          reduce using rule 50 (cond_expr -> cond_if .)
    ID              reduce using rule 50 (cond_expr -> cond_if .)
    (               reduce using rule 50 (cond_expr -> cond_if .)
    -               reduce using rule 50 (cond_expr -> cond_if .)
    [               reduce using rule 50 (cond_expr -> cond_if .)
    BREAK           reduce using rule 50 (cond_expr -> cond_if .)
    CONTINUE        reduce using rule 50 (cond_expr -> cond_if .)
    RETURN          reduce using rule 50 (cond_expr -> cond_if .)
    PRINT           reduce using rule 50 (cond_expr -> cond_if .)
    IF              reduce using rule 50 (cond_expr -> cond_if .)
    WHILE           reduce using rule 50 (cond_expr -> cond_if .)
    FOR             reduce using rule 50 (cond_expr -> cond_if .)
    $end            reduce using rule 50 (cond_expr -> cond_if .)
    }               reduce using rule 50 (cond_expr -> cond_if .)
    ELSE            shift and go to state 53

  ! ELSE            [ reduce using rule 50 (cond_expr -> cond_if .) ]


state 15

    (51) cond_expr -> cond_while .

    {               reduce using rule 51 (cond_expr -> cond_while .)
    INTNUM          reduce using rule 51 (cond_expr -> cond_while .)
    FLOATNUM        reduce using rule 51 (cond_expr -> cond_while .)
    STRING          reduce using rule 51 (cond_expr -> cond_while .)
    ID              reduce using rule 51 (cond_expr -> cond_while .)
    (               reduce using rule 51 (cond_expr -> cond_while .)
    -               reduce using rule 51 (cond_expr -> cond_while .)
    [               reduce using rule 51 (cond_expr -> cond_while .)
    BREAK           reduce using rule 51 (cond_expr -> cond_while .)
    CONTINUE        reduce using rule 51 (cond_expr -> cond_while .)
    RETURN          reduce using rule 51 (cond_expr -> cond_while .)
    PRINT           reduce using rule 51 (cond_expr -> cond_while .)
    IF              reduce using rule 51 (cond_expr -> cond_while .)
    WHILE           reduce using rule 51 (cond_expr -> cond_while .)
    FOR             reduce using rule 51 (cond_expr -> cond_while .)
    $end            reduce using rule 51 (cond_expr -> cond_while .)
    }               reduce using rule 51 (cond_expr -> cond_while .)
    ELSE            reduce using rule 51 (cond_expr -> cond_while .)


state 16

    (52) cond_expr -> cond_for .

    {               reduce using rule 52 (cond_expr -> cond_for .)
    INTNUM          reduce using rule 52 (cond_expr -> cond_for .)
    FLOATNUM        reduce using rule 52 (cond_expr -> cond_for .)
    STRING          reduce using rule 52 (cond_expr -> cond_for .)
    ID              reduce using rule 52 (cond_expr -> cond_for .)
    (               reduce using rule 52 (cond_expr -> cond_for .)
    -               reduce using rule 52 (cond_expr -> cond_for .)
    [               reduce using rule 52 (cond_expr -> cond_for .)
    BREAK           reduce using rule 52 (cond_expr -> cond_for .)
    CONTINUE        reduce using rule 52 (cond_expr -> cond_for .)
    RETURN          reduce using rule 52 (cond_expr -> cond_for .)
    PRINT           reduce using rule 52 (cond_expr -> cond_for .)
    IF              reduce using rule 52 (cond_expr -> cond_for .)
    WHILE           reduce using rule 52 (cond_expr -> cond_for .)
    FOR             reduce using rule 52 (cond_expr -> cond_for .)
    $end            reduce using rule 52 (cond_expr -> cond_for .)
    }               reduce using rule 52 (cond_expr -> cond_for .)
    ELSE            reduce using rule 52 (cond_expr -> cond_for .)


state 17

    (59) instruction -> BREAK . ;

    ;               shift and go to state 54


state 18

    (60) instruction -> CONTINUE . ;

    ;               shift and go to state 55


state 19

    (61) instruction -> RETURN . expr ;
    (8) expr -> . INTNUM
    (9) expr -> . FLOATNUM
    (10) expr -> . STRING
    (11) expr -> . ID
    (12) expr -> . ( expr )
    (13) expr -> . - expr
    (14) expr -> . expr '
    (17) expr -> . [ array_interior ]
    (18) expr -> . ID = expr
    (19) expr -> . ID PLUSASSIGN expr
    (20) expr -> . ID MINASSIGN expr
    (21) expr -> . ID MULTASSIGN expr
    (22) expr -> . ID DIVASSIGN expr
    (23) expr -> . ID [ INTNUM ] = expr
    (24) expr -> . ID [ INTNUM ] PLUSASSIGN expr
    (25) expr -> . ID [ INTNUM ] MINASSIGN expr
    (26) expr -> . ID [ INTNUM ] MULTASSIGN expr
    (27) expr -> . ID [ INTNUM ] DIVASSIGN expr
    (28) expr -> . ID [ INTNUM , INTNUM ] = expr
    (29) expr -> . ID [ INTNUM , INTNUM ] PLUSASSIGN expr
    (30) expr -> . ID [ INTNUM , INTNUM ] MINASSIGN expr
    (31) expr -> . ID [ INTNUM , INTNUM ] MULTASSIGN expr
    (32) expr -> . ID [ INTNUM , INTNUM ] DIVASSIGN expr
    (33) expr -> . ID = ZEROS ( INTNUM )
    (34) expr -> . ID = ONES ( INTNUM )
    (35) expr -> . ID = EYE ( INTNUM )
    (36) expr -> . expr + expr
    (37) expr -> . expr - expr
    (38) expr -> . expr * expr
    (39) expr -> . expr / expr
    (40) expr -> . expr MPLUS expr
    (41) expr -> . expr MMINUS expr
    (42) expr -> . expr MMLTP expr
    (43) expr -> . expr MDIV expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr > expr
    (49) expr -> . expr < expr

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ID              shift and go to state 10
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13

    expr                           shift and go to state 56

state 20

    (62) instruction -> PRINT . array_interior ;
    (15) array_interior -> . array_interior , expr
    (16) array_interior -> . expr
    (8) expr -> . INTNUM
    (9) expr -> . FLOATNUM
    (10) expr -> . STRING
    (11) expr -> . ID
    (12) expr -> . ( expr )
    (13) expr -> . - expr
    (14) expr -> . expr '
    (17) expr -> . [ array_interior ]
    (18) expr -> . ID = expr
    (19) expr -> . ID PLUSASSIGN expr
    (20) expr -> . ID MINASSIGN expr
    (21) expr -> . ID MULTASSIGN expr
    (22) expr -> . ID DIVASSIGN expr
    (23) expr -> . ID [ INTNUM ] = expr
    (24) expr -> . ID [ INTNUM ] PLUSASSIGN expr
    (25) expr -> . ID [ INTNUM ] MINASSIGN expr
    (26) expr -> . ID [ INTNUM ] MULTASSIGN expr
    (27) expr -> . ID [ INTNUM ] DIVASSIGN expr
    (28) expr -> . ID [ INTNUM , INTNUM ] = expr
    (29) expr -> . ID [ INTNUM , INTNUM ] PLUSASSIGN expr
    (30) expr -> . ID [ INTNUM , INTNUM ] MINASSIGN expr
    (31) expr -> . ID [ INTNUM , INTNUM ] MULTASSIGN expr
    (32) expr -> . ID [ INTNUM , INTNUM ] DIVASSIGN expr
    (33) expr -> . ID = ZEROS ( INTNUM )
    (34) expr -> . ID = ONES ( INTNUM )
    (35) expr -> . ID = EYE ( INTNUM )
    (36) expr -> . expr + expr
    (37) expr -> . expr - expr
    (38) expr -> . expr * expr
    (39) expr -> . expr / expr
    (40) expr -> . expr MPLUS expr
    (41) expr -> . expr MMINUS expr
    (42) expr -> . expr MMLTP expr
    (43) expr -> . expr MDIV expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr > expr
    (49) expr -> . expr < expr

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ID              shift and go to state 10
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13

    array_interior                 shift and go to state 57
    expr                           shift and go to state 52

state 21

    (55) cond_if -> IF . ( expr ) cond_block

    (               shift and go to state 58


state 22

    (57) cond_while -> WHILE . ( expr ) cond_block

    (               shift and go to state 59


state 23

    (58) cond_for -> FOR . ID = expr : expr cond_block

    ID              shift and go to state 60


state 24

    (2) start -> start struct .

    {               reduce using rule 2 (start -> start struct .)
    INTNUM          reduce using rule 2 (start -> start struct .)
    FLOATNUM        reduce using rule 2 (start -> start struct .)
    STRING          reduce using rule 2 (start -> start struct .)
    ID              reduce using rule 2 (start -> start struct .)
    (               reduce using rule 2 (start -> start struct .)
    -               reduce using rule 2 (start -> start struct .)
    [               reduce using rule 2 (start -> start struct .)
    BREAK           reduce using rule 2 (start -> start struct .)
    CONTINUE        reduce using rule 2 (start -> start struct .)
    RETURN          reduce using rule 2 (start -> start struct .)
    PRINT           reduce using rule 2 (start -> start struct .)
    IF              reduce using rule 2 (start -> start struct .)
    WHILE           reduce using rule 2 (start -> start struct .)
    FOR             reduce using rule 2 (start -> start struct .)
    $end            reduce using rule 2 (start -> start struct .)
    }               reduce using rule 2 (start -> start struct .)


state 25

    (4) start -> start { . start }
    (1) start -> . struct
    (2) start -> . start struct
    (3) start -> . { start }
    (4) start -> . start { start }
    (5) struct -> . expr ;
    (6) struct -> . cond_expr
    (7) struct -> . instruction
    (8) expr -> . INTNUM
    (9) expr -> . FLOATNUM
    (10) expr -> . STRING
    (11) expr -> . ID
    (12) expr -> . ( expr )
    (13) expr -> . - expr
    (14) expr -> . expr '
    (17) expr -> . [ array_interior ]
    (18) expr -> . ID = expr
    (19) expr -> . ID PLUSASSIGN expr
    (20) expr -> . ID MINASSIGN expr
    (21) expr -> . ID MULTASSIGN expr
    (22) expr -> . ID DIVASSIGN expr
    (23) expr -> . ID [ INTNUM ] = expr
    (24) expr -> . ID [ INTNUM ] PLUSASSIGN expr
    (25) expr -> . ID [ INTNUM ] MINASSIGN expr
    (26) expr -> . ID [ INTNUM ] MULTASSIGN expr
    (27) expr -> . ID [ INTNUM ] DIVASSIGN expr
    (28) expr -> . ID [ INTNUM , INTNUM ] = expr
    (29) expr -> . ID [ INTNUM , INTNUM ] PLUSASSIGN expr
    (30) expr -> . ID [ INTNUM , INTNUM ] MINASSIGN expr
    (31) expr -> . ID [ INTNUM , INTNUM ] MULTASSIGN expr
    (32) expr -> . ID [ INTNUM , INTNUM ] DIVASSIGN expr
    (33) expr -> . ID = ZEROS ( INTNUM )
    (34) expr -> . ID = ONES ( INTNUM )
    (35) expr -> . ID = EYE ( INTNUM )
    (36) expr -> . expr + expr
    (37) expr -> . expr - expr
    (38) expr -> . expr * expr
    (39) expr -> . expr / expr
    (40) expr -> . expr MPLUS expr
    (41) expr -> . expr MMINUS expr
    (42) expr -> . expr MMLTP expr
    (43) expr -> . expr MDIV expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr > expr
    (49) expr -> . expr < expr
    (50) cond_expr -> . cond_if
    (51) cond_expr -> . cond_while
    (52) cond_expr -> . cond_for
    (59) instruction -> . BREAK ;
    (60) instruction -> . CONTINUE ;
    (61) instruction -> . RETURN expr ;
    (62) instruction -> . PRINT array_interior ;
    (55) cond_if -> . IF ( expr ) cond_block
    (56) cond_if -> . cond_if ELSE cond_block
    (57) cond_while -> . WHILE ( expr ) cond_block
    (58) cond_for -> . FOR ID = expr : expr cond_block

    {               shift and go to state 3
    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ID              shift and go to state 10
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13
    BREAK           shift and go to state 17
    CONTINUE        shift and go to state 18
    RETURN          shift and go to state 19
    PRINT           shift and go to state 20
    IF              shift and go to state 21
    WHILE           shift and go to state 22
    FOR             shift and go to state 23

    start                          shift and go to state 61
    struct                         shift and go to state 2
    expr                           shift and go to state 4
    cond_expr                      shift and go to state 5
    instruction                    shift and go to state 6
    cond_if                        shift and go to state 14
    cond_while                     shift and go to state 15
    cond_for                       shift and go to state 16

state 26

    (3) start -> { start . }
    (2) start -> start . struct
    (4) start -> start . { start }
    (5) struct -> . expr ;
    (6) struct -> . cond_expr
    (7) struct -> . instruction
    (8) expr -> . INTNUM
    (9) expr -> . FLOATNUM
    (10) expr -> . STRING
    (11) expr -> . ID
    (12) expr -> . ( expr )
    (13) expr -> . - expr
    (14) expr -> . expr '
    (17) expr -> . [ array_interior ]
    (18) expr -> . ID = expr
    (19) expr -> . ID PLUSASSIGN expr
    (20) expr -> . ID MINASSIGN expr
    (21) expr -> . ID MULTASSIGN expr
    (22) expr -> . ID DIVASSIGN expr
    (23) expr -> . ID [ INTNUM ] = expr
    (24) expr -> . ID [ INTNUM ] PLUSASSIGN expr
    (25) expr -> . ID [ INTNUM ] MINASSIGN expr
    (26) expr -> . ID [ INTNUM ] MULTASSIGN expr
    (27) expr -> . ID [ INTNUM ] DIVASSIGN expr
    (28) expr -> . ID [ INTNUM , INTNUM ] = expr
    (29) expr -> . ID [ INTNUM , INTNUM ] PLUSASSIGN expr
    (30) expr -> . ID [ INTNUM , INTNUM ] MINASSIGN expr
    (31) expr -> . ID [ INTNUM , INTNUM ] MULTASSIGN expr
    (32) expr -> . ID [ INTNUM , INTNUM ] DIVASSIGN expr
    (33) expr -> . ID = ZEROS ( INTNUM )
    (34) expr -> . ID = ONES ( INTNUM )
    (35) expr -> . ID = EYE ( INTNUM )
    (36) expr -> . expr + expr
    (37) expr -> . expr - expr
    (38) expr -> . expr * expr
    (39) expr -> . expr / expr
    (40) expr -> . expr MPLUS expr
    (41) expr -> . expr MMINUS expr
    (42) expr -> . expr MMLTP expr
    (43) expr -> . expr MDIV expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr > expr
    (49) expr -> . expr < expr
    (50) cond_expr -> . cond_if
    (51) cond_expr -> . cond_while
    (52) cond_expr -> . cond_for
    (59) instruction -> . BREAK ;
    (60) instruction -> . CONTINUE ;
    (61) instruction -> . RETURN expr ;
    (62) instruction -> . PRINT array_interior ;
    (55) cond_if -> . IF ( expr ) cond_block
    (56) cond_if -> . cond_if ELSE cond_block
    (57) cond_while -> . WHILE ( expr ) cond_block
    (58) cond_for -> . FOR ID = expr : expr cond_block

    }               shift and go to state 62
    {               shift and go to state 25
    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ID              shift and go to state 10
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13
    BREAK           shift and go to state 17
    CONTINUE        shift and go to state 18
    RETURN          shift and go to state 19
    PRINT           shift and go to state 20
    IF              shift and go to state 21
    WHILE           shift and go to state 22
    FOR             shift and go to state 23

    struct                         shift and go to state 24
    expr                           shift and go to state 4
    cond_expr                      shift and go to state 5
    instruction                    shift and go to state 6
    cond_if                        shift and go to state 14
    cond_while                     shift and go to state 15
    cond_for                       shift and go to state 16

state 27

    (5) struct -> expr ; .

    {               reduce using rule 5 (struct -> expr ; .)
    INTNUM          reduce using rule 5 (struct -> expr ; .)
    FLOATNUM        reduce using rule 5 (struct -> expr ; .)
    STRING          reduce using rule 5 (struct -> expr ; .)
    ID              reduce using rule 5 (struct -> expr ; .)
    (               reduce using rule 5 (struct -> expr ; .)
    -               reduce using rule 5 (struct -> expr ; .)
    [               reduce using rule 5 (struct -> expr ; .)
    BREAK           reduce using rule 5 (struct -> expr ; .)
    CONTINUE        reduce using rule 5 (struct -> expr ; .)
    RETURN          reduce using rule 5 (struct -> expr ; .)
    PRINT           reduce using rule 5 (struct -> expr ; .)
    IF              reduce using rule 5 (struct -> expr ; .)
    WHILE           reduce using rule 5 (struct -> expr ; .)
    FOR             reduce using rule 5 (struct -> expr ; .)
    $end            reduce using rule 5 (struct -> expr ; .)
    }               reduce using rule 5 (struct -> expr ; .)
    ELSE            reduce using rule 5 (struct -> expr ; .)


state 28

    (14) expr -> expr ' .

    ;               reduce using rule 14 (expr -> expr ' .)
    '               reduce using rule 14 (expr -> expr ' .)
    +               reduce using rule 14 (expr -> expr ' .)
    -               reduce using rule 14 (expr -> expr ' .)
    *               reduce using rule 14 (expr -> expr ' .)
    /               reduce using rule 14 (expr -> expr ' .)
    MPLUS           reduce using rule 14 (expr -> expr ' .)
    MMINUS          reduce using rule 14 (expr -> expr ' .)
    MMLTP           reduce using rule 14 (expr -> expr ' .)
    MDIV            reduce using rule 14 (expr -> expr ' .)
    EQ              reduce using rule 14 (expr -> expr ' .)
    NEQ             reduce using rule 14 (expr -> expr ' .)
    GTEQ            reduce using rule 14 (expr -> expr ' .)
    LTEQ            reduce using rule 14 (expr -> expr ' .)
    >               reduce using rule 14 (expr -> expr ' .)
    <               reduce using rule 14 (expr -> expr ' .)
    )               reduce using rule 14 (expr -> expr ' .)
    ]               reduce using rule 14 (expr -> expr ' .)
    ,               reduce using rule 14 (expr -> expr ' .)
    :               reduce using rule 14 (expr -> expr ' .)
    {               reduce using rule 14 (expr -> expr ' .)
    INTNUM          reduce using rule 14 (expr -> expr ' .)
    FLOATNUM        reduce using rule 14 (expr -> expr ' .)
    STRING          reduce using rule 14 (expr -> expr ' .)
    ID              reduce using rule 14 (expr -> expr ' .)
    (               reduce using rule 14 (expr -> expr ' .)
    [               reduce using rule 14 (expr -> expr ' .)
    BREAK           reduce using rule 14 (expr -> expr ' .)
    CONTINUE        reduce using rule 14 (expr -> expr ' .)
    RETURN          reduce using rule 14 (expr -> expr ' .)
    PRINT           reduce using rule 14 (expr -> expr ' .)
    IF              reduce using rule 14 (expr -> expr ' .)
    WHILE           reduce using rule 14 (expr -> expr ' .)
    FOR             reduce using rule 14 (expr -> expr ' .)


state 29

    (36) expr -> expr + . expr
    (8) expr -> . INTNUM
    (9) expr -> . FLOATNUM
    (10) expr -> . STRING
    (11) expr -> . ID
    (12) expr -> . ( expr )
    (13) expr -> . - expr
    (14) expr -> . expr '
    (17) expr -> . [ array_interior ]
    (18) expr -> . ID = expr
    (19) expr -> . ID PLUSASSIGN expr
    (20) expr -> . ID MINASSIGN expr
    (21) expr -> . ID MULTASSIGN expr
    (22) expr -> . ID DIVASSIGN expr
    (23) expr -> . ID [ INTNUM ] = expr
    (24) expr -> . ID [ INTNUM ] PLUSASSIGN expr
    (25) expr -> . ID [ INTNUM ] MINASSIGN expr
    (26) expr -> . ID [ INTNUM ] MULTASSIGN expr
    (27) expr -> . ID [ INTNUM ] DIVASSIGN expr
    (28) expr -> . ID [ INTNUM , INTNUM ] = expr
    (29) expr -> . ID [ INTNUM , INTNUM ] PLUSASSIGN expr
    (30) expr -> . ID [ INTNUM , INTNUM ] MINASSIGN expr
    (31) expr -> . ID [ INTNUM , INTNUM ] MULTASSIGN expr
    (32) expr -> . ID [ INTNUM , INTNUM ] DIVASSIGN expr
    (33) expr -> . ID = ZEROS ( INTNUM )
    (34) expr -> . ID = ONES ( INTNUM )
    (35) expr -> . ID = EYE ( INTNUM )
    (36) expr -> . expr + expr
    (37) expr -> . expr - expr
    (38) expr -> . expr * expr
    (39) expr -> . expr / expr
    (40) expr -> . expr MPLUS expr
    (41) expr -> . expr MMINUS expr
    (42) expr -> . expr MMLTP expr
    (43) expr -> . expr MDIV expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr > expr
    (49) expr -> . expr < expr

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ID              shift and go to state 10
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13

    expr                           shift and go to state 63

state 30

    (37) expr -> expr - . expr
    (8) expr -> . INTNUM
    (9) expr -> . FLOATNUM
    (10) expr -> . STRING
    (11) expr -> . ID
    (12) expr -> . ( expr )
    (13) expr -> . - expr
    (14) expr -> . expr '
    (17) expr -> . [ array_interior ]
    (18) expr -> . ID = expr
    (19) expr -> . ID PLUSASSIGN expr
    (20) expr -> . ID MINASSIGN expr
    (21) expr -> . ID MULTASSIGN expr
    (22) expr -> . ID DIVASSIGN expr
    (23) expr -> . ID [ INTNUM ] = expr
    (24) expr -> . ID [ INTNUM ] PLUSASSIGN expr
    (25) expr -> . ID [ INTNUM ] MINASSIGN expr
    (26) expr -> . ID [ INTNUM ] MULTASSIGN expr
    (27) expr -> . ID [ INTNUM ] DIVASSIGN expr
    (28) expr -> . ID [ INTNUM , INTNUM ] = expr
    (29) expr -> . ID [ INTNUM , INTNUM ] PLUSASSIGN expr
    (30) expr -> . ID [ INTNUM , INTNUM ] MINASSIGN expr
    (31) expr -> . ID [ INTNUM , INTNUM ] MULTASSIGN expr
    (32) expr -> . ID [ INTNUM , INTNUM ] DIVASSIGN expr
    (33) expr -> . ID = ZEROS ( INTNUM )
    (34) expr -> . ID = ONES ( INTNUM )
    (35) expr -> . ID = EYE ( INTNUM )
    (36) expr -> . expr + expr
    (37) expr -> . expr - expr
    (38) expr -> . expr * expr
    (39) expr -> . expr / expr
    (40) expr -> . expr MPLUS expr
    (41) expr -> . expr MMINUS expr
    (42) expr -> . expr MMLTP expr
    (43) expr -> . expr MDIV expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr > expr
    (49) expr -> . expr < expr

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ID              shift and go to state 10
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13

    expr                           shift and go to state 64

state 31

    (38) expr -> expr * . expr
    (8) expr -> . INTNUM
    (9) expr -> . FLOATNUM
    (10) expr -> . STRING
    (11) expr -> . ID
    (12) expr -> . ( expr )
    (13) expr -> . - expr
    (14) expr -> . expr '
    (17) expr -> . [ array_interior ]
    (18) expr -> . ID = expr
    (19) expr -> . ID PLUSASSIGN expr
    (20) expr -> . ID MINASSIGN expr
    (21) expr -> . ID MULTASSIGN expr
    (22) expr -> . ID DIVASSIGN expr
    (23) expr -> . ID [ INTNUM ] = expr
    (24) expr -> . ID [ INTNUM ] PLUSASSIGN expr
    (25) expr -> . ID [ INTNUM ] MINASSIGN expr
    (26) expr -> . ID [ INTNUM ] MULTASSIGN expr
    (27) expr -> . ID [ INTNUM ] DIVASSIGN expr
    (28) expr -> . ID [ INTNUM , INTNUM ] = expr
    (29) expr -> . ID [ INTNUM , INTNUM ] PLUSASSIGN expr
    (30) expr -> . ID [ INTNUM , INTNUM ] MINASSIGN expr
    (31) expr -> . ID [ INTNUM , INTNUM ] MULTASSIGN expr
    (32) expr -> . ID [ INTNUM , INTNUM ] DIVASSIGN expr
    (33) expr -> . ID = ZEROS ( INTNUM )
    (34) expr -> . ID = ONES ( INTNUM )
    (35) expr -> . ID = EYE ( INTNUM )
    (36) expr -> . expr + expr
    (37) expr -> . expr - expr
    (38) expr -> . expr * expr
    (39) expr -> . expr / expr
    (40) expr -> . expr MPLUS expr
    (41) expr -> . expr MMINUS expr
    (42) expr -> . expr MMLTP expr
    (43) expr -> . expr MDIV expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr > expr
    (49) expr -> . expr < expr

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ID              shift and go to state 10
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13

    expr                           shift and go to state 65

state 32

    (39) expr -> expr / . expr
    (8) expr -> . INTNUM
    (9) expr -> . FLOATNUM
    (10) expr -> . STRING
    (11) expr -> . ID
    (12) expr -> . ( expr )
    (13) expr -> . - expr
    (14) expr -> . expr '
    (17) expr -> . [ array_interior ]
    (18) expr -> . ID = expr
    (19) expr -> . ID PLUSASSIGN expr
    (20) expr -> . ID MINASSIGN expr
    (21) expr -> . ID MULTASSIGN expr
    (22) expr -> . ID DIVASSIGN expr
    (23) expr -> . ID [ INTNUM ] = expr
    (24) expr -> . ID [ INTNUM ] PLUSASSIGN expr
    (25) expr -> . ID [ INTNUM ] MINASSIGN expr
    (26) expr -> . ID [ INTNUM ] MULTASSIGN expr
    (27) expr -> . ID [ INTNUM ] DIVASSIGN expr
    (28) expr -> . ID [ INTNUM , INTNUM ] = expr
    (29) expr -> . ID [ INTNUM , INTNUM ] PLUSASSIGN expr
    (30) expr -> . ID [ INTNUM , INTNUM ] MINASSIGN expr
    (31) expr -> . ID [ INTNUM , INTNUM ] MULTASSIGN expr
    (32) expr -> . ID [ INTNUM , INTNUM ] DIVASSIGN expr
    (33) expr -> . ID = ZEROS ( INTNUM )
    (34) expr -> . ID = ONES ( INTNUM )
    (35) expr -> . ID = EYE ( INTNUM )
    (36) expr -> . expr + expr
    (37) expr -> . expr - expr
    (38) expr -> . expr * expr
    (39) expr -> . expr / expr
    (40) expr -> . expr MPLUS expr
    (41) expr -> . expr MMINUS expr
    (42) expr -> . expr MMLTP expr
    (43) expr -> . expr MDIV expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr > expr
    (49) expr -> . expr < expr

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ID              shift and go to state 10
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13

    expr                           shift and go to state 66

state 33

    (40) expr -> expr MPLUS . expr
    (8) expr -> . INTNUM
    (9) expr -> . FLOATNUM
    (10) expr -> . STRING
    (11) expr -> . ID
    (12) expr -> . ( expr )
    (13) expr -> . - expr
    (14) expr -> . expr '
    (17) expr -> . [ array_interior ]
    (18) expr -> . ID = expr
    (19) expr -> . ID PLUSASSIGN expr
    (20) expr -> . ID MINASSIGN expr
    (21) expr -> . ID MULTASSIGN expr
    (22) expr -> . ID DIVASSIGN expr
    (23) expr -> . ID [ INTNUM ] = expr
    (24) expr -> . ID [ INTNUM ] PLUSASSIGN expr
    (25) expr -> . ID [ INTNUM ] MINASSIGN expr
    (26) expr -> . ID [ INTNUM ] MULTASSIGN expr
    (27) expr -> . ID [ INTNUM ] DIVASSIGN expr
    (28) expr -> . ID [ INTNUM , INTNUM ] = expr
    (29) expr -> . ID [ INTNUM , INTNUM ] PLUSASSIGN expr
    (30) expr -> . ID [ INTNUM , INTNUM ] MINASSIGN expr
    (31) expr -> . ID [ INTNUM , INTNUM ] MULTASSIGN expr
    (32) expr -> . ID [ INTNUM , INTNUM ] DIVASSIGN expr
    (33) expr -> . ID = ZEROS ( INTNUM )
    (34) expr -> . ID = ONES ( INTNUM )
    (35) expr -> . ID = EYE ( INTNUM )
    (36) expr -> . expr + expr
    (37) expr -> . expr - expr
    (38) expr -> . expr * expr
    (39) expr -> . expr / expr
    (40) expr -> . expr MPLUS expr
    (41) expr -> . expr MMINUS expr
    (42) expr -> . expr MMLTP expr
    (43) expr -> . expr MDIV expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr > expr
    (49) expr -> . expr < expr

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ID              shift and go to state 10
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13

    expr                           shift and go to state 67

state 34

    (41) expr -> expr MMINUS . expr
    (8) expr -> . INTNUM
    (9) expr -> . FLOATNUM
    (10) expr -> . STRING
    (11) expr -> . ID
    (12) expr -> . ( expr )
    (13) expr -> . - expr
    (14) expr -> . expr '
    (17) expr -> . [ array_interior ]
    (18) expr -> . ID = expr
    (19) expr -> . ID PLUSASSIGN expr
    (20) expr -> . ID MINASSIGN expr
    (21) expr -> . ID MULTASSIGN expr
    (22) expr -> . ID DIVASSIGN expr
    (23) expr -> . ID [ INTNUM ] = expr
    (24) expr -> . ID [ INTNUM ] PLUSASSIGN expr
    (25) expr -> . ID [ INTNUM ] MINASSIGN expr
    (26) expr -> . ID [ INTNUM ] MULTASSIGN expr
    (27) expr -> . ID [ INTNUM ] DIVASSIGN expr
    (28) expr -> . ID [ INTNUM , INTNUM ] = expr
    (29) expr -> . ID [ INTNUM , INTNUM ] PLUSASSIGN expr
    (30) expr -> . ID [ INTNUM , INTNUM ] MINASSIGN expr
    (31) expr -> . ID [ INTNUM , INTNUM ] MULTASSIGN expr
    (32) expr -> . ID [ INTNUM , INTNUM ] DIVASSIGN expr
    (33) expr -> . ID = ZEROS ( INTNUM )
    (34) expr -> . ID = ONES ( INTNUM )
    (35) expr -> . ID = EYE ( INTNUM )
    (36) expr -> . expr + expr
    (37) expr -> . expr - expr
    (38) expr -> . expr * expr
    (39) expr -> . expr / expr
    (40) expr -> . expr MPLUS expr
    (41) expr -> . expr MMINUS expr
    (42) expr -> . expr MMLTP expr
    (43) expr -> . expr MDIV expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr > expr
    (49) expr -> . expr < expr

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ID              shift and go to state 10
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13

    expr                           shift and go to state 68

state 35

    (42) expr -> expr MMLTP . expr
    (8) expr -> . INTNUM
    (9) expr -> . FLOATNUM
    (10) expr -> . STRING
    (11) expr -> . ID
    (12) expr -> . ( expr )
    (13) expr -> . - expr
    (14) expr -> . expr '
    (17) expr -> . [ array_interior ]
    (18) expr -> . ID = expr
    (19) expr -> . ID PLUSASSIGN expr
    (20) expr -> . ID MINASSIGN expr
    (21) expr -> . ID MULTASSIGN expr
    (22) expr -> . ID DIVASSIGN expr
    (23) expr -> . ID [ INTNUM ] = expr
    (24) expr -> . ID [ INTNUM ] PLUSASSIGN expr
    (25) expr -> . ID [ INTNUM ] MINASSIGN expr
    (26) expr -> . ID [ INTNUM ] MULTASSIGN expr
    (27) expr -> . ID [ INTNUM ] DIVASSIGN expr
    (28) expr -> . ID [ INTNUM , INTNUM ] = expr
    (29) expr -> . ID [ INTNUM , INTNUM ] PLUSASSIGN expr
    (30) expr -> . ID [ INTNUM , INTNUM ] MINASSIGN expr
    (31) expr -> . ID [ INTNUM , INTNUM ] MULTASSIGN expr
    (32) expr -> . ID [ INTNUM , INTNUM ] DIVASSIGN expr
    (33) expr -> . ID = ZEROS ( INTNUM )
    (34) expr -> . ID = ONES ( INTNUM )
    (35) expr -> . ID = EYE ( INTNUM )
    (36) expr -> . expr + expr
    (37) expr -> . expr - expr
    (38) expr -> . expr * expr
    (39) expr -> . expr / expr
    (40) expr -> . expr MPLUS expr
    (41) expr -> . expr MMINUS expr
    (42) expr -> . expr MMLTP expr
    (43) expr -> . expr MDIV expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr > expr
    (49) expr -> . expr < expr

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ID              shift and go to state 10
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13

    expr                           shift and go to state 69

state 36

    (43) expr -> expr MDIV . expr
    (8) expr -> . INTNUM
    (9) expr -> . FLOATNUM
    (10) expr -> . STRING
    (11) expr -> . ID
    (12) expr -> . ( expr )
    (13) expr -> . - expr
    (14) expr -> . expr '
    (17) expr -> . [ array_interior ]
    (18) expr -> . ID = expr
    (19) expr -> . ID PLUSASSIGN expr
    (20) expr -> . ID MINASSIGN expr
    (21) expr -> . ID MULTASSIGN expr
    (22) expr -> . ID DIVASSIGN expr
    (23) expr -> . ID [ INTNUM ] = expr
    (24) expr -> . ID [ INTNUM ] PLUSASSIGN expr
    (25) expr -> . ID [ INTNUM ] MINASSIGN expr
    (26) expr -> . ID [ INTNUM ] MULTASSIGN expr
    (27) expr -> . ID [ INTNUM ] DIVASSIGN expr
    (28) expr -> . ID [ INTNUM , INTNUM ] = expr
    (29) expr -> . ID [ INTNUM , INTNUM ] PLUSASSIGN expr
    (30) expr -> . ID [ INTNUM , INTNUM ] MINASSIGN expr
    (31) expr -> . ID [ INTNUM , INTNUM ] MULTASSIGN expr
    (32) expr -> . ID [ INTNUM , INTNUM ] DIVASSIGN expr
    (33) expr -> . ID = ZEROS ( INTNUM )
    (34) expr -> . ID = ONES ( INTNUM )
    (35) expr -> . ID = EYE ( INTNUM )
    (36) expr -> . expr + expr
    (37) expr -> . expr - expr
    (38) expr -> . expr * expr
    (39) expr -> . expr / expr
    (40) expr -> . expr MPLUS expr
    (41) expr -> . expr MMINUS expr
    (42) expr -> . expr MMLTP expr
    (43) expr -> . expr MDIV expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr > expr
    (49) expr -> . expr < expr

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ID              shift and go to state 10
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13

    expr                           shift and go to state 70

state 37

    (44) expr -> expr EQ . expr
    (8) expr -> . INTNUM
    (9) expr -> . FLOATNUM
    (10) expr -> . STRING
    (11) expr -> . ID
    (12) expr -> . ( expr )
    (13) expr -> . - expr
    (14) expr -> . expr '
    (17) expr -> . [ array_interior ]
    (18) expr -> . ID = expr
    (19) expr -> . ID PLUSASSIGN expr
    (20) expr -> . ID MINASSIGN expr
    (21) expr -> . ID MULTASSIGN expr
    (22) expr -> . ID DIVASSIGN expr
    (23) expr -> . ID [ INTNUM ] = expr
    (24) expr -> . ID [ INTNUM ] PLUSASSIGN expr
    (25) expr -> . ID [ INTNUM ] MINASSIGN expr
    (26) expr -> . ID [ INTNUM ] MULTASSIGN expr
    (27) expr -> . ID [ INTNUM ] DIVASSIGN expr
    (28) expr -> . ID [ INTNUM , INTNUM ] = expr
    (29) expr -> . ID [ INTNUM , INTNUM ] PLUSASSIGN expr
    (30) expr -> . ID [ INTNUM , INTNUM ] MINASSIGN expr
    (31) expr -> . ID [ INTNUM , INTNUM ] MULTASSIGN expr
    (32) expr -> . ID [ INTNUM , INTNUM ] DIVASSIGN expr
    (33) expr -> . ID = ZEROS ( INTNUM )
    (34) expr -> . ID = ONES ( INTNUM )
    (35) expr -> . ID = EYE ( INTNUM )
    (36) expr -> . expr + expr
    (37) expr -> . expr - expr
    (38) expr -> . expr * expr
    (39) expr -> . expr / expr
    (40) expr -> . expr MPLUS expr
    (41) expr -> . expr MMINUS expr
    (42) expr -> . expr MMLTP expr
    (43) expr -> . expr MDIV expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr > expr
    (49) expr -> . expr < expr

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ID              shift and go to state 10
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13

    expr                           shift and go to state 71

state 38

    (45) expr -> expr NEQ . expr
    (8) expr -> . INTNUM
    (9) expr -> . FLOATNUM
    (10) expr -> . STRING
    (11) expr -> . ID
    (12) expr -> . ( expr )
    (13) expr -> . - expr
    (14) expr -> . expr '
    (17) expr -> . [ array_interior ]
    (18) expr -> . ID = expr
    (19) expr -> . ID PLUSASSIGN expr
    (20) expr -> . ID MINASSIGN expr
    (21) expr -> . ID MULTASSIGN expr
    (22) expr -> . ID DIVASSIGN expr
    (23) expr -> . ID [ INTNUM ] = expr
    (24) expr -> . ID [ INTNUM ] PLUSASSIGN expr
    (25) expr -> . ID [ INTNUM ] MINASSIGN expr
    (26) expr -> . ID [ INTNUM ] MULTASSIGN expr
    (27) expr -> . ID [ INTNUM ] DIVASSIGN expr
    (28) expr -> . ID [ INTNUM , INTNUM ] = expr
    (29) expr -> . ID [ INTNUM , INTNUM ] PLUSASSIGN expr
    (30) expr -> . ID [ INTNUM , INTNUM ] MINASSIGN expr
    (31) expr -> . ID [ INTNUM , INTNUM ] MULTASSIGN expr
    (32) expr -> . ID [ INTNUM , INTNUM ] DIVASSIGN expr
    (33) expr -> . ID = ZEROS ( INTNUM )
    (34) expr -> . ID = ONES ( INTNUM )
    (35) expr -> . ID = EYE ( INTNUM )
    (36) expr -> . expr + expr
    (37) expr -> . expr - expr
    (38) expr -> . expr * expr
    (39) expr -> . expr / expr
    (40) expr -> . expr MPLUS expr
    (41) expr -> . expr MMINUS expr
    (42) expr -> . expr MMLTP expr
    (43) expr -> . expr MDIV expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr > expr
    (49) expr -> . expr < expr

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ID              shift and go to state 10
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13

    expr                           shift and go to state 72

state 39

    (46) expr -> expr GTEQ . expr
    (8) expr -> . INTNUM
    (9) expr -> . FLOATNUM
    (10) expr -> . STRING
    (11) expr -> . ID
    (12) expr -> . ( expr )
    (13) expr -> . - expr
    (14) expr -> . expr '
    (17) expr -> . [ array_interior ]
    (18) expr -> . ID = expr
    (19) expr -> . ID PLUSASSIGN expr
    (20) expr -> . ID MINASSIGN expr
    (21) expr -> . ID MULTASSIGN expr
    (22) expr -> . ID DIVASSIGN expr
    (23) expr -> . ID [ INTNUM ] = expr
    (24) expr -> . ID [ INTNUM ] PLUSASSIGN expr
    (25) expr -> . ID [ INTNUM ] MINASSIGN expr
    (26) expr -> . ID [ INTNUM ] MULTASSIGN expr
    (27) expr -> . ID [ INTNUM ] DIVASSIGN expr
    (28) expr -> . ID [ INTNUM , INTNUM ] = expr
    (29) expr -> . ID [ INTNUM , INTNUM ] PLUSASSIGN expr
    (30) expr -> . ID [ INTNUM , INTNUM ] MINASSIGN expr
    (31) expr -> . ID [ INTNUM , INTNUM ] MULTASSIGN expr
    (32) expr -> . ID [ INTNUM , INTNUM ] DIVASSIGN expr
    (33) expr -> . ID = ZEROS ( INTNUM )
    (34) expr -> . ID = ONES ( INTNUM )
    (35) expr -> . ID = EYE ( INTNUM )
    (36) expr -> . expr + expr
    (37) expr -> . expr - expr
    (38) expr -> . expr * expr
    (39) expr -> . expr / expr
    (40) expr -> . expr MPLUS expr
    (41) expr -> . expr MMINUS expr
    (42) expr -> . expr MMLTP expr
    (43) expr -> . expr MDIV expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr > expr
    (49) expr -> . expr < expr

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ID              shift and go to state 10
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13

    expr                           shift and go to state 73

state 40

    (47) expr -> expr LTEQ . expr
    (8) expr -> . INTNUM
    (9) expr -> . FLOATNUM
    (10) expr -> . STRING
    (11) expr -> . ID
    (12) expr -> . ( expr )
    (13) expr -> . - expr
    (14) expr -> . expr '
    (17) expr -> . [ array_interior ]
    (18) expr -> . ID = expr
    (19) expr -> . ID PLUSASSIGN expr
    (20) expr -> . ID MINASSIGN expr
    (21) expr -> . ID MULTASSIGN expr
    (22) expr -> . ID DIVASSIGN expr
    (23) expr -> . ID [ INTNUM ] = expr
    (24) expr -> . ID [ INTNUM ] PLUSASSIGN expr
    (25) expr -> . ID [ INTNUM ] MINASSIGN expr
    (26) expr -> . ID [ INTNUM ] MULTASSIGN expr
    (27) expr -> . ID [ INTNUM ] DIVASSIGN expr
    (28) expr -> . ID [ INTNUM , INTNUM ] = expr
    (29) expr -> . ID [ INTNUM , INTNUM ] PLUSASSIGN expr
    (30) expr -> . ID [ INTNUM , INTNUM ] MINASSIGN expr
    (31) expr -> . ID [ INTNUM , INTNUM ] MULTASSIGN expr
    (32) expr -> . ID [ INTNUM , INTNUM ] DIVASSIGN expr
    (33) expr -> . ID = ZEROS ( INTNUM )
    (34) expr -> . ID = ONES ( INTNUM )
    (35) expr -> . ID = EYE ( INTNUM )
    (36) expr -> . expr + expr
    (37) expr -> . expr - expr
    (38) expr -> . expr * expr
    (39) expr -> . expr / expr
    (40) expr -> . expr MPLUS expr
    (41) expr -> . expr MMINUS expr
    (42) expr -> . expr MMLTP expr
    (43) expr -> . expr MDIV expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr > expr
    (49) expr -> . expr < expr

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ID              shift and go to state 10
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13

    expr                           shift and go to state 74

state 41

    (48) expr -> expr > . expr
    (8) expr -> . INTNUM
    (9) expr -> . FLOATNUM
    (10) expr -> . STRING
    (11) expr -> . ID
    (12) expr -> . ( expr )
    (13) expr -> . - expr
    (14) expr -> . expr '
    (17) expr -> . [ array_interior ]
    (18) expr -> . ID = expr
    (19) expr -> . ID PLUSASSIGN expr
    (20) expr -> . ID MINASSIGN expr
    (21) expr -> . ID MULTASSIGN expr
    (22) expr -> . ID DIVASSIGN expr
    (23) expr -> . ID [ INTNUM ] = expr
    (24) expr -> . ID [ INTNUM ] PLUSASSIGN expr
    (25) expr -> . ID [ INTNUM ] MINASSIGN expr
    (26) expr -> . ID [ INTNUM ] MULTASSIGN expr
    (27) expr -> . ID [ INTNUM ] DIVASSIGN expr
    (28) expr -> . ID [ INTNUM , INTNUM ] = expr
    (29) expr -> . ID [ INTNUM , INTNUM ] PLUSASSIGN expr
    (30) expr -> . ID [ INTNUM , INTNUM ] MINASSIGN expr
    (31) expr -> . ID [ INTNUM , INTNUM ] MULTASSIGN expr
    (32) expr -> . ID [ INTNUM , INTNUM ] DIVASSIGN expr
    (33) expr -> . ID = ZEROS ( INTNUM )
    (34) expr -> . ID = ONES ( INTNUM )
    (35) expr -> . ID = EYE ( INTNUM )
    (36) expr -> . expr + expr
    (37) expr -> . expr - expr
    (38) expr -> . expr * expr
    (39) expr -> . expr / expr
    (40) expr -> . expr MPLUS expr
    (41) expr -> . expr MMINUS expr
    (42) expr -> . expr MMLTP expr
    (43) expr -> . expr MDIV expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr > expr
    (49) expr -> . expr < expr

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ID              shift and go to state 10
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13

    expr                           shift and go to state 75

state 42

    (49) expr -> expr < . expr
    (8) expr -> . INTNUM
    (9) expr -> . FLOATNUM
    (10) expr -> . STRING
    (11) expr -> . ID
    (12) expr -> . ( expr )
    (13) expr -> . - expr
    (14) expr -> . expr '
    (17) expr -> . [ array_interior ]
    (18) expr -> . ID = expr
    (19) expr -> . ID PLUSASSIGN expr
    (20) expr -> . ID MINASSIGN expr
    (21) expr -> . ID MULTASSIGN expr
    (22) expr -> . ID DIVASSIGN expr
    (23) expr -> . ID [ INTNUM ] = expr
    (24) expr -> . ID [ INTNUM ] PLUSASSIGN expr
    (25) expr -> . ID [ INTNUM ] MINASSIGN expr
    (26) expr -> . ID [ INTNUM ] MULTASSIGN expr
    (27) expr -> . ID [ INTNUM ] DIVASSIGN expr
    (28) expr -> . ID [ INTNUM , INTNUM ] = expr
    (29) expr -> . ID [ INTNUM , INTNUM ] PLUSASSIGN expr
    (30) expr -> . ID [ INTNUM , INTNUM ] MINASSIGN expr
    (31) expr -> . ID [ INTNUM , INTNUM ] MULTASSIGN expr
    (32) expr -> . ID [ INTNUM , INTNUM ] DIVASSIGN expr
    (33) expr -> . ID = ZEROS ( INTNUM )
    (34) expr -> . ID = ONES ( INTNUM )
    (35) expr -> . ID = EYE ( INTNUM )
    (36) expr -> . expr + expr
    (37) expr -> . expr - expr
    (38) expr -> . expr * expr
    (39) expr -> . expr / expr
    (40) expr -> . expr MPLUS expr
    (41) expr -> . expr MMINUS expr
    (42) expr -> . expr MMLTP expr
    (43) expr -> . expr MDIV expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr > expr
    (49) expr -> . expr < expr

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ID              shift and go to state 10
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13

    expr                           shift and go to state 76

state 43

    (18) expr -> ID = . expr
    (33) expr -> ID = . ZEROS ( INTNUM )
    (34) expr -> ID = . ONES ( INTNUM )
    (35) expr -> ID = . EYE ( INTNUM )
    (8) expr -> . INTNUM
    (9) expr -> . FLOATNUM
    (10) expr -> . STRING
    (11) expr -> . ID
    (12) expr -> . ( expr )
    (13) expr -> . - expr
    (14) expr -> . expr '
    (17) expr -> . [ array_interior ]
    (18) expr -> . ID = expr
    (19) expr -> . ID PLUSASSIGN expr
    (20) expr -> . ID MINASSIGN expr
    (21) expr -> . ID MULTASSIGN expr
    (22) expr -> . ID DIVASSIGN expr
    (23) expr -> . ID [ INTNUM ] = expr
    (24) expr -> . ID [ INTNUM ] PLUSASSIGN expr
    (25) expr -> . ID [ INTNUM ] MINASSIGN expr
    (26) expr -> . ID [ INTNUM ] MULTASSIGN expr
    (27) expr -> . ID [ INTNUM ] DIVASSIGN expr
    (28) expr -> . ID [ INTNUM , INTNUM ] = expr
    (29) expr -> . ID [ INTNUM , INTNUM ] PLUSASSIGN expr
    (30) expr -> . ID [ INTNUM , INTNUM ] MINASSIGN expr
    (31) expr -> . ID [ INTNUM , INTNUM ] MULTASSIGN expr
    (32) expr -> . ID [ INTNUM , INTNUM ] DIVASSIGN expr
    (33) expr -> . ID = ZEROS ( INTNUM )
    (34) expr -> . ID = ONES ( INTNUM )
    (35) expr -> . ID = EYE ( INTNUM )
    (36) expr -> . expr + expr
    (37) expr -> . expr - expr
    (38) expr -> . expr * expr
    (39) expr -> . expr / expr
    (40) expr -> . expr MPLUS expr
    (41) expr -> . expr MMINUS expr
    (42) expr -> . expr MMLTP expr
    (43) expr -> . expr MDIV expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr > expr
    (49) expr -> . expr < expr

    ZEROS           shift and go to state 78
    ONES            shift and go to state 79
    EYE             shift and go to state 80
    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ID              shift and go to state 10
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13

    expr                           shift and go to state 77

state 44

    (19) expr -> ID PLUSASSIGN . expr
    (8) expr -> . INTNUM
    (9) expr -> . FLOATNUM
    (10) expr -> . STRING
    (11) expr -> . ID
    (12) expr -> . ( expr )
    (13) expr -> . - expr
    (14) expr -> . expr '
    (17) expr -> . [ array_interior ]
    (18) expr -> . ID = expr
    (19) expr -> . ID PLUSASSIGN expr
    (20) expr -> . ID MINASSIGN expr
    (21) expr -> . ID MULTASSIGN expr
    (22) expr -> . ID DIVASSIGN expr
    (23) expr -> . ID [ INTNUM ] = expr
    (24) expr -> . ID [ INTNUM ] PLUSASSIGN expr
    (25) expr -> . ID [ INTNUM ] MINASSIGN expr
    (26) expr -> . ID [ INTNUM ] MULTASSIGN expr
    (27) expr -> . ID [ INTNUM ] DIVASSIGN expr
    (28) expr -> . ID [ INTNUM , INTNUM ] = expr
    (29) expr -> . ID [ INTNUM , INTNUM ] PLUSASSIGN expr
    (30) expr -> . ID [ INTNUM , INTNUM ] MINASSIGN expr
    (31) expr -> . ID [ INTNUM , INTNUM ] MULTASSIGN expr
    (32) expr -> . ID [ INTNUM , INTNUM ] DIVASSIGN expr
    (33) expr -> . ID = ZEROS ( INTNUM )
    (34) expr -> . ID = ONES ( INTNUM )
    (35) expr -> . ID = EYE ( INTNUM )
    (36) expr -> . expr + expr
    (37) expr -> . expr - expr
    (38) expr -> . expr * expr
    (39) expr -> . expr / expr
    (40) expr -> . expr MPLUS expr
    (41) expr -> . expr MMINUS expr
    (42) expr -> . expr MMLTP expr
    (43) expr -> . expr MDIV expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr > expr
    (49) expr -> . expr < expr

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ID              shift and go to state 10
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13

    expr                           shift and go to state 81

state 45

    (20) expr -> ID MINASSIGN . expr
    (8) expr -> . INTNUM
    (9) expr -> . FLOATNUM
    (10) expr -> . STRING
    (11) expr -> . ID
    (12) expr -> . ( expr )
    (13) expr -> . - expr
    (14) expr -> . expr '
    (17) expr -> . [ array_interior ]
    (18) expr -> . ID = expr
    (19) expr -> . ID PLUSASSIGN expr
    (20) expr -> . ID MINASSIGN expr
    (21) expr -> . ID MULTASSIGN expr
    (22) expr -> . ID DIVASSIGN expr
    (23) expr -> . ID [ INTNUM ] = expr
    (24) expr -> . ID [ INTNUM ] PLUSASSIGN expr
    (25) expr -> . ID [ INTNUM ] MINASSIGN expr
    (26) expr -> . ID [ INTNUM ] MULTASSIGN expr
    (27) expr -> . ID [ INTNUM ] DIVASSIGN expr
    (28) expr -> . ID [ INTNUM , INTNUM ] = expr
    (29) expr -> . ID [ INTNUM , INTNUM ] PLUSASSIGN expr
    (30) expr -> . ID [ INTNUM , INTNUM ] MINASSIGN expr
    (31) expr -> . ID [ INTNUM , INTNUM ] MULTASSIGN expr
    (32) expr -> . ID [ INTNUM , INTNUM ] DIVASSIGN expr
    (33) expr -> . ID = ZEROS ( INTNUM )
    (34) expr -> . ID = ONES ( INTNUM )
    (35) expr -> . ID = EYE ( INTNUM )
    (36) expr -> . expr + expr
    (37) expr -> . expr - expr
    (38) expr -> . expr * expr
    (39) expr -> . expr / expr
    (40) expr -> . expr MPLUS expr
    (41) expr -> . expr MMINUS expr
    (42) expr -> . expr MMLTP expr
    (43) expr -> . expr MDIV expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr > expr
    (49) expr -> . expr < expr

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ID              shift and go to state 10
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13

    expr                           shift and go to state 82

state 46

    (21) expr -> ID MULTASSIGN . expr
    (8) expr -> . INTNUM
    (9) expr -> . FLOATNUM
    (10) expr -> . STRING
    (11) expr -> . ID
    (12) expr -> . ( expr )
    (13) expr -> . - expr
    (14) expr -> . expr '
    (17) expr -> . [ array_interior ]
    (18) expr -> . ID = expr
    (19) expr -> . ID PLUSASSIGN expr
    (20) expr -> . ID MINASSIGN expr
    (21) expr -> . ID MULTASSIGN expr
    (22) expr -> . ID DIVASSIGN expr
    (23) expr -> . ID [ INTNUM ] = expr
    (24) expr -> . ID [ INTNUM ] PLUSASSIGN expr
    (25) expr -> . ID [ INTNUM ] MINASSIGN expr
    (26) expr -> . ID [ INTNUM ] MULTASSIGN expr
    (27) expr -> . ID [ INTNUM ] DIVASSIGN expr
    (28) expr -> . ID [ INTNUM , INTNUM ] = expr
    (29) expr -> . ID [ INTNUM , INTNUM ] PLUSASSIGN expr
    (30) expr -> . ID [ INTNUM , INTNUM ] MINASSIGN expr
    (31) expr -> . ID [ INTNUM , INTNUM ] MULTASSIGN expr
    (32) expr -> . ID [ INTNUM , INTNUM ] DIVASSIGN expr
    (33) expr -> . ID = ZEROS ( INTNUM )
    (34) expr -> . ID = ONES ( INTNUM )
    (35) expr -> . ID = EYE ( INTNUM )
    (36) expr -> . expr + expr
    (37) expr -> . expr - expr
    (38) expr -> . expr * expr
    (39) expr -> . expr / expr
    (40) expr -> . expr MPLUS expr
    (41) expr -> . expr MMINUS expr
    (42) expr -> . expr MMLTP expr
    (43) expr -> . expr MDIV expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr > expr
    (49) expr -> . expr < expr

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ID              shift and go to state 10
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13

    expr                           shift and go to state 83

state 47

    (22) expr -> ID DIVASSIGN . expr
    (8) expr -> . INTNUM
    (9) expr -> . FLOATNUM
    (10) expr -> . STRING
    (11) expr -> . ID
    (12) expr -> . ( expr )
    (13) expr -> . - expr
    (14) expr -> . expr '
    (17) expr -> . [ array_interior ]
    (18) expr -> . ID = expr
    (19) expr -> . ID PLUSASSIGN expr
    (20) expr -> . ID MINASSIGN expr
    (21) expr -> . ID MULTASSIGN expr
    (22) expr -> . ID DIVASSIGN expr
    (23) expr -> . ID [ INTNUM ] = expr
    (24) expr -> . ID [ INTNUM ] PLUSASSIGN expr
    (25) expr -> . ID [ INTNUM ] MINASSIGN expr
    (26) expr -> . ID [ INTNUM ] MULTASSIGN expr
    (27) expr -> . ID [ INTNUM ] DIVASSIGN expr
    (28) expr -> . ID [ INTNUM , INTNUM ] = expr
    (29) expr -> . ID [ INTNUM , INTNUM ] PLUSASSIGN expr
    (30) expr -> . ID [ INTNUM , INTNUM ] MINASSIGN expr
    (31) expr -> . ID [ INTNUM , INTNUM ] MULTASSIGN expr
    (32) expr -> . ID [ INTNUM , INTNUM ] DIVASSIGN expr
    (33) expr -> . ID = ZEROS ( INTNUM )
    (34) expr -> . ID = ONES ( INTNUM )
    (35) expr -> . ID = EYE ( INTNUM )
    (36) expr -> . expr + expr
    (37) expr -> . expr - expr
    (38) expr -> . expr * expr
    (39) expr -> . expr / expr
    (40) expr -> . expr MPLUS expr
    (41) expr -> . expr MMINUS expr
    (42) expr -> . expr MMLTP expr
    (43) expr -> . expr MDIV expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr > expr
    (49) expr -> . expr < expr

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ID              shift and go to state 10
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13

    expr                           shift and go to state 84

state 48

    (23) expr -> ID [ . INTNUM ] = expr
    (24) expr -> ID [ . INTNUM ] PLUSASSIGN expr
    (25) expr -> ID [ . INTNUM ] MINASSIGN expr
    (26) expr -> ID [ . INTNUM ] MULTASSIGN expr
    (27) expr -> ID [ . INTNUM ] DIVASSIGN expr
    (28) expr -> ID [ . INTNUM , INTNUM ] = expr
    (29) expr -> ID [ . INTNUM , INTNUM ] PLUSASSIGN expr
    (30) expr -> ID [ . INTNUM , INTNUM ] MINASSIGN expr
    (31) expr -> ID [ . INTNUM , INTNUM ] MULTASSIGN expr
    (32) expr -> ID [ . INTNUM , INTNUM ] DIVASSIGN expr

    INTNUM          shift and go to state 85


state 49

    (12) expr -> ( expr . )
    (14) expr -> expr . '
    (36) expr -> expr . + expr
    (37) expr -> expr . - expr
    (38) expr -> expr . * expr
    (39) expr -> expr . / expr
    (40) expr -> expr . MPLUS expr
    (41) expr -> expr . MMINUS expr
    (42) expr -> expr . MMLTP expr
    (43) expr -> expr . MDIV expr
    (44) expr -> expr . EQ expr
    (45) expr -> expr . NEQ expr
    (46) expr -> expr . GTEQ expr
    (47) expr -> expr . LTEQ expr
    (48) expr -> expr . > expr
    (49) expr -> expr . < expr

    )               shift and go to state 86
    '               shift and go to state 28
    +               shift and go to state 29
    -               shift and go to state 30
    *               shift and go to state 31
    /               shift and go to state 32
    MPLUS           shift and go to state 33
    MMINUS          shift and go to state 34
    MMLTP           shift and go to state 35
    MDIV            shift and go to state 36
    EQ              shift and go to state 37
    NEQ             shift and go to state 38
    GTEQ            shift and go to state 39
    LTEQ            shift and go to state 40
    >               shift and go to state 41
    <               shift and go to state 42


state 50

    (13) expr -> - expr .
    (14) expr -> expr . '
    (36) expr -> expr . + expr
    (37) expr -> expr . - expr
    (38) expr -> expr . * expr
    (39) expr -> expr . / expr
    (40) expr -> expr . MPLUS expr
    (41) expr -> expr . MMINUS expr
    (42) expr -> expr . MMLTP expr
    (43) expr -> expr . MDIV expr
    (44) expr -> expr . EQ expr
    (45) expr -> expr . NEQ expr
    (46) expr -> expr . GTEQ expr
    (47) expr -> expr . LTEQ expr
    (48) expr -> expr . > expr
    (49) expr -> expr . < expr

    ;               reduce using rule 13 (expr -> - expr .)
    +               reduce using rule 13 (expr -> - expr .)
    -               reduce using rule 13 (expr -> - expr .)
    MPLUS           reduce using rule 13 (expr -> - expr .)
    MMINUS          reduce using rule 13 (expr -> - expr .)
    EQ              reduce using rule 13 (expr -> - expr .)
    NEQ             reduce using rule 13 (expr -> - expr .)
    GTEQ            reduce using rule 13 (expr -> - expr .)
    LTEQ            reduce using rule 13 (expr -> - expr .)
    >               reduce using rule 13 (expr -> - expr .)
    <               reduce using rule 13 (expr -> - expr .)
    )               reduce using rule 13 (expr -> - expr .)
    ]               reduce using rule 13 (expr -> - expr .)
    ,               reduce using rule 13 (expr -> - expr .)
    :               reduce using rule 13 (expr -> - expr .)
    {               reduce using rule 13 (expr -> - expr .)
    INTNUM          reduce using rule 13 (expr -> - expr .)
    FLOATNUM        reduce using rule 13 (expr -> - expr .)
    STRING          reduce using rule 13 (expr -> - expr .)
    ID              reduce using rule 13 (expr -> - expr .)
    (               reduce using rule 13 (expr -> - expr .)
    [               reduce using rule 13 (expr -> - expr .)
    BREAK           reduce using rule 13 (expr -> - expr .)
    CONTINUE        reduce using rule 13 (expr -> - expr .)
    RETURN          reduce using rule 13 (expr -> - expr .)
    PRINT           reduce using rule 13 (expr -> - expr .)
    IF              reduce using rule 13 (expr -> - expr .)
    WHILE           reduce using rule 13 (expr -> - expr .)
    FOR             reduce using rule 13 (expr -> - expr .)
    '               shift and go to state 28
    *               shift and go to state 31
    /               shift and go to state 32
    MMLTP           shift and go to state 35
    MDIV            shift and go to state 36

  ! '               [ reduce using rule 13 (expr -> - expr .) ]
  ! *               [ reduce using rule 13 (expr -> - expr .) ]
  ! /               [ reduce using rule 13 (expr -> - expr .) ]
  ! MMLTP           [ reduce using rule 13 (expr -> - expr .) ]
  ! MDIV            [ reduce using rule 13 (expr -> - expr .) ]
  ! +               [ shift and go to state 29 ]
  ! -               [ shift and go to state 30 ]
  ! MPLUS           [ shift and go to state 33 ]
  ! MMINUS          [ shift and go to state 34 ]
  ! EQ              [ shift and go to state 37 ]
  ! NEQ             [ shift and go to state 38 ]
  ! GTEQ            [ shift and go to state 39 ]
  ! LTEQ            [ shift and go to state 40 ]
  ! >               [ shift and go to state 41 ]
  ! <               [ shift and go to state 42 ]


state 51

    (17) expr -> [ array_interior . ]
    (15) array_interior -> array_interior . , expr

    ]               shift and go to state 87
    ,               shift and go to state 88


state 52

    (16) array_interior -> expr .
    (14) expr -> expr . '
    (36) expr -> expr . + expr
    (37) expr -> expr . - expr
    (38) expr -> expr . * expr
    (39) expr -> expr . / expr
    (40) expr -> expr . MPLUS expr
    (41) expr -> expr . MMINUS expr
    (42) expr -> expr . MMLTP expr
    (43) expr -> expr . MDIV expr
    (44) expr -> expr . EQ expr
    (45) expr -> expr . NEQ expr
    (46) expr -> expr . GTEQ expr
    (47) expr -> expr . LTEQ expr
    (48) expr -> expr . > expr
    (49) expr -> expr . < expr

    ]               reduce using rule 16 (array_interior -> expr .)
    ,               reduce using rule 16 (array_interior -> expr .)
    ;               reduce using rule 16 (array_interior -> expr .)
    '               shift and go to state 28
    +               shift and go to state 29
    -               shift and go to state 30
    *               shift and go to state 31
    /               shift and go to state 32
    MPLUS           shift and go to state 33
    MMINUS          shift and go to state 34
    MMLTP           shift and go to state 35
    MDIV            shift and go to state 36
    EQ              shift and go to state 37
    NEQ             shift and go to state 38
    GTEQ            shift and go to state 39
    LTEQ            shift and go to state 40
    >               shift and go to state 41
    <               shift and go to state 42


state 53

    (56) cond_if -> cond_if ELSE . cond_block
    (53) cond_block -> . struct
    (54) cond_block -> . { start }
    (5) struct -> . expr ;
    (6) struct -> . cond_expr
    (7) struct -> . instruction
    (8) expr -> . INTNUM
    (9) expr -> . FLOATNUM
    (10) expr -> . STRING
    (11) expr -> . ID
    (12) expr -> . ( expr )
    (13) expr -> . - expr
    (14) expr -> . expr '
    (17) expr -> . [ array_interior ]
    (18) expr -> . ID = expr
    (19) expr -> . ID PLUSASSIGN expr
    (20) expr -> . ID MINASSIGN expr
    (21) expr -> . ID MULTASSIGN expr
    (22) expr -> . ID DIVASSIGN expr
    (23) expr -> . ID [ INTNUM ] = expr
    (24) expr -> . ID [ INTNUM ] PLUSASSIGN expr
    (25) expr -> . ID [ INTNUM ] MINASSIGN expr
    (26) expr -> . ID [ INTNUM ] MULTASSIGN expr
    (27) expr -> . ID [ INTNUM ] DIVASSIGN expr
    (28) expr -> . ID [ INTNUM , INTNUM ] = expr
    (29) expr -> . ID [ INTNUM , INTNUM ] PLUSASSIGN expr
    (30) expr -> . ID [ INTNUM , INTNUM ] MINASSIGN expr
    (31) expr -> . ID [ INTNUM , INTNUM ] MULTASSIGN expr
    (32) expr -> . ID [ INTNUM , INTNUM ] DIVASSIGN expr
    (33) expr -> . ID = ZEROS ( INTNUM )
    (34) expr -> . ID = ONES ( INTNUM )
    (35) expr -> . ID = EYE ( INTNUM )
    (36) expr -> . expr + expr
    (37) expr -> . expr - expr
    (38) expr -> . expr * expr
    (39) expr -> . expr / expr
    (40) expr -> . expr MPLUS expr
    (41) expr -> . expr MMINUS expr
    (42) expr -> . expr MMLTP expr
    (43) expr -> . expr MDIV expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr > expr
    (49) expr -> . expr < expr
    (50) cond_expr -> . cond_if
    (51) cond_expr -> . cond_while
    (52) cond_expr -> . cond_for
    (59) instruction -> . BREAK ;
    (60) instruction -> . CONTINUE ;
    (61) instruction -> . RETURN expr ;
    (62) instruction -> . PRINT array_interior ;
    (55) cond_if -> . IF ( expr ) cond_block
    (56) cond_if -> . cond_if ELSE cond_block
    (57) cond_while -> . WHILE ( expr ) cond_block
    (58) cond_for -> . FOR ID = expr : expr cond_block

    {               shift and go to state 91
    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ID              shift and go to state 10
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13
    BREAK           shift and go to state 17
    CONTINUE        shift and go to state 18
    RETURN          shift and go to state 19
    PRINT           shift and go to state 20
    IF              shift and go to state 21
    WHILE           shift and go to state 22
    FOR             shift and go to state 23

    cond_if                        shift and go to state 14
    cond_block                     shift and go to state 89
    struct                         shift and go to state 90
    expr                           shift and go to state 4
    cond_expr                      shift and go to state 5
    instruction                    shift and go to state 6
    cond_while                     shift and go to state 15
    cond_for                       shift and go to state 16

state 54

    (59) instruction -> BREAK ; .

    {               reduce using rule 59 (instruction -> BREAK ; .)
    INTNUM          reduce using rule 59 (instruction -> BREAK ; .)
    FLOATNUM        reduce using rule 59 (instruction -> BREAK ; .)
    STRING          reduce using rule 59 (instruction -> BREAK ; .)
    ID              reduce using rule 59 (instruction -> BREAK ; .)
    (               reduce using rule 59 (instruction -> BREAK ; .)
    -               reduce using rule 59 (instruction -> BREAK ; .)
    [               reduce using rule 59 (instruction -> BREAK ; .)
    BREAK           reduce using rule 59 (instruction -> BREAK ; .)
    CONTINUE        reduce using rule 59 (instruction -> BREAK ; .)
    RETURN          reduce using rule 59 (instruction -> BREAK ; .)
    PRINT           reduce using rule 59 (instruction -> BREAK ; .)
    IF              reduce using rule 59 (instruction -> BREAK ; .)
    WHILE           reduce using rule 59 (instruction -> BREAK ; .)
    FOR             reduce using rule 59 (instruction -> BREAK ; .)
    $end            reduce using rule 59 (instruction -> BREAK ; .)
    }               reduce using rule 59 (instruction -> BREAK ; .)
    ELSE            reduce using rule 59 (instruction -> BREAK ; .)


state 55

    (60) instruction -> CONTINUE ; .

    {               reduce using rule 60 (instruction -> CONTINUE ; .)
    INTNUM          reduce using rule 60 (instruction -> CONTINUE ; .)
    FLOATNUM        reduce using rule 60 (instruction -> CONTINUE ; .)
    STRING          reduce using rule 60 (instruction -> CONTINUE ; .)
    ID              reduce using rule 60 (instruction -> CONTINUE ; .)
    (               reduce using rule 60 (instruction -> CONTINUE ; .)
    -               reduce using rule 60 (instruction -> CONTINUE ; .)
    [               reduce using rule 60 (instruction -> CONTINUE ; .)
    BREAK           reduce using rule 60 (instruction -> CONTINUE ; .)
    CONTINUE        reduce using rule 60 (instruction -> CONTINUE ; .)
    RETURN          reduce using rule 60 (instruction -> CONTINUE ; .)
    PRINT           reduce using rule 60 (instruction -> CONTINUE ; .)
    IF              reduce using rule 60 (instruction -> CONTINUE ; .)
    WHILE           reduce using rule 60 (instruction -> CONTINUE ; .)
    FOR             reduce using rule 60 (instruction -> CONTINUE ; .)
    $end            reduce using rule 60 (instruction -> CONTINUE ; .)
    }               reduce using rule 60 (instruction -> CONTINUE ; .)
    ELSE            reduce using rule 60 (instruction -> CONTINUE ; .)


state 56

    (61) instruction -> RETURN expr . ;
    (14) expr -> expr . '
    (36) expr -> expr . + expr
    (37) expr -> expr . - expr
    (38) expr -> expr . * expr
    (39) expr -> expr . / expr
    (40) expr -> expr . MPLUS expr
    (41) expr -> expr . MMINUS expr
    (42) expr -> expr . MMLTP expr
    (43) expr -> expr . MDIV expr
    (44) expr -> expr . EQ expr
    (45) expr -> expr . NEQ expr
    (46) expr -> expr . GTEQ expr
    (47) expr -> expr . LTEQ expr
    (48) expr -> expr . > expr
    (49) expr -> expr . < expr

    ;               shift and go to state 92
    '               shift and go to state 28
    +               shift and go to state 29
    -               shift and go to state 30
    *               shift and go to state 31
    /               shift and go to state 32
    MPLUS           shift and go to state 33
    MMINUS          shift and go to state 34
    MMLTP           shift and go to state 35
    MDIV            shift and go to state 36
    EQ              shift and go to state 37
    NEQ             shift and go to state 38
    GTEQ            shift and go to state 39
    LTEQ            shift and go to state 40
    >               shift and go to state 41
    <               shift and go to state 42


state 57

    (62) instruction -> PRINT array_interior . ;
    (15) array_interior -> array_interior . , expr

    ;               shift and go to state 93
    ,               shift and go to state 88


state 58

    (55) cond_if -> IF ( . expr ) cond_block
    (8) expr -> . INTNUM
    (9) expr -> . FLOATNUM
    (10) expr -> . STRING
    (11) expr -> . ID
    (12) expr -> . ( expr )
    (13) expr -> . - expr
    (14) expr -> . expr '
    (17) expr -> . [ array_interior ]
    (18) expr -> . ID = expr
    (19) expr -> . ID PLUSASSIGN expr
    (20) expr -> . ID MINASSIGN expr
    (21) expr -> . ID MULTASSIGN expr
    (22) expr -> . ID DIVASSIGN expr
    (23) expr -> . ID [ INTNUM ] = expr
    (24) expr -> . ID [ INTNUM ] PLUSASSIGN expr
    (25) expr -> . ID [ INTNUM ] MINASSIGN expr
    (26) expr -> . ID [ INTNUM ] MULTASSIGN expr
    (27) expr -> . ID [ INTNUM ] DIVASSIGN expr
    (28) expr -> . ID [ INTNUM , INTNUM ] = expr
    (29) expr -> . ID [ INTNUM , INTNUM ] PLUSASSIGN expr
    (30) expr -> . ID [ INTNUM , INTNUM ] MINASSIGN expr
    (31) expr -> . ID [ INTNUM , INTNUM ] MULTASSIGN expr
    (32) expr -> . ID [ INTNUM , INTNUM ] DIVASSIGN expr
    (33) expr -> . ID = ZEROS ( INTNUM )
    (34) expr -> . ID = ONES ( INTNUM )
    (35) expr -> . ID = EYE ( INTNUM )
    (36) expr -> . expr + expr
    (37) expr -> . expr - expr
    (38) expr -> . expr * expr
    (39) expr -> . expr / expr
    (40) expr -> . expr MPLUS expr
    (41) expr -> . expr MMINUS expr
    (42) expr -> . expr MMLTP expr
    (43) expr -> . expr MDIV expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr > expr
    (49) expr -> . expr < expr

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ID              shift and go to state 10
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13

    expr                           shift and go to state 94

state 59

    (57) cond_while -> WHILE ( . expr ) cond_block
    (8) expr -> . INTNUM
    (9) expr -> . FLOATNUM
    (10) expr -> . STRING
    (11) expr -> . ID
    (12) expr -> . ( expr )
    (13) expr -> . - expr
    (14) expr -> . expr '
    (17) expr -> . [ array_interior ]
    (18) expr -> . ID = expr
    (19) expr -> . ID PLUSASSIGN expr
    (20) expr -> . ID MINASSIGN expr
    (21) expr -> . ID MULTASSIGN expr
    (22) expr -> . ID DIVASSIGN expr
    (23) expr -> . ID [ INTNUM ] = expr
    (24) expr -> . ID [ INTNUM ] PLUSASSIGN expr
    (25) expr -> . ID [ INTNUM ] MINASSIGN expr
    (26) expr -> . ID [ INTNUM ] MULTASSIGN expr
    (27) expr -> . ID [ INTNUM ] DIVASSIGN expr
    (28) expr -> . ID [ INTNUM , INTNUM ] = expr
    (29) expr -> . ID [ INTNUM , INTNUM ] PLUSASSIGN expr
    (30) expr -> . ID [ INTNUM , INTNUM ] MINASSIGN expr
    (31) expr -> . ID [ INTNUM , INTNUM ] MULTASSIGN expr
    (32) expr -> . ID [ INTNUM , INTNUM ] DIVASSIGN expr
    (33) expr -> . ID = ZEROS ( INTNUM )
    (34) expr -> . ID = ONES ( INTNUM )
    (35) expr -> . ID = EYE ( INTNUM )
    (36) expr -> . expr + expr
    (37) expr -> . expr - expr
    (38) expr -> . expr * expr
    (39) expr -> . expr / expr
    (40) expr -> . expr MPLUS expr
    (41) expr -> . expr MMINUS expr
    (42) expr -> . expr MMLTP expr
    (43) expr -> . expr MDIV expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr > expr
    (49) expr -> . expr < expr

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ID              shift and go to state 10
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13

    expr                           shift and go to state 95

state 60

    (58) cond_for -> FOR ID . = expr : expr cond_block

    =               shift and go to state 96


state 61

    (4) start -> start { start . }
    (2) start -> start . struct
    (4) start -> start . { start }
    (5) struct -> . expr ;
    (6) struct -> . cond_expr
    (7) struct -> . instruction
    (8) expr -> . INTNUM
    (9) expr -> . FLOATNUM
    (10) expr -> . STRING
    (11) expr -> . ID
    (12) expr -> . ( expr )
    (13) expr -> . - expr
    (14) expr -> . expr '
    (17) expr -> . [ array_interior ]
    (18) expr -> . ID = expr
    (19) expr -> . ID PLUSASSIGN expr
    (20) expr -> . ID MINASSIGN expr
    (21) expr -> . ID MULTASSIGN expr
    (22) expr -> . ID DIVASSIGN expr
    (23) expr -> . ID [ INTNUM ] = expr
    (24) expr -> . ID [ INTNUM ] PLUSASSIGN expr
    (25) expr -> . ID [ INTNUM ] MINASSIGN expr
    (26) expr -> . ID [ INTNUM ] MULTASSIGN expr
    (27) expr -> . ID [ INTNUM ] DIVASSIGN expr
    (28) expr -> . ID [ INTNUM , INTNUM ] = expr
    (29) expr -> . ID [ INTNUM , INTNUM ] PLUSASSIGN expr
    (30) expr -> . ID [ INTNUM , INTNUM ] MINASSIGN expr
    (31) expr -> . ID [ INTNUM , INTNUM ] MULTASSIGN expr
    (32) expr -> . ID [ INTNUM , INTNUM ] DIVASSIGN expr
    (33) expr -> . ID = ZEROS ( INTNUM )
    (34) expr -> . ID = ONES ( INTNUM )
    (35) expr -> . ID = EYE ( INTNUM )
    (36) expr -> . expr + expr
    (37) expr -> . expr - expr
    (38) expr -> . expr * expr
    (39) expr -> . expr / expr
    (40) expr -> . expr MPLUS expr
    (41) expr -> . expr MMINUS expr
    (42) expr -> . expr MMLTP expr
    (43) expr -> . expr MDIV expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr > expr
    (49) expr -> . expr < expr
    (50) cond_expr -> . cond_if
    (51) cond_expr -> . cond_while
    (52) cond_expr -> . cond_for
    (59) instruction -> . BREAK ;
    (60) instruction -> . CONTINUE ;
    (61) instruction -> . RETURN expr ;
    (62) instruction -> . PRINT array_interior ;
    (55) cond_if -> . IF ( expr ) cond_block
    (56) cond_if -> . cond_if ELSE cond_block
    (57) cond_while -> . WHILE ( expr ) cond_block
    (58) cond_for -> . FOR ID = expr : expr cond_block

    }               shift and go to state 97
    {               shift and go to state 25
    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ID              shift and go to state 10
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13
    BREAK           shift and go to state 17
    CONTINUE        shift and go to state 18
    RETURN          shift and go to state 19
    PRINT           shift and go to state 20
    IF              shift and go to state 21
    WHILE           shift and go to state 22
    FOR             shift and go to state 23

    struct                         shift and go to state 24
    expr                           shift and go to state 4
    cond_expr                      shift and go to state 5
    instruction                    shift and go to state 6
    cond_if                        shift and go to state 14
    cond_while                     shift and go to state 15
    cond_for                       shift and go to state 16

state 62

    (3) start -> { start } .

    {               reduce using rule 3 (start -> { start } .)
    INTNUM          reduce using rule 3 (start -> { start } .)
    FLOATNUM        reduce using rule 3 (start -> { start } .)
    STRING          reduce using rule 3 (start -> { start } .)
    ID              reduce using rule 3 (start -> { start } .)
    (               reduce using rule 3 (start -> { start } .)
    -               reduce using rule 3 (start -> { start } .)
    [               reduce using rule 3 (start -> { start } .)
    BREAK           reduce using rule 3 (start -> { start } .)
    CONTINUE        reduce using rule 3 (start -> { start } .)
    RETURN          reduce using rule 3 (start -> { start } .)
    PRINT           reduce using rule 3 (start -> { start } .)
    IF              reduce using rule 3 (start -> { start } .)
    WHILE           reduce using rule 3 (start -> { start } .)
    FOR             reduce using rule 3 (start -> { start } .)
    $end            reduce using rule 3 (start -> { start } .)
    }               reduce using rule 3 (start -> { start } .)


state 63

    (36) expr -> expr + expr .
    (14) expr -> expr . '
    (36) expr -> expr . + expr
    (37) expr -> expr . - expr
    (38) expr -> expr . * expr
    (39) expr -> expr . / expr
    (40) expr -> expr . MPLUS expr
    (41) expr -> expr . MMINUS expr
    (42) expr -> expr . MMLTP expr
    (43) expr -> expr . MDIV expr
    (44) expr -> expr . EQ expr
    (45) expr -> expr . NEQ expr
    (46) expr -> expr . GTEQ expr
    (47) expr -> expr . LTEQ expr
    (48) expr -> expr . > expr
    (49) expr -> expr . < expr

    ;               reduce using rule 36 (expr -> expr + expr .)
    +               reduce using rule 36 (expr -> expr + expr .)
    -               reduce using rule 36 (expr -> expr + expr .)
    MPLUS           reduce using rule 36 (expr -> expr + expr .)
    MMINUS          reduce using rule 36 (expr -> expr + expr .)
    EQ              reduce using rule 36 (expr -> expr + expr .)
    NEQ             reduce using rule 36 (expr -> expr + expr .)
    GTEQ            reduce using rule 36 (expr -> expr + expr .)
    LTEQ            reduce using rule 36 (expr -> expr + expr .)
    >               reduce using rule 36 (expr -> expr + expr .)
    <               reduce using rule 36 (expr -> expr + expr .)
    )               reduce using rule 36 (expr -> expr + expr .)
    ]               reduce using rule 36 (expr -> expr + expr .)
    ,               reduce using rule 36 (expr -> expr + expr .)
    :               reduce using rule 36 (expr -> expr + expr .)
    {               reduce using rule 36 (expr -> expr + expr .)
    INTNUM          reduce using rule 36 (expr -> expr + expr .)
    FLOATNUM        reduce using rule 36 (expr -> expr + expr .)
    STRING          reduce using rule 36 (expr -> expr + expr .)
    ID              reduce using rule 36 (expr -> expr + expr .)
    (               reduce using rule 36 (expr -> expr + expr .)
    [               reduce using rule 36 (expr -> expr + expr .)
    BREAK           reduce using rule 36 (expr -> expr + expr .)
    CONTINUE        reduce using rule 36 (expr -> expr + expr .)
    RETURN          reduce using rule 36 (expr -> expr + expr .)
    PRINT           reduce using rule 36 (expr -> expr + expr .)
    IF              reduce using rule 36 (expr -> expr + expr .)
    WHILE           reduce using rule 36 (expr -> expr + expr .)
    FOR             reduce using rule 36 (expr -> expr + expr .)
    '               shift and go to state 28
    *               shift and go to state 31
    /               shift and go to state 32
    MMLTP           shift and go to state 35
    MDIV            shift and go to state 36

  ! '               [ reduce using rule 36 (expr -> expr + expr .) ]
  ! *               [ reduce using rule 36 (expr -> expr + expr .) ]
  ! /               [ reduce using rule 36 (expr -> expr + expr .) ]
  ! MMLTP           [ reduce using rule 36 (expr -> expr + expr .) ]
  ! MDIV            [ reduce using rule 36 (expr -> expr + expr .) ]
  ! +               [ shift and go to state 29 ]
  ! -               [ shift and go to state 30 ]
  ! MPLUS           [ shift and go to state 33 ]
  ! MMINUS          [ shift and go to state 34 ]
  ! EQ              [ shift and go to state 37 ]
  ! NEQ             [ shift and go to state 38 ]
  ! GTEQ            [ shift and go to state 39 ]
  ! LTEQ            [ shift and go to state 40 ]
  ! >               [ shift and go to state 41 ]
  ! <               [ shift and go to state 42 ]


state 64

    (37) expr -> expr - expr .
    (14) expr -> expr . '
    (36) expr -> expr . + expr
    (37) expr -> expr . - expr
    (38) expr -> expr . * expr
    (39) expr -> expr . / expr
    (40) expr -> expr . MPLUS expr
    (41) expr -> expr . MMINUS expr
    (42) expr -> expr . MMLTP expr
    (43) expr -> expr . MDIV expr
    (44) expr -> expr . EQ expr
    (45) expr -> expr . NEQ expr
    (46) expr -> expr . GTEQ expr
    (47) expr -> expr . LTEQ expr
    (48) expr -> expr . > expr
    (49) expr -> expr . < expr

    ;               reduce using rule 37 (expr -> expr - expr .)
    +               reduce using rule 37 (expr -> expr - expr .)
    -               reduce using rule 37 (expr -> expr - expr .)
    MPLUS           reduce using rule 37 (expr -> expr - expr .)
    MMINUS          reduce using rule 37 (expr -> expr - expr .)
    EQ              reduce using rule 37 (expr -> expr - expr .)
    NEQ             reduce using rule 37 (expr -> expr - expr .)
    GTEQ            reduce using rule 37 (expr -> expr - expr .)
    LTEQ            reduce using rule 37 (expr -> expr - expr .)
    >               reduce using rule 37 (expr -> expr - expr .)
    <               reduce using rule 37 (expr -> expr - expr .)
    )               reduce using rule 37 (expr -> expr - expr .)
    ]               reduce using rule 37 (expr -> expr - expr .)
    ,               reduce using rule 37 (expr -> expr - expr .)
    :               reduce using rule 37 (expr -> expr - expr .)
    {               reduce using rule 37 (expr -> expr - expr .)
    INTNUM          reduce using rule 37 (expr -> expr - expr .)
    FLOATNUM        reduce using rule 37 (expr -> expr - expr .)
    STRING          reduce using rule 37 (expr -> expr - expr .)
    ID              reduce using rule 37 (expr -> expr - expr .)
    (               reduce using rule 37 (expr -> expr - expr .)
    [               reduce using rule 37 (expr -> expr - expr .)
    BREAK           reduce using rule 37 (expr -> expr - expr .)
    CONTINUE        reduce using rule 37 (expr -> expr - expr .)
    RETURN          reduce using rule 37 (expr -> expr - expr .)
    PRINT           reduce using rule 37 (expr -> expr - expr .)
    IF              reduce using rule 37 (expr -> expr - expr .)
    WHILE           reduce using rule 37 (expr -> expr - expr .)
    FOR             reduce using rule 37 (expr -> expr - expr .)
    '               shift and go to state 28
    *               shift and go to state 31
    /               shift and go to state 32
    MMLTP           shift and go to state 35
    MDIV            shift and go to state 36

  ! '               [ reduce using rule 37 (expr -> expr - expr .) ]
  ! *               [ reduce using rule 37 (expr -> expr - expr .) ]
  ! /               [ reduce using rule 37 (expr -> expr - expr .) ]
  ! MMLTP           [ reduce using rule 37 (expr -> expr - expr .) ]
  ! MDIV            [ reduce using rule 37 (expr -> expr - expr .) ]
  ! +               [ shift and go to state 29 ]
  ! -               [ shift and go to state 30 ]
  ! MPLUS           [ shift and go to state 33 ]
  ! MMINUS          [ shift and go to state 34 ]
  ! EQ              [ shift and go to state 37 ]
  ! NEQ             [ shift and go to state 38 ]
  ! GTEQ            [ shift and go to state 39 ]
  ! LTEQ            [ shift and go to state 40 ]
  ! >               [ shift and go to state 41 ]
  ! <               [ shift and go to state 42 ]


state 65

    (38) expr -> expr * expr .
    (14) expr -> expr . '
    (36) expr -> expr . + expr
    (37) expr -> expr . - expr
    (38) expr -> expr . * expr
    (39) expr -> expr . / expr
    (40) expr -> expr . MPLUS expr
    (41) expr -> expr . MMINUS expr
    (42) expr -> expr . MMLTP expr
    (43) expr -> expr . MDIV expr
    (44) expr -> expr . EQ expr
    (45) expr -> expr . NEQ expr
    (46) expr -> expr . GTEQ expr
    (47) expr -> expr . LTEQ expr
    (48) expr -> expr . > expr
    (49) expr -> expr . < expr

    ;               reduce using rule 38 (expr -> expr * expr .)
    +               reduce using rule 38 (expr -> expr * expr .)
    -               reduce using rule 38 (expr -> expr * expr .)
    *               reduce using rule 38 (expr -> expr * expr .)
    /               reduce using rule 38 (expr -> expr * expr .)
    MPLUS           reduce using rule 38 (expr -> expr * expr .)
    MMINUS          reduce using rule 38 (expr -> expr * expr .)
    MMLTP           reduce using rule 38 (expr -> expr * expr .)
    MDIV            reduce using rule 38 (expr -> expr * expr .)
    EQ              reduce using rule 38 (expr -> expr * expr .)
    NEQ             reduce using rule 38 (expr -> expr * expr .)
    GTEQ            reduce using rule 38 (expr -> expr * expr .)
    LTEQ            reduce using rule 38 (expr -> expr * expr .)
    >               reduce using rule 38 (expr -> expr * expr .)
    <               reduce using rule 38 (expr -> expr * expr .)
    )               reduce using rule 38 (expr -> expr * expr .)
    ]               reduce using rule 38 (expr -> expr * expr .)
    ,               reduce using rule 38 (expr -> expr * expr .)
    :               reduce using rule 38 (expr -> expr * expr .)
    {               reduce using rule 38 (expr -> expr * expr .)
    INTNUM          reduce using rule 38 (expr -> expr * expr .)
    FLOATNUM        reduce using rule 38 (expr -> expr * expr .)
    STRING          reduce using rule 38 (expr -> expr * expr .)
    ID              reduce using rule 38 (expr -> expr * expr .)
    (               reduce using rule 38 (expr -> expr * expr .)
    [               reduce using rule 38 (expr -> expr * expr .)
    BREAK           reduce using rule 38 (expr -> expr * expr .)
    CONTINUE        reduce using rule 38 (expr -> expr * expr .)
    RETURN          reduce using rule 38 (expr -> expr * expr .)
    PRINT           reduce using rule 38 (expr -> expr * expr .)
    IF              reduce using rule 38 (expr -> expr * expr .)
    WHILE           reduce using rule 38 (expr -> expr * expr .)
    FOR             reduce using rule 38 (expr -> expr * expr .)
    '               shift and go to state 28

  ! '               [ reduce using rule 38 (expr -> expr * expr .) ]
  ! +               [ shift and go to state 29 ]
  ! -               [ shift and go to state 30 ]
  ! *               [ shift and go to state 31 ]
  ! /               [ shift and go to state 32 ]
  ! MPLUS           [ shift and go to state 33 ]
  ! MMINUS          [ shift and go to state 34 ]
  ! MMLTP           [ shift and go to state 35 ]
  ! MDIV            [ shift and go to state 36 ]
  ! EQ              [ shift and go to state 37 ]
  ! NEQ             [ shift and go to state 38 ]
  ! GTEQ            [ shift and go to state 39 ]
  ! LTEQ            [ shift and go to state 40 ]
  ! >               [ shift and go to state 41 ]
  ! <               [ shift and go to state 42 ]


state 66

    (39) expr -> expr / expr .
    (14) expr -> expr . '
    (36) expr -> expr . + expr
    (37) expr -> expr . - expr
    (38) expr -> expr . * expr
    (39) expr -> expr . / expr
    (40) expr -> expr . MPLUS expr
    (41) expr -> expr . MMINUS expr
    (42) expr -> expr . MMLTP expr
    (43) expr -> expr . MDIV expr
    (44) expr -> expr . EQ expr
    (45) expr -> expr . NEQ expr
    (46) expr -> expr . GTEQ expr
    (47) expr -> expr . LTEQ expr
    (48) expr -> expr . > expr
    (49) expr -> expr . < expr

    ;               reduce using rule 39 (expr -> expr / expr .)
    +               reduce using rule 39 (expr -> expr / expr .)
    -               reduce using rule 39 (expr -> expr / expr .)
    *               reduce using rule 39 (expr -> expr / expr .)
    /               reduce using rule 39 (expr -> expr / expr .)
    MPLUS           reduce using rule 39 (expr -> expr / expr .)
    MMINUS          reduce using rule 39 (expr -> expr / expr .)
    MMLTP           reduce using rule 39 (expr -> expr / expr .)
    MDIV            reduce using rule 39 (expr -> expr / expr .)
    EQ              reduce using rule 39 (expr -> expr / expr .)
    NEQ             reduce using rule 39 (expr -> expr / expr .)
    GTEQ            reduce using rule 39 (expr -> expr / expr .)
    LTEQ            reduce using rule 39 (expr -> expr / expr .)
    >               reduce using rule 39 (expr -> expr / expr .)
    <               reduce using rule 39 (expr -> expr / expr .)
    )               reduce using rule 39 (expr -> expr / expr .)
    ]               reduce using rule 39 (expr -> expr / expr .)
    ,               reduce using rule 39 (expr -> expr / expr .)
    :               reduce using rule 39 (expr -> expr / expr .)
    {               reduce using rule 39 (expr -> expr / expr .)
    INTNUM          reduce using rule 39 (expr -> expr / expr .)
    FLOATNUM        reduce using rule 39 (expr -> expr / expr .)
    STRING          reduce using rule 39 (expr -> expr / expr .)
    ID              reduce using rule 39 (expr -> expr / expr .)
    (               reduce using rule 39 (expr -> expr / expr .)
    [               reduce using rule 39 (expr -> expr / expr .)
    BREAK           reduce using rule 39 (expr -> expr / expr .)
    CONTINUE        reduce using rule 39 (expr -> expr / expr .)
    RETURN          reduce using rule 39 (expr -> expr / expr .)
    PRINT           reduce using rule 39 (expr -> expr / expr .)
    IF              reduce using rule 39 (expr -> expr / expr .)
    WHILE           reduce using rule 39 (expr -> expr / expr .)
    FOR             reduce using rule 39 (expr -> expr / expr .)
    '               shift and go to state 28

  ! '               [ reduce using rule 39 (expr -> expr / expr .) ]
  ! +               [ shift and go to state 29 ]
  ! -               [ shift and go to state 30 ]
  ! *               [ shift and go to state 31 ]
  ! /               [ shift and go to state 32 ]
  ! MPLUS           [ shift and go to state 33 ]
  ! MMINUS          [ shift and go to state 34 ]
  ! MMLTP           [ shift and go to state 35 ]
  ! MDIV            [ shift and go to state 36 ]
  ! EQ              [ shift and go to state 37 ]
  ! NEQ             [ shift and go to state 38 ]
  ! GTEQ            [ shift and go to state 39 ]
  ! LTEQ            [ shift and go to state 40 ]
  ! >               [ shift and go to state 41 ]
  ! <               [ shift and go to state 42 ]


state 67

    (40) expr -> expr MPLUS expr .
    (14) expr -> expr . '
    (36) expr -> expr . + expr
    (37) expr -> expr . - expr
    (38) expr -> expr . * expr
    (39) expr -> expr . / expr
    (40) expr -> expr . MPLUS expr
    (41) expr -> expr . MMINUS expr
    (42) expr -> expr . MMLTP expr
    (43) expr -> expr . MDIV expr
    (44) expr -> expr . EQ expr
    (45) expr -> expr . NEQ expr
    (46) expr -> expr . GTEQ expr
    (47) expr -> expr . LTEQ expr
    (48) expr -> expr . > expr
    (49) expr -> expr . < expr

    ;               reduce using rule 40 (expr -> expr MPLUS expr .)
    +               reduce using rule 40 (expr -> expr MPLUS expr .)
    -               reduce using rule 40 (expr -> expr MPLUS expr .)
    MPLUS           reduce using rule 40 (expr -> expr MPLUS expr .)
    MMINUS          reduce using rule 40 (expr -> expr MPLUS expr .)
    EQ              reduce using rule 40 (expr -> expr MPLUS expr .)
    NEQ             reduce using rule 40 (expr -> expr MPLUS expr .)
    GTEQ            reduce using rule 40 (expr -> expr MPLUS expr .)
    LTEQ            reduce using rule 40 (expr -> expr MPLUS expr .)
    >               reduce using rule 40 (expr -> expr MPLUS expr .)
    <               reduce using rule 40 (expr -> expr MPLUS expr .)
    )               reduce using rule 40 (expr -> expr MPLUS expr .)
    ]               reduce using rule 40 (expr -> expr MPLUS expr .)
    ,               reduce using rule 40 (expr -> expr MPLUS expr .)
    :               reduce using rule 40 (expr -> expr MPLUS expr .)
    {               reduce using rule 40 (expr -> expr MPLUS expr .)
    INTNUM          reduce using rule 40 (expr -> expr MPLUS expr .)
    FLOATNUM        reduce using rule 40 (expr -> expr MPLUS expr .)
    STRING          reduce using rule 40 (expr -> expr MPLUS expr .)
    ID              reduce using rule 40 (expr -> expr MPLUS expr .)
    (               reduce using rule 40 (expr -> expr MPLUS expr .)
    [               reduce using rule 40 (expr -> expr MPLUS expr .)
    BREAK           reduce using rule 40 (expr -> expr MPLUS expr .)
    CONTINUE        reduce using rule 40 (expr -> expr MPLUS expr .)
    RETURN          reduce using rule 40 (expr -> expr MPLUS expr .)
    PRINT           reduce using rule 40 (expr -> expr MPLUS expr .)
    IF              reduce using rule 40 (expr -> expr MPLUS expr .)
    WHILE           reduce using rule 40 (expr -> expr MPLUS expr .)
    FOR             reduce using rule 40 (expr -> expr MPLUS expr .)
    '               shift and go to state 28
    *               shift and go to state 31
    /               shift and go to state 32
    MMLTP           shift and go to state 35
    MDIV            shift and go to state 36

  ! '               [ reduce using rule 40 (expr -> expr MPLUS expr .) ]
  ! *               [ reduce using rule 40 (expr -> expr MPLUS expr .) ]
  ! /               [ reduce using rule 40 (expr -> expr MPLUS expr .) ]
  ! MMLTP           [ reduce using rule 40 (expr -> expr MPLUS expr .) ]
  ! MDIV            [ reduce using rule 40 (expr -> expr MPLUS expr .) ]
  ! +               [ shift and go to state 29 ]
  ! -               [ shift and go to state 30 ]
  ! MPLUS           [ shift and go to state 33 ]
  ! MMINUS          [ shift and go to state 34 ]
  ! EQ              [ shift and go to state 37 ]
  ! NEQ             [ shift and go to state 38 ]
  ! GTEQ            [ shift and go to state 39 ]
  ! LTEQ            [ shift and go to state 40 ]
  ! >               [ shift and go to state 41 ]
  ! <               [ shift and go to state 42 ]


state 68

    (41) expr -> expr MMINUS expr .
    (14) expr -> expr . '
    (36) expr -> expr . + expr
    (37) expr -> expr . - expr
    (38) expr -> expr . * expr
    (39) expr -> expr . / expr
    (40) expr -> expr . MPLUS expr
    (41) expr -> expr . MMINUS expr
    (42) expr -> expr . MMLTP expr
    (43) expr -> expr . MDIV expr
    (44) expr -> expr . EQ expr
    (45) expr -> expr . NEQ expr
    (46) expr -> expr . GTEQ expr
    (47) expr -> expr . LTEQ expr
    (48) expr -> expr . > expr
    (49) expr -> expr . < expr

    ;               reduce using rule 41 (expr -> expr MMINUS expr .)
    +               reduce using rule 41 (expr -> expr MMINUS expr .)
    -               reduce using rule 41 (expr -> expr MMINUS expr .)
    MPLUS           reduce using rule 41 (expr -> expr MMINUS expr .)
    MMINUS          reduce using rule 41 (expr -> expr MMINUS expr .)
    EQ              reduce using rule 41 (expr -> expr MMINUS expr .)
    NEQ             reduce using rule 41 (expr -> expr MMINUS expr .)
    GTEQ            reduce using rule 41 (expr -> expr MMINUS expr .)
    LTEQ            reduce using rule 41 (expr -> expr MMINUS expr .)
    >               reduce using rule 41 (expr -> expr MMINUS expr .)
    <               reduce using rule 41 (expr -> expr MMINUS expr .)
    )               reduce using rule 41 (expr -> expr MMINUS expr .)
    ]               reduce using rule 41 (expr -> expr MMINUS expr .)
    ,               reduce using rule 41 (expr -> expr MMINUS expr .)
    :               reduce using rule 41 (expr -> expr MMINUS expr .)
    {               reduce using rule 41 (expr -> expr MMINUS expr .)
    INTNUM          reduce using rule 41 (expr -> expr MMINUS expr .)
    FLOATNUM        reduce using rule 41 (expr -> expr MMINUS expr .)
    STRING          reduce using rule 41 (expr -> expr MMINUS expr .)
    ID              reduce using rule 41 (expr -> expr MMINUS expr .)
    (               reduce using rule 41 (expr -> expr MMINUS expr .)
    [               reduce using rule 41 (expr -> expr MMINUS expr .)
    BREAK           reduce using rule 41 (expr -> expr MMINUS expr .)
    CONTINUE        reduce using rule 41 (expr -> expr MMINUS expr .)
    RETURN          reduce using rule 41 (expr -> expr MMINUS expr .)
    PRINT           reduce using rule 41 (expr -> expr MMINUS expr .)
    IF              reduce using rule 41 (expr -> expr MMINUS expr .)
    WHILE           reduce using rule 41 (expr -> expr MMINUS expr .)
    FOR             reduce using rule 41 (expr -> expr MMINUS expr .)
    '               shift and go to state 28
    *               shift and go to state 31
    /               shift and go to state 32
    MMLTP           shift and go to state 35
    MDIV            shift and go to state 36

  ! '               [ reduce using rule 41 (expr -> expr MMINUS expr .) ]
  ! *               [ reduce using rule 41 (expr -> expr MMINUS expr .) ]
  ! /               [ reduce using rule 41 (expr -> expr MMINUS expr .) ]
  ! MMLTP           [ reduce using rule 41 (expr -> expr MMINUS expr .) ]
  ! MDIV            [ reduce using rule 41 (expr -> expr MMINUS expr .) ]
  ! +               [ shift and go to state 29 ]
  ! -               [ shift and go to state 30 ]
  ! MPLUS           [ shift and go to state 33 ]
  ! MMINUS          [ shift and go to state 34 ]
  ! EQ              [ shift and go to state 37 ]
  ! NEQ             [ shift and go to state 38 ]
  ! GTEQ            [ shift and go to state 39 ]
  ! LTEQ            [ shift and go to state 40 ]
  ! >               [ shift and go to state 41 ]
  ! <               [ shift and go to state 42 ]


state 69

    (42) expr -> expr MMLTP expr .
    (14) expr -> expr . '
    (36) expr -> expr . + expr
    (37) expr -> expr . - expr
    (38) expr -> expr . * expr
    (39) expr -> expr . / expr
    (40) expr -> expr . MPLUS expr
    (41) expr -> expr . MMINUS expr
    (42) expr -> expr . MMLTP expr
    (43) expr -> expr . MDIV expr
    (44) expr -> expr . EQ expr
    (45) expr -> expr . NEQ expr
    (46) expr -> expr . GTEQ expr
    (47) expr -> expr . LTEQ expr
    (48) expr -> expr . > expr
    (49) expr -> expr . < expr

    ;               reduce using rule 42 (expr -> expr MMLTP expr .)
    +               reduce using rule 42 (expr -> expr MMLTP expr .)
    -               reduce using rule 42 (expr -> expr MMLTP expr .)
    *               reduce using rule 42 (expr -> expr MMLTP expr .)
    /               reduce using rule 42 (expr -> expr MMLTP expr .)
    MPLUS           reduce using rule 42 (expr -> expr MMLTP expr .)
    MMINUS          reduce using rule 42 (expr -> expr MMLTP expr .)
    MMLTP           reduce using rule 42 (expr -> expr MMLTP expr .)
    MDIV            reduce using rule 42 (expr -> expr MMLTP expr .)
    EQ              reduce using rule 42 (expr -> expr MMLTP expr .)
    NEQ             reduce using rule 42 (expr -> expr MMLTP expr .)
    GTEQ            reduce using rule 42 (expr -> expr MMLTP expr .)
    LTEQ            reduce using rule 42 (expr -> expr MMLTP expr .)
    >               reduce using rule 42 (expr -> expr MMLTP expr .)
    <               reduce using rule 42 (expr -> expr MMLTP expr .)
    )               reduce using rule 42 (expr -> expr MMLTP expr .)
    ]               reduce using rule 42 (expr -> expr MMLTP expr .)
    ,               reduce using rule 42 (expr -> expr MMLTP expr .)
    :               reduce using rule 42 (expr -> expr MMLTP expr .)
    {               reduce using rule 42 (expr -> expr MMLTP expr .)
    INTNUM          reduce using rule 42 (expr -> expr MMLTP expr .)
    FLOATNUM        reduce using rule 42 (expr -> expr MMLTP expr .)
    STRING          reduce using rule 42 (expr -> expr MMLTP expr .)
    ID              reduce using rule 42 (expr -> expr MMLTP expr .)
    (               reduce using rule 42 (expr -> expr MMLTP expr .)
    [               reduce using rule 42 (expr -> expr MMLTP expr .)
    BREAK           reduce using rule 42 (expr -> expr MMLTP expr .)
    CONTINUE        reduce using rule 42 (expr -> expr MMLTP expr .)
    RETURN          reduce using rule 42 (expr -> expr MMLTP expr .)
    PRINT           reduce using rule 42 (expr -> expr MMLTP expr .)
    IF              reduce using rule 42 (expr -> expr MMLTP expr .)
    WHILE           reduce using rule 42 (expr -> expr MMLTP expr .)
    FOR             reduce using rule 42 (expr -> expr MMLTP expr .)
    '               shift and go to state 28

  ! '               [ reduce using rule 42 (expr -> expr MMLTP expr .) ]
  ! +               [ shift and go to state 29 ]
  ! -               [ shift and go to state 30 ]
  ! *               [ shift and go to state 31 ]
  ! /               [ shift and go to state 32 ]
  ! MPLUS           [ shift and go to state 33 ]
  ! MMINUS          [ shift and go to state 34 ]
  ! MMLTP           [ shift and go to state 35 ]
  ! MDIV            [ shift and go to state 36 ]
  ! EQ              [ shift and go to state 37 ]
  ! NEQ             [ shift and go to state 38 ]
  ! GTEQ            [ shift and go to state 39 ]
  ! LTEQ            [ shift and go to state 40 ]
  ! >               [ shift and go to state 41 ]
  ! <               [ shift and go to state 42 ]


state 70

    (43) expr -> expr MDIV expr .
    (14) expr -> expr . '
    (36) expr -> expr . + expr
    (37) expr -> expr . - expr
    (38) expr -> expr . * expr
    (39) expr -> expr . / expr
    (40) expr -> expr . MPLUS expr
    (41) expr -> expr . MMINUS expr
    (42) expr -> expr . MMLTP expr
    (43) expr -> expr . MDIV expr
    (44) expr -> expr . EQ expr
    (45) expr -> expr . NEQ expr
    (46) expr -> expr . GTEQ expr
    (47) expr -> expr . LTEQ expr
    (48) expr -> expr . > expr
    (49) expr -> expr . < expr

    ;               reduce using rule 43 (expr -> expr MDIV expr .)
    +               reduce using rule 43 (expr -> expr MDIV expr .)
    -               reduce using rule 43 (expr -> expr MDIV expr .)
    *               reduce using rule 43 (expr -> expr MDIV expr .)
    /               reduce using rule 43 (expr -> expr MDIV expr .)
    MPLUS           reduce using rule 43 (expr -> expr MDIV expr .)
    MMINUS          reduce using rule 43 (expr -> expr MDIV expr .)
    MMLTP           reduce using rule 43 (expr -> expr MDIV expr .)
    MDIV            reduce using rule 43 (expr -> expr MDIV expr .)
    EQ              reduce using rule 43 (expr -> expr MDIV expr .)
    NEQ             reduce using rule 43 (expr -> expr MDIV expr .)
    GTEQ            reduce using rule 43 (expr -> expr MDIV expr .)
    LTEQ            reduce using rule 43 (expr -> expr MDIV expr .)
    >               reduce using rule 43 (expr -> expr MDIV expr .)
    <               reduce using rule 43 (expr -> expr MDIV expr .)
    )               reduce using rule 43 (expr -> expr MDIV expr .)
    ]               reduce using rule 43 (expr -> expr MDIV expr .)
    ,               reduce using rule 43 (expr -> expr MDIV expr .)
    :               reduce using rule 43 (expr -> expr MDIV expr .)
    {               reduce using rule 43 (expr -> expr MDIV expr .)
    INTNUM          reduce using rule 43 (expr -> expr MDIV expr .)
    FLOATNUM        reduce using rule 43 (expr -> expr MDIV expr .)
    STRING          reduce using rule 43 (expr -> expr MDIV expr .)
    ID              reduce using rule 43 (expr -> expr MDIV expr .)
    (               reduce using rule 43 (expr -> expr MDIV expr .)
    [               reduce using rule 43 (expr -> expr MDIV expr .)
    BREAK           reduce using rule 43 (expr -> expr MDIV expr .)
    CONTINUE        reduce using rule 43 (expr -> expr MDIV expr .)
    RETURN          reduce using rule 43 (expr -> expr MDIV expr .)
    PRINT           reduce using rule 43 (expr -> expr MDIV expr .)
    IF              reduce using rule 43 (expr -> expr MDIV expr .)
    WHILE           reduce using rule 43 (expr -> expr MDIV expr .)
    FOR             reduce using rule 43 (expr -> expr MDIV expr .)
    '               shift and go to state 28

  ! '               [ reduce using rule 43 (expr -> expr MDIV expr .) ]
  ! +               [ shift and go to state 29 ]
  ! -               [ shift and go to state 30 ]
  ! *               [ shift and go to state 31 ]
  ! /               [ shift and go to state 32 ]
  ! MPLUS           [ shift and go to state 33 ]
  ! MMINUS          [ shift and go to state 34 ]
  ! MMLTP           [ shift and go to state 35 ]
  ! MDIV            [ shift and go to state 36 ]
  ! EQ              [ shift and go to state 37 ]
  ! NEQ             [ shift and go to state 38 ]
  ! GTEQ            [ shift and go to state 39 ]
  ! LTEQ            [ shift and go to state 40 ]
  ! >               [ shift and go to state 41 ]
  ! <               [ shift and go to state 42 ]


state 71

    (44) expr -> expr EQ expr .
    (14) expr -> expr . '
    (36) expr -> expr . + expr
    (37) expr -> expr . - expr
    (38) expr -> expr . * expr
    (39) expr -> expr . / expr
    (40) expr -> expr . MPLUS expr
    (41) expr -> expr . MMINUS expr
    (42) expr -> expr . MMLTP expr
    (43) expr -> expr . MDIV expr
    (44) expr -> expr . EQ expr
    (45) expr -> expr . NEQ expr
    (46) expr -> expr . GTEQ expr
    (47) expr -> expr . LTEQ expr
    (48) expr -> expr . > expr
    (49) expr -> expr . < expr

  ! shift/reduce conflict for ' resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for MPLUS resolved as shift
  ! shift/reduce conflict for MMINUS resolved as shift
  ! shift/reduce conflict for MMLTP resolved as shift
  ! shift/reduce conflict for MDIV resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for GTEQ resolved as shift
  ! shift/reduce conflict for LTEQ resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for < resolved as shift
    ;               reduce using rule 44 (expr -> expr EQ expr .)
    )               reduce using rule 44 (expr -> expr EQ expr .)
    ]               reduce using rule 44 (expr -> expr EQ expr .)
    ,               reduce using rule 44 (expr -> expr EQ expr .)
    :               reduce using rule 44 (expr -> expr EQ expr .)
    {               reduce using rule 44 (expr -> expr EQ expr .)
    INTNUM          reduce using rule 44 (expr -> expr EQ expr .)
    FLOATNUM        reduce using rule 44 (expr -> expr EQ expr .)
    STRING          reduce using rule 44 (expr -> expr EQ expr .)
    ID              reduce using rule 44 (expr -> expr EQ expr .)
    (               reduce using rule 44 (expr -> expr EQ expr .)
    [               reduce using rule 44 (expr -> expr EQ expr .)
    BREAK           reduce using rule 44 (expr -> expr EQ expr .)
    CONTINUE        reduce using rule 44 (expr -> expr EQ expr .)
    RETURN          reduce using rule 44 (expr -> expr EQ expr .)
    PRINT           reduce using rule 44 (expr -> expr EQ expr .)
    IF              reduce using rule 44 (expr -> expr EQ expr .)
    WHILE           reduce using rule 44 (expr -> expr EQ expr .)
    FOR             reduce using rule 44 (expr -> expr EQ expr .)
    '               shift and go to state 28
    +               shift and go to state 29
    -               shift and go to state 30
    *               shift and go to state 31
    /               shift and go to state 32
    MPLUS           shift and go to state 33
    MMINUS          shift and go to state 34
    MMLTP           shift and go to state 35
    MDIV            shift and go to state 36
    EQ              shift and go to state 37
    NEQ             shift and go to state 38
    GTEQ            shift and go to state 39
    LTEQ            shift and go to state 40
    >               shift and go to state 41
    <               shift and go to state 42

  ! '               [ reduce using rule 44 (expr -> expr EQ expr .) ]
  ! +               [ reduce using rule 44 (expr -> expr EQ expr .) ]
  ! -               [ reduce using rule 44 (expr -> expr EQ expr .) ]
  ! *               [ reduce using rule 44 (expr -> expr EQ expr .) ]
  ! /               [ reduce using rule 44 (expr -> expr EQ expr .) ]
  ! MPLUS           [ reduce using rule 44 (expr -> expr EQ expr .) ]
  ! MMINUS          [ reduce using rule 44 (expr -> expr EQ expr .) ]
  ! MMLTP           [ reduce using rule 44 (expr -> expr EQ expr .) ]
  ! MDIV            [ reduce using rule 44 (expr -> expr EQ expr .) ]
  ! EQ              [ reduce using rule 44 (expr -> expr EQ expr .) ]
  ! NEQ             [ reduce using rule 44 (expr -> expr EQ expr .) ]
  ! GTEQ            [ reduce using rule 44 (expr -> expr EQ expr .) ]
  ! LTEQ            [ reduce using rule 44 (expr -> expr EQ expr .) ]
  ! >               [ reduce using rule 44 (expr -> expr EQ expr .) ]
  ! <               [ reduce using rule 44 (expr -> expr EQ expr .) ]


state 72

    (45) expr -> expr NEQ expr .
    (14) expr -> expr . '
    (36) expr -> expr . + expr
    (37) expr -> expr . - expr
    (38) expr -> expr . * expr
    (39) expr -> expr . / expr
    (40) expr -> expr . MPLUS expr
    (41) expr -> expr . MMINUS expr
    (42) expr -> expr . MMLTP expr
    (43) expr -> expr . MDIV expr
    (44) expr -> expr . EQ expr
    (45) expr -> expr . NEQ expr
    (46) expr -> expr . GTEQ expr
    (47) expr -> expr . LTEQ expr
    (48) expr -> expr . > expr
    (49) expr -> expr . < expr

  ! shift/reduce conflict for ' resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for MPLUS resolved as shift
  ! shift/reduce conflict for MMINUS resolved as shift
  ! shift/reduce conflict for MMLTP resolved as shift
  ! shift/reduce conflict for MDIV resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for GTEQ resolved as shift
  ! shift/reduce conflict for LTEQ resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for < resolved as shift
    ;               reduce using rule 45 (expr -> expr NEQ expr .)
    )               reduce using rule 45 (expr -> expr NEQ expr .)
    ]               reduce using rule 45 (expr -> expr NEQ expr .)
    ,               reduce using rule 45 (expr -> expr NEQ expr .)
    :               reduce using rule 45 (expr -> expr NEQ expr .)
    {               reduce using rule 45 (expr -> expr NEQ expr .)
    INTNUM          reduce using rule 45 (expr -> expr NEQ expr .)
    FLOATNUM        reduce using rule 45 (expr -> expr NEQ expr .)
    STRING          reduce using rule 45 (expr -> expr NEQ expr .)
    ID              reduce using rule 45 (expr -> expr NEQ expr .)
    (               reduce using rule 45 (expr -> expr NEQ expr .)
    [               reduce using rule 45 (expr -> expr NEQ expr .)
    BREAK           reduce using rule 45 (expr -> expr NEQ expr .)
    CONTINUE        reduce using rule 45 (expr -> expr NEQ expr .)
    RETURN          reduce using rule 45 (expr -> expr NEQ expr .)
    PRINT           reduce using rule 45 (expr -> expr NEQ expr .)
    IF              reduce using rule 45 (expr -> expr NEQ expr .)
    WHILE           reduce using rule 45 (expr -> expr NEQ expr .)
    FOR             reduce using rule 45 (expr -> expr NEQ expr .)
    '               shift and go to state 28
    +               shift and go to state 29
    -               shift and go to state 30
    *               shift and go to state 31
    /               shift and go to state 32
    MPLUS           shift and go to state 33
    MMINUS          shift and go to state 34
    MMLTP           shift and go to state 35
    MDIV            shift and go to state 36
    EQ              shift and go to state 37
    NEQ             shift and go to state 38
    GTEQ            shift and go to state 39
    LTEQ            shift and go to state 40
    >               shift and go to state 41
    <               shift and go to state 42

  ! '               [ reduce using rule 45 (expr -> expr NEQ expr .) ]
  ! +               [ reduce using rule 45 (expr -> expr NEQ expr .) ]
  ! -               [ reduce using rule 45 (expr -> expr NEQ expr .) ]
  ! *               [ reduce using rule 45 (expr -> expr NEQ expr .) ]
  ! /               [ reduce using rule 45 (expr -> expr NEQ expr .) ]
  ! MPLUS           [ reduce using rule 45 (expr -> expr NEQ expr .) ]
  ! MMINUS          [ reduce using rule 45 (expr -> expr NEQ expr .) ]
  ! MMLTP           [ reduce using rule 45 (expr -> expr NEQ expr .) ]
  ! MDIV            [ reduce using rule 45 (expr -> expr NEQ expr .) ]
  ! EQ              [ reduce using rule 45 (expr -> expr NEQ expr .) ]
  ! NEQ             [ reduce using rule 45 (expr -> expr NEQ expr .) ]
  ! GTEQ            [ reduce using rule 45 (expr -> expr NEQ expr .) ]
  ! LTEQ            [ reduce using rule 45 (expr -> expr NEQ expr .) ]
  ! >               [ reduce using rule 45 (expr -> expr NEQ expr .) ]
  ! <               [ reduce using rule 45 (expr -> expr NEQ expr .) ]


state 73

    (46) expr -> expr GTEQ expr .
    (14) expr -> expr . '
    (36) expr -> expr . + expr
    (37) expr -> expr . - expr
    (38) expr -> expr . * expr
    (39) expr -> expr . / expr
    (40) expr -> expr . MPLUS expr
    (41) expr -> expr . MMINUS expr
    (42) expr -> expr . MMLTP expr
    (43) expr -> expr . MDIV expr
    (44) expr -> expr . EQ expr
    (45) expr -> expr . NEQ expr
    (46) expr -> expr . GTEQ expr
    (47) expr -> expr . LTEQ expr
    (48) expr -> expr . > expr
    (49) expr -> expr . < expr

  ! shift/reduce conflict for ' resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for MPLUS resolved as shift
  ! shift/reduce conflict for MMINUS resolved as shift
  ! shift/reduce conflict for MMLTP resolved as shift
  ! shift/reduce conflict for MDIV resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for GTEQ resolved as shift
  ! shift/reduce conflict for LTEQ resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for < resolved as shift
    ;               reduce using rule 46 (expr -> expr GTEQ expr .)
    )               reduce using rule 46 (expr -> expr GTEQ expr .)
    ]               reduce using rule 46 (expr -> expr GTEQ expr .)
    ,               reduce using rule 46 (expr -> expr GTEQ expr .)
    :               reduce using rule 46 (expr -> expr GTEQ expr .)
    {               reduce using rule 46 (expr -> expr GTEQ expr .)
    INTNUM          reduce using rule 46 (expr -> expr GTEQ expr .)
    FLOATNUM        reduce using rule 46 (expr -> expr GTEQ expr .)
    STRING          reduce using rule 46 (expr -> expr GTEQ expr .)
    ID              reduce using rule 46 (expr -> expr GTEQ expr .)
    (               reduce using rule 46 (expr -> expr GTEQ expr .)
    [               reduce using rule 46 (expr -> expr GTEQ expr .)
    BREAK           reduce using rule 46 (expr -> expr GTEQ expr .)
    CONTINUE        reduce using rule 46 (expr -> expr GTEQ expr .)
    RETURN          reduce using rule 46 (expr -> expr GTEQ expr .)
    PRINT           reduce using rule 46 (expr -> expr GTEQ expr .)
    IF              reduce using rule 46 (expr -> expr GTEQ expr .)
    WHILE           reduce using rule 46 (expr -> expr GTEQ expr .)
    FOR             reduce using rule 46 (expr -> expr GTEQ expr .)
    '               shift and go to state 28
    +               shift and go to state 29
    -               shift and go to state 30
    *               shift and go to state 31
    /               shift and go to state 32
    MPLUS           shift and go to state 33
    MMINUS          shift and go to state 34
    MMLTP           shift and go to state 35
    MDIV            shift and go to state 36
    EQ              shift and go to state 37
    NEQ             shift and go to state 38
    GTEQ            shift and go to state 39
    LTEQ            shift and go to state 40
    >               shift and go to state 41
    <               shift and go to state 42

  ! '               [ reduce using rule 46 (expr -> expr GTEQ expr .) ]
  ! +               [ reduce using rule 46 (expr -> expr GTEQ expr .) ]
  ! -               [ reduce using rule 46 (expr -> expr GTEQ expr .) ]
  ! *               [ reduce using rule 46 (expr -> expr GTEQ expr .) ]
  ! /               [ reduce using rule 46 (expr -> expr GTEQ expr .) ]
  ! MPLUS           [ reduce using rule 46 (expr -> expr GTEQ expr .) ]
  ! MMINUS          [ reduce using rule 46 (expr -> expr GTEQ expr .) ]
  ! MMLTP           [ reduce using rule 46 (expr -> expr GTEQ expr .) ]
  ! MDIV            [ reduce using rule 46 (expr -> expr GTEQ expr .) ]
  ! EQ              [ reduce using rule 46 (expr -> expr GTEQ expr .) ]
  ! NEQ             [ reduce using rule 46 (expr -> expr GTEQ expr .) ]
  ! GTEQ            [ reduce using rule 46 (expr -> expr GTEQ expr .) ]
  ! LTEQ            [ reduce using rule 46 (expr -> expr GTEQ expr .) ]
  ! >               [ reduce using rule 46 (expr -> expr GTEQ expr .) ]
  ! <               [ reduce using rule 46 (expr -> expr GTEQ expr .) ]


state 74

    (47) expr -> expr LTEQ expr .
    (14) expr -> expr . '
    (36) expr -> expr . + expr
    (37) expr -> expr . - expr
    (38) expr -> expr . * expr
    (39) expr -> expr . / expr
    (40) expr -> expr . MPLUS expr
    (41) expr -> expr . MMINUS expr
    (42) expr -> expr . MMLTP expr
    (43) expr -> expr . MDIV expr
    (44) expr -> expr . EQ expr
    (45) expr -> expr . NEQ expr
    (46) expr -> expr . GTEQ expr
    (47) expr -> expr . LTEQ expr
    (48) expr -> expr . > expr
    (49) expr -> expr . < expr

  ! shift/reduce conflict for ' resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for MPLUS resolved as shift
  ! shift/reduce conflict for MMINUS resolved as shift
  ! shift/reduce conflict for MMLTP resolved as shift
  ! shift/reduce conflict for MDIV resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for GTEQ resolved as shift
  ! shift/reduce conflict for LTEQ resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for < resolved as shift
    ;               reduce using rule 47 (expr -> expr LTEQ expr .)
    )               reduce using rule 47 (expr -> expr LTEQ expr .)
    ]               reduce using rule 47 (expr -> expr LTEQ expr .)
    ,               reduce using rule 47 (expr -> expr LTEQ expr .)
    :               reduce using rule 47 (expr -> expr LTEQ expr .)
    {               reduce using rule 47 (expr -> expr LTEQ expr .)
    INTNUM          reduce using rule 47 (expr -> expr LTEQ expr .)
    FLOATNUM        reduce using rule 47 (expr -> expr LTEQ expr .)
    STRING          reduce using rule 47 (expr -> expr LTEQ expr .)
    ID              reduce using rule 47 (expr -> expr LTEQ expr .)
    (               reduce using rule 47 (expr -> expr LTEQ expr .)
    [               reduce using rule 47 (expr -> expr LTEQ expr .)
    BREAK           reduce using rule 47 (expr -> expr LTEQ expr .)
    CONTINUE        reduce using rule 47 (expr -> expr LTEQ expr .)
    RETURN          reduce using rule 47 (expr -> expr LTEQ expr .)
    PRINT           reduce using rule 47 (expr -> expr LTEQ expr .)
    IF              reduce using rule 47 (expr -> expr LTEQ expr .)
    WHILE           reduce using rule 47 (expr -> expr LTEQ expr .)
    FOR             reduce using rule 47 (expr -> expr LTEQ expr .)
    '               shift and go to state 28
    +               shift and go to state 29
    -               shift and go to state 30
    *               shift and go to state 31
    /               shift and go to state 32
    MPLUS           shift and go to state 33
    MMINUS          shift and go to state 34
    MMLTP           shift and go to state 35
    MDIV            shift and go to state 36
    EQ              shift and go to state 37
    NEQ             shift and go to state 38
    GTEQ            shift and go to state 39
    LTEQ            shift and go to state 40
    >               shift and go to state 41
    <               shift and go to state 42

  ! '               [ reduce using rule 47 (expr -> expr LTEQ expr .) ]
  ! +               [ reduce using rule 47 (expr -> expr LTEQ expr .) ]
  ! -               [ reduce using rule 47 (expr -> expr LTEQ expr .) ]
  ! *               [ reduce using rule 47 (expr -> expr LTEQ expr .) ]
  ! /               [ reduce using rule 47 (expr -> expr LTEQ expr .) ]
  ! MPLUS           [ reduce using rule 47 (expr -> expr LTEQ expr .) ]
  ! MMINUS          [ reduce using rule 47 (expr -> expr LTEQ expr .) ]
  ! MMLTP           [ reduce using rule 47 (expr -> expr LTEQ expr .) ]
  ! MDIV            [ reduce using rule 47 (expr -> expr LTEQ expr .) ]
  ! EQ              [ reduce using rule 47 (expr -> expr LTEQ expr .) ]
  ! NEQ             [ reduce using rule 47 (expr -> expr LTEQ expr .) ]
  ! GTEQ            [ reduce using rule 47 (expr -> expr LTEQ expr .) ]
  ! LTEQ            [ reduce using rule 47 (expr -> expr LTEQ expr .) ]
  ! >               [ reduce using rule 47 (expr -> expr LTEQ expr .) ]
  ! <               [ reduce using rule 47 (expr -> expr LTEQ expr .) ]


state 75

    (48) expr -> expr > expr .
    (14) expr -> expr . '
    (36) expr -> expr . + expr
    (37) expr -> expr . - expr
    (38) expr -> expr . * expr
    (39) expr -> expr . / expr
    (40) expr -> expr . MPLUS expr
    (41) expr -> expr . MMINUS expr
    (42) expr -> expr . MMLTP expr
    (43) expr -> expr . MDIV expr
    (44) expr -> expr . EQ expr
    (45) expr -> expr . NEQ expr
    (46) expr -> expr . GTEQ expr
    (47) expr -> expr . LTEQ expr
    (48) expr -> expr . > expr
    (49) expr -> expr . < expr

  ! shift/reduce conflict for ' resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for MPLUS resolved as shift
  ! shift/reduce conflict for MMINUS resolved as shift
  ! shift/reduce conflict for MMLTP resolved as shift
  ! shift/reduce conflict for MDIV resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for GTEQ resolved as shift
  ! shift/reduce conflict for LTEQ resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for < resolved as shift
    ;               reduce using rule 48 (expr -> expr > expr .)
    )               reduce using rule 48 (expr -> expr > expr .)
    ]               reduce using rule 48 (expr -> expr > expr .)
    ,               reduce using rule 48 (expr -> expr > expr .)
    :               reduce using rule 48 (expr -> expr > expr .)
    {               reduce using rule 48 (expr -> expr > expr .)
    INTNUM          reduce using rule 48 (expr -> expr > expr .)
    FLOATNUM        reduce using rule 48 (expr -> expr > expr .)
    STRING          reduce using rule 48 (expr -> expr > expr .)
    ID              reduce using rule 48 (expr -> expr > expr .)
    (               reduce using rule 48 (expr -> expr > expr .)
    [               reduce using rule 48 (expr -> expr > expr .)
    BREAK           reduce using rule 48 (expr -> expr > expr .)
    CONTINUE        reduce using rule 48 (expr -> expr > expr .)
    RETURN          reduce using rule 48 (expr -> expr > expr .)
    PRINT           reduce using rule 48 (expr -> expr > expr .)
    IF              reduce using rule 48 (expr -> expr > expr .)
    WHILE           reduce using rule 48 (expr -> expr > expr .)
    FOR             reduce using rule 48 (expr -> expr > expr .)
    '               shift and go to state 28
    +               shift and go to state 29
    -               shift and go to state 30
    *               shift and go to state 31
    /               shift and go to state 32
    MPLUS           shift and go to state 33
    MMINUS          shift and go to state 34
    MMLTP           shift and go to state 35
    MDIV            shift and go to state 36
    EQ              shift and go to state 37
    NEQ             shift and go to state 38
    GTEQ            shift and go to state 39
    LTEQ            shift and go to state 40
    >               shift and go to state 41
    <               shift and go to state 42

  ! '               [ reduce using rule 48 (expr -> expr > expr .) ]
  ! +               [ reduce using rule 48 (expr -> expr > expr .) ]
  ! -               [ reduce using rule 48 (expr -> expr > expr .) ]
  ! *               [ reduce using rule 48 (expr -> expr > expr .) ]
  ! /               [ reduce using rule 48 (expr -> expr > expr .) ]
  ! MPLUS           [ reduce using rule 48 (expr -> expr > expr .) ]
  ! MMINUS          [ reduce using rule 48 (expr -> expr > expr .) ]
  ! MMLTP           [ reduce using rule 48 (expr -> expr > expr .) ]
  ! MDIV            [ reduce using rule 48 (expr -> expr > expr .) ]
  ! EQ              [ reduce using rule 48 (expr -> expr > expr .) ]
  ! NEQ             [ reduce using rule 48 (expr -> expr > expr .) ]
  ! GTEQ            [ reduce using rule 48 (expr -> expr > expr .) ]
  ! LTEQ            [ reduce using rule 48 (expr -> expr > expr .) ]
  ! >               [ reduce using rule 48 (expr -> expr > expr .) ]
  ! <               [ reduce using rule 48 (expr -> expr > expr .) ]


state 76

    (49) expr -> expr < expr .
    (14) expr -> expr . '
    (36) expr -> expr . + expr
    (37) expr -> expr . - expr
    (38) expr -> expr . * expr
    (39) expr -> expr . / expr
    (40) expr -> expr . MPLUS expr
    (41) expr -> expr . MMINUS expr
    (42) expr -> expr . MMLTP expr
    (43) expr -> expr . MDIV expr
    (44) expr -> expr . EQ expr
    (45) expr -> expr . NEQ expr
    (46) expr -> expr . GTEQ expr
    (47) expr -> expr . LTEQ expr
    (48) expr -> expr . > expr
    (49) expr -> expr . < expr

  ! shift/reduce conflict for ' resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for MPLUS resolved as shift
  ! shift/reduce conflict for MMINUS resolved as shift
  ! shift/reduce conflict for MMLTP resolved as shift
  ! shift/reduce conflict for MDIV resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for GTEQ resolved as shift
  ! shift/reduce conflict for LTEQ resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for < resolved as shift
    ;               reduce using rule 49 (expr -> expr < expr .)
    )               reduce using rule 49 (expr -> expr < expr .)
    ]               reduce using rule 49 (expr -> expr < expr .)
    ,               reduce using rule 49 (expr -> expr < expr .)
    :               reduce using rule 49 (expr -> expr < expr .)
    {               reduce using rule 49 (expr -> expr < expr .)
    INTNUM          reduce using rule 49 (expr -> expr < expr .)
    FLOATNUM        reduce using rule 49 (expr -> expr < expr .)
    STRING          reduce using rule 49 (expr -> expr < expr .)
    ID              reduce using rule 49 (expr -> expr < expr .)
    (               reduce using rule 49 (expr -> expr < expr .)
    [               reduce using rule 49 (expr -> expr < expr .)
    BREAK           reduce using rule 49 (expr -> expr < expr .)
    CONTINUE        reduce using rule 49 (expr -> expr < expr .)
    RETURN          reduce using rule 49 (expr -> expr < expr .)
    PRINT           reduce using rule 49 (expr -> expr < expr .)
    IF              reduce using rule 49 (expr -> expr < expr .)
    WHILE           reduce using rule 49 (expr -> expr < expr .)
    FOR             reduce using rule 49 (expr -> expr < expr .)
    '               shift and go to state 28
    +               shift and go to state 29
    -               shift and go to state 30
    *               shift and go to state 31
    /               shift and go to state 32
    MPLUS           shift and go to state 33
    MMINUS          shift and go to state 34
    MMLTP           shift and go to state 35
    MDIV            shift and go to state 36
    EQ              shift and go to state 37
    NEQ             shift and go to state 38
    GTEQ            shift and go to state 39
    LTEQ            shift and go to state 40
    >               shift and go to state 41
    <               shift and go to state 42

  ! '               [ reduce using rule 49 (expr -> expr < expr .) ]
  ! +               [ reduce using rule 49 (expr -> expr < expr .) ]
  ! -               [ reduce using rule 49 (expr -> expr < expr .) ]
  ! *               [ reduce using rule 49 (expr -> expr < expr .) ]
  ! /               [ reduce using rule 49 (expr -> expr < expr .) ]
  ! MPLUS           [ reduce using rule 49 (expr -> expr < expr .) ]
  ! MMINUS          [ reduce using rule 49 (expr -> expr < expr .) ]
  ! MMLTP           [ reduce using rule 49 (expr -> expr < expr .) ]
  ! MDIV            [ reduce using rule 49 (expr -> expr < expr .) ]
  ! EQ              [ reduce using rule 49 (expr -> expr < expr .) ]
  ! NEQ             [ reduce using rule 49 (expr -> expr < expr .) ]
  ! GTEQ            [ reduce using rule 49 (expr -> expr < expr .) ]
  ! LTEQ            [ reduce using rule 49 (expr -> expr < expr .) ]
  ! >               [ reduce using rule 49 (expr -> expr < expr .) ]
  ! <               [ reduce using rule 49 (expr -> expr < expr .) ]


state 77

    (18) expr -> ID = expr .
    (14) expr -> expr . '
    (36) expr -> expr . + expr
    (37) expr -> expr . - expr
    (38) expr -> expr . * expr
    (39) expr -> expr . / expr
    (40) expr -> expr . MPLUS expr
    (41) expr -> expr . MMINUS expr
    (42) expr -> expr . MMLTP expr
    (43) expr -> expr . MDIV expr
    (44) expr -> expr . EQ expr
    (45) expr -> expr . NEQ expr
    (46) expr -> expr . GTEQ expr
    (47) expr -> expr . LTEQ expr
    (48) expr -> expr . > expr
    (49) expr -> expr . < expr

    ;               reduce using rule 18 (expr -> ID = expr .)
    EQ              reduce using rule 18 (expr -> ID = expr .)
    NEQ             reduce using rule 18 (expr -> ID = expr .)
    GTEQ            reduce using rule 18 (expr -> ID = expr .)
    LTEQ            reduce using rule 18 (expr -> ID = expr .)
    >               reduce using rule 18 (expr -> ID = expr .)
    <               reduce using rule 18 (expr -> ID = expr .)
    )               reduce using rule 18 (expr -> ID = expr .)
    ]               reduce using rule 18 (expr -> ID = expr .)
    ,               reduce using rule 18 (expr -> ID = expr .)
    :               reduce using rule 18 (expr -> ID = expr .)
    {               reduce using rule 18 (expr -> ID = expr .)
    INTNUM          reduce using rule 18 (expr -> ID = expr .)
    FLOATNUM        reduce using rule 18 (expr -> ID = expr .)
    STRING          reduce using rule 18 (expr -> ID = expr .)
    ID              reduce using rule 18 (expr -> ID = expr .)
    (               reduce using rule 18 (expr -> ID = expr .)
    [               reduce using rule 18 (expr -> ID = expr .)
    BREAK           reduce using rule 18 (expr -> ID = expr .)
    CONTINUE        reduce using rule 18 (expr -> ID = expr .)
    RETURN          reduce using rule 18 (expr -> ID = expr .)
    PRINT           reduce using rule 18 (expr -> ID = expr .)
    IF              reduce using rule 18 (expr -> ID = expr .)
    WHILE           reduce using rule 18 (expr -> ID = expr .)
    FOR             reduce using rule 18 (expr -> ID = expr .)
    '               shift and go to state 28
    +               shift and go to state 29
    -               shift and go to state 30
    *               shift and go to state 31
    /               shift and go to state 32
    MPLUS           shift and go to state 33
    MMINUS          shift and go to state 34
    MMLTP           shift and go to state 35
    MDIV            shift and go to state 36

  ! '               [ reduce using rule 18 (expr -> ID = expr .) ]
  ! +               [ reduce using rule 18 (expr -> ID = expr .) ]
  ! -               [ reduce using rule 18 (expr -> ID = expr .) ]
  ! *               [ reduce using rule 18 (expr -> ID = expr .) ]
  ! /               [ reduce using rule 18 (expr -> ID = expr .) ]
  ! MPLUS           [ reduce using rule 18 (expr -> ID = expr .) ]
  ! MMINUS          [ reduce using rule 18 (expr -> ID = expr .) ]
  ! MMLTP           [ reduce using rule 18 (expr -> ID = expr .) ]
  ! MDIV            [ reduce using rule 18 (expr -> ID = expr .) ]
  ! EQ              [ shift and go to state 37 ]
  ! NEQ             [ shift and go to state 38 ]
  ! GTEQ            [ shift and go to state 39 ]
  ! LTEQ            [ shift and go to state 40 ]
  ! >               [ shift and go to state 41 ]
  ! <               [ shift and go to state 42 ]


state 78

    (33) expr -> ID = ZEROS . ( INTNUM )

    (               shift and go to state 98


state 79

    (34) expr -> ID = ONES . ( INTNUM )

    (               shift and go to state 99


state 80

    (35) expr -> ID = EYE . ( INTNUM )

    (               shift and go to state 100


state 81

    (19) expr -> ID PLUSASSIGN expr .
    (14) expr -> expr . '
    (36) expr -> expr . + expr
    (37) expr -> expr . - expr
    (38) expr -> expr . * expr
    (39) expr -> expr . / expr
    (40) expr -> expr . MPLUS expr
    (41) expr -> expr . MMINUS expr
    (42) expr -> expr . MMLTP expr
    (43) expr -> expr . MDIV expr
    (44) expr -> expr . EQ expr
    (45) expr -> expr . NEQ expr
    (46) expr -> expr . GTEQ expr
    (47) expr -> expr . LTEQ expr
    (48) expr -> expr . > expr
    (49) expr -> expr . < expr

    ;               reduce using rule 19 (expr -> ID PLUSASSIGN expr .)
    EQ              reduce using rule 19 (expr -> ID PLUSASSIGN expr .)
    NEQ             reduce using rule 19 (expr -> ID PLUSASSIGN expr .)
    GTEQ            reduce using rule 19 (expr -> ID PLUSASSIGN expr .)
    LTEQ            reduce using rule 19 (expr -> ID PLUSASSIGN expr .)
    >               reduce using rule 19 (expr -> ID PLUSASSIGN expr .)
    <               reduce using rule 19 (expr -> ID PLUSASSIGN expr .)
    )               reduce using rule 19 (expr -> ID PLUSASSIGN expr .)
    ]               reduce using rule 19 (expr -> ID PLUSASSIGN expr .)
    ,               reduce using rule 19 (expr -> ID PLUSASSIGN expr .)
    :               reduce using rule 19 (expr -> ID PLUSASSIGN expr .)
    {               reduce using rule 19 (expr -> ID PLUSASSIGN expr .)
    INTNUM          reduce using rule 19 (expr -> ID PLUSASSIGN expr .)
    FLOATNUM        reduce using rule 19 (expr -> ID PLUSASSIGN expr .)
    STRING          reduce using rule 19 (expr -> ID PLUSASSIGN expr .)
    ID              reduce using rule 19 (expr -> ID PLUSASSIGN expr .)
    (               reduce using rule 19 (expr -> ID PLUSASSIGN expr .)
    [               reduce using rule 19 (expr -> ID PLUSASSIGN expr .)
    BREAK           reduce using rule 19 (expr -> ID PLUSASSIGN expr .)
    CONTINUE        reduce using rule 19 (expr -> ID PLUSASSIGN expr .)
    RETURN          reduce using rule 19 (expr -> ID PLUSASSIGN expr .)
    PRINT           reduce using rule 19 (expr -> ID PLUSASSIGN expr .)
    IF              reduce using rule 19 (expr -> ID PLUSASSIGN expr .)
    WHILE           reduce using rule 19 (expr -> ID PLUSASSIGN expr .)
    FOR             reduce using rule 19 (expr -> ID PLUSASSIGN expr .)
    '               shift and go to state 28
    +               shift and go to state 29
    -               shift and go to state 30
    *               shift and go to state 31
    /               shift and go to state 32
    MPLUS           shift and go to state 33
    MMINUS          shift and go to state 34
    MMLTP           shift and go to state 35
    MDIV            shift and go to state 36

  ! '               [ reduce using rule 19 (expr -> ID PLUSASSIGN expr .) ]
  ! +               [ reduce using rule 19 (expr -> ID PLUSASSIGN expr .) ]
  ! -               [ reduce using rule 19 (expr -> ID PLUSASSIGN expr .) ]
  ! *               [ reduce using rule 19 (expr -> ID PLUSASSIGN expr .) ]
  ! /               [ reduce using rule 19 (expr -> ID PLUSASSIGN expr .) ]
  ! MPLUS           [ reduce using rule 19 (expr -> ID PLUSASSIGN expr .) ]
  ! MMINUS          [ reduce using rule 19 (expr -> ID PLUSASSIGN expr .) ]
  ! MMLTP           [ reduce using rule 19 (expr -> ID PLUSASSIGN expr .) ]
  ! MDIV            [ reduce using rule 19 (expr -> ID PLUSASSIGN expr .) ]
  ! EQ              [ shift and go to state 37 ]
  ! NEQ             [ shift and go to state 38 ]
  ! GTEQ            [ shift and go to state 39 ]
  ! LTEQ            [ shift and go to state 40 ]
  ! >               [ shift and go to state 41 ]
  ! <               [ shift and go to state 42 ]


state 82

    (20) expr -> ID MINASSIGN expr .
    (14) expr -> expr . '
    (36) expr -> expr . + expr
    (37) expr -> expr . - expr
    (38) expr -> expr . * expr
    (39) expr -> expr . / expr
    (40) expr -> expr . MPLUS expr
    (41) expr -> expr . MMINUS expr
    (42) expr -> expr . MMLTP expr
    (43) expr -> expr . MDIV expr
    (44) expr -> expr . EQ expr
    (45) expr -> expr . NEQ expr
    (46) expr -> expr . GTEQ expr
    (47) expr -> expr . LTEQ expr
    (48) expr -> expr . > expr
    (49) expr -> expr . < expr

    ;               reduce using rule 20 (expr -> ID MINASSIGN expr .)
    EQ              reduce using rule 20 (expr -> ID MINASSIGN expr .)
    NEQ             reduce using rule 20 (expr -> ID MINASSIGN expr .)
    GTEQ            reduce using rule 20 (expr -> ID MINASSIGN expr .)
    LTEQ            reduce using rule 20 (expr -> ID MINASSIGN expr .)
    >               reduce using rule 20 (expr -> ID MINASSIGN expr .)
    <               reduce using rule 20 (expr -> ID MINASSIGN expr .)
    )               reduce using rule 20 (expr -> ID MINASSIGN expr .)
    ]               reduce using rule 20 (expr -> ID MINASSIGN expr .)
    ,               reduce using rule 20 (expr -> ID MINASSIGN expr .)
    :               reduce using rule 20 (expr -> ID MINASSIGN expr .)
    {               reduce using rule 20 (expr -> ID MINASSIGN expr .)
    INTNUM          reduce using rule 20 (expr -> ID MINASSIGN expr .)
    FLOATNUM        reduce using rule 20 (expr -> ID MINASSIGN expr .)
    STRING          reduce using rule 20 (expr -> ID MINASSIGN expr .)
    ID              reduce using rule 20 (expr -> ID MINASSIGN expr .)
    (               reduce using rule 20 (expr -> ID MINASSIGN expr .)
    [               reduce using rule 20 (expr -> ID MINASSIGN expr .)
    BREAK           reduce using rule 20 (expr -> ID MINASSIGN expr .)
    CONTINUE        reduce using rule 20 (expr -> ID MINASSIGN expr .)
    RETURN          reduce using rule 20 (expr -> ID MINASSIGN expr .)
    PRINT           reduce using rule 20 (expr -> ID MINASSIGN expr .)
    IF              reduce using rule 20 (expr -> ID MINASSIGN expr .)
    WHILE           reduce using rule 20 (expr -> ID MINASSIGN expr .)
    FOR             reduce using rule 20 (expr -> ID MINASSIGN expr .)
    '               shift and go to state 28
    +               shift and go to state 29
    -               shift and go to state 30
    *               shift and go to state 31
    /               shift and go to state 32
    MPLUS           shift and go to state 33
    MMINUS          shift and go to state 34
    MMLTP           shift and go to state 35
    MDIV            shift and go to state 36

  ! '               [ reduce using rule 20 (expr -> ID MINASSIGN expr .) ]
  ! +               [ reduce using rule 20 (expr -> ID MINASSIGN expr .) ]
  ! -               [ reduce using rule 20 (expr -> ID MINASSIGN expr .) ]
  ! *               [ reduce using rule 20 (expr -> ID MINASSIGN expr .) ]
  ! /               [ reduce using rule 20 (expr -> ID MINASSIGN expr .) ]
  ! MPLUS           [ reduce using rule 20 (expr -> ID MINASSIGN expr .) ]
  ! MMINUS          [ reduce using rule 20 (expr -> ID MINASSIGN expr .) ]
  ! MMLTP           [ reduce using rule 20 (expr -> ID MINASSIGN expr .) ]
  ! MDIV            [ reduce using rule 20 (expr -> ID MINASSIGN expr .) ]
  ! EQ              [ shift and go to state 37 ]
  ! NEQ             [ shift and go to state 38 ]
  ! GTEQ            [ shift and go to state 39 ]
  ! LTEQ            [ shift and go to state 40 ]
  ! >               [ shift and go to state 41 ]
  ! <               [ shift and go to state 42 ]


state 83

    (21) expr -> ID MULTASSIGN expr .
    (14) expr -> expr . '
    (36) expr -> expr . + expr
    (37) expr -> expr . - expr
    (38) expr -> expr . * expr
    (39) expr -> expr . / expr
    (40) expr -> expr . MPLUS expr
    (41) expr -> expr . MMINUS expr
    (42) expr -> expr . MMLTP expr
    (43) expr -> expr . MDIV expr
    (44) expr -> expr . EQ expr
    (45) expr -> expr . NEQ expr
    (46) expr -> expr . GTEQ expr
    (47) expr -> expr . LTEQ expr
    (48) expr -> expr . > expr
    (49) expr -> expr . < expr

    ;               reduce using rule 21 (expr -> ID MULTASSIGN expr .)
    EQ              reduce using rule 21 (expr -> ID MULTASSIGN expr .)
    NEQ             reduce using rule 21 (expr -> ID MULTASSIGN expr .)
    GTEQ            reduce using rule 21 (expr -> ID MULTASSIGN expr .)
    LTEQ            reduce using rule 21 (expr -> ID MULTASSIGN expr .)
    >               reduce using rule 21 (expr -> ID MULTASSIGN expr .)
    <               reduce using rule 21 (expr -> ID MULTASSIGN expr .)
    )               reduce using rule 21 (expr -> ID MULTASSIGN expr .)
    ]               reduce using rule 21 (expr -> ID MULTASSIGN expr .)
    ,               reduce using rule 21 (expr -> ID MULTASSIGN expr .)
    :               reduce using rule 21 (expr -> ID MULTASSIGN expr .)
    {               reduce using rule 21 (expr -> ID MULTASSIGN expr .)
    INTNUM          reduce using rule 21 (expr -> ID MULTASSIGN expr .)
    FLOATNUM        reduce using rule 21 (expr -> ID MULTASSIGN expr .)
    STRING          reduce using rule 21 (expr -> ID MULTASSIGN expr .)
    ID              reduce using rule 21 (expr -> ID MULTASSIGN expr .)
    (               reduce using rule 21 (expr -> ID MULTASSIGN expr .)
    [               reduce using rule 21 (expr -> ID MULTASSIGN expr .)
    BREAK           reduce using rule 21 (expr -> ID MULTASSIGN expr .)
    CONTINUE        reduce using rule 21 (expr -> ID MULTASSIGN expr .)
    RETURN          reduce using rule 21 (expr -> ID MULTASSIGN expr .)
    PRINT           reduce using rule 21 (expr -> ID MULTASSIGN expr .)
    IF              reduce using rule 21 (expr -> ID MULTASSIGN expr .)
    WHILE           reduce using rule 21 (expr -> ID MULTASSIGN expr .)
    FOR             reduce using rule 21 (expr -> ID MULTASSIGN expr .)
    '               shift and go to state 28
    +               shift and go to state 29
    -               shift and go to state 30
    *               shift and go to state 31
    /               shift and go to state 32
    MPLUS           shift and go to state 33
    MMINUS          shift and go to state 34
    MMLTP           shift and go to state 35
    MDIV            shift and go to state 36

  ! '               [ reduce using rule 21 (expr -> ID MULTASSIGN expr .) ]
  ! +               [ reduce using rule 21 (expr -> ID MULTASSIGN expr .) ]
  ! -               [ reduce using rule 21 (expr -> ID MULTASSIGN expr .) ]
  ! *               [ reduce using rule 21 (expr -> ID MULTASSIGN expr .) ]
  ! /               [ reduce using rule 21 (expr -> ID MULTASSIGN expr .) ]
  ! MPLUS           [ reduce using rule 21 (expr -> ID MULTASSIGN expr .) ]
  ! MMINUS          [ reduce using rule 21 (expr -> ID MULTASSIGN expr .) ]
  ! MMLTP           [ reduce using rule 21 (expr -> ID MULTASSIGN expr .) ]
  ! MDIV            [ reduce using rule 21 (expr -> ID MULTASSIGN expr .) ]
  ! EQ              [ shift and go to state 37 ]
  ! NEQ             [ shift and go to state 38 ]
  ! GTEQ            [ shift and go to state 39 ]
  ! LTEQ            [ shift and go to state 40 ]
  ! >               [ shift and go to state 41 ]
  ! <               [ shift and go to state 42 ]


state 84

    (22) expr -> ID DIVASSIGN expr .
    (14) expr -> expr . '
    (36) expr -> expr . + expr
    (37) expr -> expr . - expr
    (38) expr -> expr . * expr
    (39) expr -> expr . / expr
    (40) expr -> expr . MPLUS expr
    (41) expr -> expr . MMINUS expr
    (42) expr -> expr . MMLTP expr
    (43) expr -> expr . MDIV expr
    (44) expr -> expr . EQ expr
    (45) expr -> expr . NEQ expr
    (46) expr -> expr . GTEQ expr
    (47) expr -> expr . LTEQ expr
    (48) expr -> expr . > expr
    (49) expr -> expr . < expr

    ;               reduce using rule 22 (expr -> ID DIVASSIGN expr .)
    EQ              reduce using rule 22 (expr -> ID DIVASSIGN expr .)
    NEQ             reduce using rule 22 (expr -> ID DIVASSIGN expr .)
    GTEQ            reduce using rule 22 (expr -> ID DIVASSIGN expr .)
    LTEQ            reduce using rule 22 (expr -> ID DIVASSIGN expr .)
    >               reduce using rule 22 (expr -> ID DIVASSIGN expr .)
    <               reduce using rule 22 (expr -> ID DIVASSIGN expr .)
    )               reduce using rule 22 (expr -> ID DIVASSIGN expr .)
    ]               reduce using rule 22 (expr -> ID DIVASSIGN expr .)
    ,               reduce using rule 22 (expr -> ID DIVASSIGN expr .)
    :               reduce using rule 22 (expr -> ID DIVASSIGN expr .)
    {               reduce using rule 22 (expr -> ID DIVASSIGN expr .)
    INTNUM          reduce using rule 22 (expr -> ID DIVASSIGN expr .)
    FLOATNUM        reduce using rule 22 (expr -> ID DIVASSIGN expr .)
    STRING          reduce using rule 22 (expr -> ID DIVASSIGN expr .)
    ID              reduce using rule 22 (expr -> ID DIVASSIGN expr .)
    (               reduce using rule 22 (expr -> ID DIVASSIGN expr .)
    [               reduce using rule 22 (expr -> ID DIVASSIGN expr .)
    BREAK           reduce using rule 22 (expr -> ID DIVASSIGN expr .)
    CONTINUE        reduce using rule 22 (expr -> ID DIVASSIGN expr .)
    RETURN          reduce using rule 22 (expr -> ID DIVASSIGN expr .)
    PRINT           reduce using rule 22 (expr -> ID DIVASSIGN expr .)
    IF              reduce using rule 22 (expr -> ID DIVASSIGN expr .)
    WHILE           reduce using rule 22 (expr -> ID DIVASSIGN expr .)
    FOR             reduce using rule 22 (expr -> ID DIVASSIGN expr .)
    '               shift and go to state 28
    +               shift and go to state 29
    -               shift and go to state 30
    *               shift and go to state 31
    /               shift and go to state 32
    MPLUS           shift and go to state 33
    MMINUS          shift and go to state 34
    MMLTP           shift and go to state 35
    MDIV            shift and go to state 36

  ! '               [ reduce using rule 22 (expr -> ID DIVASSIGN expr .) ]
  ! +               [ reduce using rule 22 (expr -> ID DIVASSIGN expr .) ]
  ! -               [ reduce using rule 22 (expr -> ID DIVASSIGN expr .) ]
  ! *               [ reduce using rule 22 (expr -> ID DIVASSIGN expr .) ]
  ! /               [ reduce using rule 22 (expr -> ID DIVASSIGN expr .) ]
  ! MPLUS           [ reduce using rule 22 (expr -> ID DIVASSIGN expr .) ]
  ! MMINUS          [ reduce using rule 22 (expr -> ID DIVASSIGN expr .) ]
  ! MMLTP           [ reduce using rule 22 (expr -> ID DIVASSIGN expr .) ]
  ! MDIV            [ reduce using rule 22 (expr -> ID DIVASSIGN expr .) ]
  ! EQ              [ shift and go to state 37 ]
  ! NEQ             [ shift and go to state 38 ]
  ! GTEQ            [ shift and go to state 39 ]
  ! LTEQ            [ shift and go to state 40 ]
  ! >               [ shift and go to state 41 ]
  ! <               [ shift and go to state 42 ]


state 85

    (23) expr -> ID [ INTNUM . ] = expr
    (24) expr -> ID [ INTNUM . ] PLUSASSIGN expr
    (25) expr -> ID [ INTNUM . ] MINASSIGN expr
    (26) expr -> ID [ INTNUM . ] MULTASSIGN expr
    (27) expr -> ID [ INTNUM . ] DIVASSIGN expr
    (28) expr -> ID [ INTNUM . , INTNUM ] = expr
    (29) expr -> ID [ INTNUM . , INTNUM ] PLUSASSIGN expr
    (30) expr -> ID [ INTNUM . , INTNUM ] MINASSIGN expr
    (31) expr -> ID [ INTNUM . , INTNUM ] MULTASSIGN expr
    (32) expr -> ID [ INTNUM . , INTNUM ] DIVASSIGN expr

    ]               shift and go to state 101
    ,               shift and go to state 102


state 86

    (12) expr -> ( expr ) .

    ;               reduce using rule 12 (expr -> ( expr ) .)
    '               reduce using rule 12 (expr -> ( expr ) .)
    +               reduce using rule 12 (expr -> ( expr ) .)
    -               reduce using rule 12 (expr -> ( expr ) .)
    *               reduce using rule 12 (expr -> ( expr ) .)
    /               reduce using rule 12 (expr -> ( expr ) .)
    MPLUS           reduce using rule 12 (expr -> ( expr ) .)
    MMINUS          reduce using rule 12 (expr -> ( expr ) .)
    MMLTP           reduce using rule 12 (expr -> ( expr ) .)
    MDIV            reduce using rule 12 (expr -> ( expr ) .)
    EQ              reduce using rule 12 (expr -> ( expr ) .)
    NEQ             reduce using rule 12 (expr -> ( expr ) .)
    GTEQ            reduce using rule 12 (expr -> ( expr ) .)
    LTEQ            reduce using rule 12 (expr -> ( expr ) .)
    >               reduce using rule 12 (expr -> ( expr ) .)
    <               reduce using rule 12 (expr -> ( expr ) .)
    )               reduce using rule 12 (expr -> ( expr ) .)
    ]               reduce using rule 12 (expr -> ( expr ) .)
    ,               reduce using rule 12 (expr -> ( expr ) .)
    :               reduce using rule 12 (expr -> ( expr ) .)
    {               reduce using rule 12 (expr -> ( expr ) .)
    INTNUM          reduce using rule 12 (expr -> ( expr ) .)
    FLOATNUM        reduce using rule 12 (expr -> ( expr ) .)
    STRING          reduce using rule 12 (expr -> ( expr ) .)
    ID              reduce using rule 12 (expr -> ( expr ) .)
    (               reduce using rule 12 (expr -> ( expr ) .)
    [               reduce using rule 12 (expr -> ( expr ) .)
    BREAK           reduce using rule 12 (expr -> ( expr ) .)
    CONTINUE        reduce using rule 12 (expr -> ( expr ) .)
    RETURN          reduce using rule 12 (expr -> ( expr ) .)
    PRINT           reduce using rule 12 (expr -> ( expr ) .)
    IF              reduce using rule 12 (expr -> ( expr ) .)
    WHILE           reduce using rule 12 (expr -> ( expr ) .)
    FOR             reduce using rule 12 (expr -> ( expr ) .)


state 87

    (17) expr -> [ array_interior ] .

    ;               reduce using rule 17 (expr -> [ array_interior ] .)
    '               reduce using rule 17 (expr -> [ array_interior ] .)
    +               reduce using rule 17 (expr -> [ array_interior ] .)
    -               reduce using rule 17 (expr -> [ array_interior ] .)
    *               reduce using rule 17 (expr -> [ array_interior ] .)
    /               reduce using rule 17 (expr -> [ array_interior ] .)
    MPLUS           reduce using rule 17 (expr -> [ array_interior ] .)
    MMINUS          reduce using rule 17 (expr -> [ array_interior ] .)
    MMLTP           reduce using rule 17 (expr -> [ array_interior ] .)
    MDIV            reduce using rule 17 (expr -> [ array_interior ] .)
    EQ              reduce using rule 17 (expr -> [ array_interior ] .)
    NEQ             reduce using rule 17 (expr -> [ array_interior ] .)
    GTEQ            reduce using rule 17 (expr -> [ array_interior ] .)
    LTEQ            reduce using rule 17 (expr -> [ array_interior ] .)
    >               reduce using rule 17 (expr -> [ array_interior ] .)
    <               reduce using rule 17 (expr -> [ array_interior ] .)
    )               reduce using rule 17 (expr -> [ array_interior ] .)
    ]               reduce using rule 17 (expr -> [ array_interior ] .)
    ,               reduce using rule 17 (expr -> [ array_interior ] .)
    :               reduce using rule 17 (expr -> [ array_interior ] .)
    {               reduce using rule 17 (expr -> [ array_interior ] .)
    INTNUM          reduce using rule 17 (expr -> [ array_interior ] .)
    FLOATNUM        reduce using rule 17 (expr -> [ array_interior ] .)
    STRING          reduce using rule 17 (expr -> [ array_interior ] .)
    ID              reduce using rule 17 (expr -> [ array_interior ] .)
    (               reduce using rule 17 (expr -> [ array_interior ] .)
    [               reduce using rule 17 (expr -> [ array_interior ] .)
    BREAK           reduce using rule 17 (expr -> [ array_interior ] .)
    CONTINUE        reduce using rule 17 (expr -> [ array_interior ] .)
    RETURN          reduce using rule 17 (expr -> [ array_interior ] .)
    PRINT           reduce using rule 17 (expr -> [ array_interior ] .)
    IF              reduce using rule 17 (expr -> [ array_interior ] .)
    WHILE           reduce using rule 17 (expr -> [ array_interior ] .)
    FOR             reduce using rule 17 (expr -> [ array_interior ] .)


state 88

    (15) array_interior -> array_interior , . expr
    (8) expr -> . INTNUM
    (9) expr -> . FLOATNUM
    (10) expr -> . STRING
    (11) expr -> . ID
    (12) expr -> . ( expr )
    (13) expr -> . - expr
    (14) expr -> . expr '
    (17) expr -> . [ array_interior ]
    (18) expr -> . ID = expr
    (19) expr -> . ID PLUSASSIGN expr
    (20) expr -> . ID MINASSIGN expr
    (21) expr -> . ID MULTASSIGN expr
    (22) expr -> . ID DIVASSIGN expr
    (23) expr -> . ID [ INTNUM ] = expr
    (24) expr -> . ID [ INTNUM ] PLUSASSIGN expr
    (25) expr -> . ID [ INTNUM ] MINASSIGN expr
    (26) expr -> . ID [ INTNUM ] MULTASSIGN expr
    (27) expr -> . ID [ INTNUM ] DIVASSIGN expr
    (28) expr -> . ID [ INTNUM , INTNUM ] = expr
    (29) expr -> . ID [ INTNUM , INTNUM ] PLUSASSIGN expr
    (30) expr -> . ID [ INTNUM , INTNUM ] MINASSIGN expr
    (31) expr -> . ID [ INTNUM , INTNUM ] MULTASSIGN expr
    (32) expr -> . ID [ INTNUM , INTNUM ] DIVASSIGN expr
    (33) expr -> . ID = ZEROS ( INTNUM )
    (34) expr -> . ID = ONES ( INTNUM )
    (35) expr -> . ID = EYE ( INTNUM )
    (36) expr -> . expr + expr
    (37) expr -> . expr - expr
    (38) expr -> . expr * expr
    (39) expr -> . expr / expr
    (40) expr -> . expr MPLUS expr
    (41) expr -> . expr MMINUS expr
    (42) expr -> . expr MMLTP expr
    (43) expr -> . expr MDIV expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr > expr
    (49) expr -> . expr < expr

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ID              shift and go to state 10
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13

    expr                           shift and go to state 103

state 89

    (56) cond_if -> cond_if ELSE cond_block .

    ELSE            reduce using rule 56 (cond_if -> cond_if ELSE cond_block .)
    {               reduce using rule 56 (cond_if -> cond_if ELSE cond_block .)
    INTNUM          reduce using rule 56 (cond_if -> cond_if ELSE cond_block .)
    FLOATNUM        reduce using rule 56 (cond_if -> cond_if ELSE cond_block .)
    STRING          reduce using rule 56 (cond_if -> cond_if ELSE cond_block .)
    ID              reduce using rule 56 (cond_if -> cond_if ELSE cond_block .)
    (               reduce using rule 56 (cond_if -> cond_if ELSE cond_block .)
    -               reduce using rule 56 (cond_if -> cond_if ELSE cond_block .)
    [               reduce using rule 56 (cond_if -> cond_if ELSE cond_block .)
    BREAK           reduce using rule 56 (cond_if -> cond_if ELSE cond_block .)
    CONTINUE        reduce using rule 56 (cond_if -> cond_if ELSE cond_block .)
    RETURN          reduce using rule 56 (cond_if -> cond_if ELSE cond_block .)
    PRINT           reduce using rule 56 (cond_if -> cond_if ELSE cond_block .)
    IF              reduce using rule 56 (cond_if -> cond_if ELSE cond_block .)
    WHILE           reduce using rule 56 (cond_if -> cond_if ELSE cond_block .)
    FOR             reduce using rule 56 (cond_if -> cond_if ELSE cond_block .)
    $end            reduce using rule 56 (cond_if -> cond_if ELSE cond_block .)
    }               reduce using rule 56 (cond_if -> cond_if ELSE cond_block .)


state 90

    (53) cond_block -> struct .

    ELSE            reduce using rule 53 (cond_block -> struct .)
    {               reduce using rule 53 (cond_block -> struct .)
    INTNUM          reduce using rule 53 (cond_block -> struct .)
    FLOATNUM        reduce using rule 53 (cond_block -> struct .)
    STRING          reduce using rule 53 (cond_block -> struct .)
    ID              reduce using rule 53 (cond_block -> struct .)
    (               reduce using rule 53 (cond_block -> struct .)
    -               reduce using rule 53 (cond_block -> struct .)
    [               reduce using rule 53 (cond_block -> struct .)
    BREAK           reduce using rule 53 (cond_block -> struct .)
    CONTINUE        reduce using rule 53 (cond_block -> struct .)
    RETURN          reduce using rule 53 (cond_block -> struct .)
    PRINT           reduce using rule 53 (cond_block -> struct .)
    IF              reduce using rule 53 (cond_block -> struct .)
    WHILE           reduce using rule 53 (cond_block -> struct .)
    FOR             reduce using rule 53 (cond_block -> struct .)
    $end            reduce using rule 53 (cond_block -> struct .)
    }               reduce using rule 53 (cond_block -> struct .)


state 91

    (54) cond_block -> { . start }
    (1) start -> . struct
    (2) start -> . start struct
    (3) start -> . { start }
    (4) start -> . start { start }
    (5) struct -> . expr ;
    (6) struct -> . cond_expr
    (7) struct -> . instruction
    (8) expr -> . INTNUM
    (9) expr -> . FLOATNUM
    (10) expr -> . STRING
    (11) expr -> . ID
    (12) expr -> . ( expr )
    (13) expr -> . - expr
    (14) expr -> . expr '
    (17) expr -> . [ array_interior ]
    (18) expr -> . ID = expr
    (19) expr -> . ID PLUSASSIGN expr
    (20) expr -> . ID MINASSIGN expr
    (21) expr -> . ID MULTASSIGN expr
    (22) expr -> . ID DIVASSIGN expr
    (23) expr -> . ID [ INTNUM ] = expr
    (24) expr -> . ID [ INTNUM ] PLUSASSIGN expr
    (25) expr -> . ID [ INTNUM ] MINASSIGN expr
    (26) expr -> . ID [ INTNUM ] MULTASSIGN expr
    (27) expr -> . ID [ INTNUM ] DIVASSIGN expr
    (28) expr -> . ID [ INTNUM , INTNUM ] = expr
    (29) expr -> . ID [ INTNUM , INTNUM ] PLUSASSIGN expr
    (30) expr -> . ID [ INTNUM , INTNUM ] MINASSIGN expr
    (31) expr -> . ID [ INTNUM , INTNUM ] MULTASSIGN expr
    (32) expr -> . ID [ INTNUM , INTNUM ] DIVASSIGN expr
    (33) expr -> . ID = ZEROS ( INTNUM )
    (34) expr -> . ID = ONES ( INTNUM )
    (35) expr -> . ID = EYE ( INTNUM )
    (36) expr -> . expr + expr
    (37) expr -> . expr - expr
    (38) expr -> . expr * expr
    (39) expr -> . expr / expr
    (40) expr -> . expr MPLUS expr
    (41) expr -> . expr MMINUS expr
    (42) expr -> . expr MMLTP expr
    (43) expr -> . expr MDIV expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr > expr
    (49) expr -> . expr < expr
    (50) cond_expr -> . cond_if
    (51) cond_expr -> . cond_while
    (52) cond_expr -> . cond_for
    (59) instruction -> . BREAK ;
    (60) instruction -> . CONTINUE ;
    (61) instruction -> . RETURN expr ;
    (62) instruction -> . PRINT array_interior ;
    (55) cond_if -> . IF ( expr ) cond_block
    (56) cond_if -> . cond_if ELSE cond_block
    (57) cond_while -> . WHILE ( expr ) cond_block
    (58) cond_for -> . FOR ID = expr : expr cond_block

    {               shift and go to state 3
    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ID              shift and go to state 10
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13
    BREAK           shift and go to state 17
    CONTINUE        shift and go to state 18
    RETURN          shift and go to state 19
    PRINT           shift and go to state 20
    IF              shift and go to state 21
    WHILE           shift and go to state 22
    FOR             shift and go to state 23

    start                          shift and go to state 104
    struct                         shift and go to state 2
    expr                           shift and go to state 4
    cond_expr                      shift and go to state 5
    instruction                    shift and go to state 6
    cond_if                        shift and go to state 14
    cond_while                     shift and go to state 15
    cond_for                       shift and go to state 16

state 92

    (61) instruction -> RETURN expr ; .

    {               reduce using rule 61 (instruction -> RETURN expr ; .)
    INTNUM          reduce using rule 61 (instruction -> RETURN expr ; .)
    FLOATNUM        reduce using rule 61 (instruction -> RETURN expr ; .)
    STRING          reduce using rule 61 (instruction -> RETURN expr ; .)
    ID              reduce using rule 61 (instruction -> RETURN expr ; .)
    (               reduce using rule 61 (instruction -> RETURN expr ; .)
    -               reduce using rule 61 (instruction -> RETURN expr ; .)
    [               reduce using rule 61 (instruction -> RETURN expr ; .)
    BREAK           reduce using rule 61 (instruction -> RETURN expr ; .)
    CONTINUE        reduce using rule 61 (instruction -> RETURN expr ; .)
    RETURN          reduce using rule 61 (instruction -> RETURN expr ; .)
    PRINT           reduce using rule 61 (instruction -> RETURN expr ; .)
    IF              reduce using rule 61 (instruction -> RETURN expr ; .)
    WHILE           reduce using rule 61 (instruction -> RETURN expr ; .)
    FOR             reduce using rule 61 (instruction -> RETURN expr ; .)
    $end            reduce using rule 61 (instruction -> RETURN expr ; .)
    }               reduce using rule 61 (instruction -> RETURN expr ; .)
    ELSE            reduce using rule 61 (instruction -> RETURN expr ; .)


state 93

    (62) instruction -> PRINT array_interior ; .

    {               reduce using rule 62 (instruction -> PRINT array_interior ; .)
    INTNUM          reduce using rule 62 (instruction -> PRINT array_interior ; .)
    FLOATNUM        reduce using rule 62 (instruction -> PRINT array_interior ; .)
    STRING          reduce using rule 62 (instruction -> PRINT array_interior ; .)
    ID              reduce using rule 62 (instruction -> PRINT array_interior ; .)
    (               reduce using rule 62 (instruction -> PRINT array_interior ; .)
    -               reduce using rule 62 (instruction -> PRINT array_interior ; .)
    [               reduce using rule 62 (instruction -> PRINT array_interior ; .)
    BREAK           reduce using rule 62 (instruction -> PRINT array_interior ; .)
    CONTINUE        reduce using rule 62 (instruction -> PRINT array_interior ; .)
    RETURN          reduce using rule 62 (instruction -> PRINT array_interior ; .)
    PRINT           reduce using rule 62 (instruction -> PRINT array_interior ; .)
    IF              reduce using rule 62 (instruction -> PRINT array_interior ; .)
    WHILE           reduce using rule 62 (instruction -> PRINT array_interior ; .)
    FOR             reduce using rule 62 (instruction -> PRINT array_interior ; .)
    $end            reduce using rule 62 (instruction -> PRINT array_interior ; .)
    }               reduce using rule 62 (instruction -> PRINT array_interior ; .)
    ELSE            reduce using rule 62 (instruction -> PRINT array_interior ; .)


state 94

    (55) cond_if -> IF ( expr . ) cond_block
    (14) expr -> expr . '
    (36) expr -> expr . + expr
    (37) expr -> expr . - expr
    (38) expr -> expr . * expr
    (39) expr -> expr . / expr
    (40) expr -> expr . MPLUS expr
    (41) expr -> expr . MMINUS expr
    (42) expr -> expr . MMLTP expr
    (43) expr -> expr . MDIV expr
    (44) expr -> expr . EQ expr
    (45) expr -> expr . NEQ expr
    (46) expr -> expr . GTEQ expr
    (47) expr -> expr . LTEQ expr
    (48) expr -> expr . > expr
    (49) expr -> expr . < expr

    )               shift and go to state 105
    '               shift and go to state 28
    +               shift and go to state 29
    -               shift and go to state 30
    *               shift and go to state 31
    /               shift and go to state 32
    MPLUS           shift and go to state 33
    MMINUS          shift and go to state 34
    MMLTP           shift and go to state 35
    MDIV            shift and go to state 36
    EQ              shift and go to state 37
    NEQ             shift and go to state 38
    GTEQ            shift and go to state 39
    LTEQ            shift and go to state 40
    >               shift and go to state 41
    <               shift and go to state 42


state 95

    (57) cond_while -> WHILE ( expr . ) cond_block
    (14) expr -> expr . '
    (36) expr -> expr . + expr
    (37) expr -> expr . - expr
    (38) expr -> expr . * expr
    (39) expr -> expr . / expr
    (40) expr -> expr . MPLUS expr
    (41) expr -> expr . MMINUS expr
    (42) expr -> expr . MMLTP expr
    (43) expr -> expr . MDIV expr
    (44) expr -> expr . EQ expr
    (45) expr -> expr . NEQ expr
    (46) expr -> expr . GTEQ expr
    (47) expr -> expr . LTEQ expr
    (48) expr -> expr . > expr
    (49) expr -> expr . < expr

    )               shift and go to state 106
    '               shift and go to state 28
    +               shift and go to state 29
    -               shift and go to state 30
    *               shift and go to state 31
    /               shift and go to state 32
    MPLUS           shift and go to state 33
    MMINUS          shift and go to state 34
    MMLTP           shift and go to state 35
    MDIV            shift and go to state 36
    EQ              shift and go to state 37
    NEQ             shift and go to state 38
    GTEQ            shift and go to state 39
    LTEQ            shift and go to state 40
    >               shift and go to state 41
    <               shift and go to state 42


state 96

    (58) cond_for -> FOR ID = . expr : expr cond_block
    (8) expr -> . INTNUM
    (9) expr -> . FLOATNUM
    (10) expr -> . STRING
    (11) expr -> . ID
    (12) expr -> . ( expr )
    (13) expr -> . - expr
    (14) expr -> . expr '
    (17) expr -> . [ array_interior ]
    (18) expr -> . ID = expr
    (19) expr -> . ID PLUSASSIGN expr
    (20) expr -> . ID MINASSIGN expr
    (21) expr -> . ID MULTASSIGN expr
    (22) expr -> . ID DIVASSIGN expr
    (23) expr -> . ID [ INTNUM ] = expr
    (24) expr -> . ID [ INTNUM ] PLUSASSIGN expr
    (25) expr -> . ID [ INTNUM ] MINASSIGN expr
    (26) expr -> . ID [ INTNUM ] MULTASSIGN expr
    (27) expr -> . ID [ INTNUM ] DIVASSIGN expr
    (28) expr -> . ID [ INTNUM , INTNUM ] = expr
    (29) expr -> . ID [ INTNUM , INTNUM ] PLUSASSIGN expr
    (30) expr -> . ID [ INTNUM , INTNUM ] MINASSIGN expr
    (31) expr -> . ID [ INTNUM , INTNUM ] MULTASSIGN expr
    (32) expr -> . ID [ INTNUM , INTNUM ] DIVASSIGN expr
    (33) expr -> . ID = ZEROS ( INTNUM )
    (34) expr -> . ID = ONES ( INTNUM )
    (35) expr -> . ID = EYE ( INTNUM )
    (36) expr -> . expr + expr
    (37) expr -> . expr - expr
    (38) expr -> . expr * expr
    (39) expr -> . expr / expr
    (40) expr -> . expr MPLUS expr
    (41) expr -> . expr MMINUS expr
    (42) expr -> . expr MMLTP expr
    (43) expr -> . expr MDIV expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr > expr
    (49) expr -> . expr < expr

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ID              shift and go to state 10
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13

    expr                           shift and go to state 107

state 97

    (4) start -> start { start } .

    {               reduce using rule 4 (start -> start { start } .)
    INTNUM          reduce using rule 4 (start -> start { start } .)
    FLOATNUM        reduce using rule 4 (start -> start { start } .)
    STRING          reduce using rule 4 (start -> start { start } .)
    ID              reduce using rule 4 (start -> start { start } .)
    (               reduce using rule 4 (start -> start { start } .)
    -               reduce using rule 4 (start -> start { start } .)
    [               reduce using rule 4 (start -> start { start } .)
    BREAK           reduce using rule 4 (start -> start { start } .)
    CONTINUE        reduce using rule 4 (start -> start { start } .)
    RETURN          reduce using rule 4 (start -> start { start } .)
    PRINT           reduce using rule 4 (start -> start { start } .)
    IF              reduce using rule 4 (start -> start { start } .)
    WHILE           reduce using rule 4 (start -> start { start } .)
    FOR             reduce using rule 4 (start -> start { start } .)
    $end            reduce using rule 4 (start -> start { start } .)
    }               reduce using rule 4 (start -> start { start } .)


state 98

    (33) expr -> ID = ZEROS ( . INTNUM )

    INTNUM          shift and go to state 108


state 99

    (34) expr -> ID = ONES ( . INTNUM )

    INTNUM          shift and go to state 109


state 100

    (35) expr -> ID = EYE ( . INTNUM )

    INTNUM          shift and go to state 110


state 101

    (23) expr -> ID [ INTNUM ] . = expr
    (24) expr -> ID [ INTNUM ] . PLUSASSIGN expr
    (25) expr -> ID [ INTNUM ] . MINASSIGN expr
    (26) expr -> ID [ INTNUM ] . MULTASSIGN expr
    (27) expr -> ID [ INTNUM ] . DIVASSIGN expr

    =               shift and go to state 111
    PLUSASSIGN      shift and go to state 112
    MINASSIGN       shift and go to state 113
    MULTASSIGN      shift and go to state 114
    DIVASSIGN       shift and go to state 115


state 102

    (28) expr -> ID [ INTNUM , . INTNUM ] = expr
    (29) expr -> ID [ INTNUM , . INTNUM ] PLUSASSIGN expr
    (30) expr -> ID [ INTNUM , . INTNUM ] MINASSIGN expr
    (31) expr -> ID [ INTNUM , . INTNUM ] MULTASSIGN expr
    (32) expr -> ID [ INTNUM , . INTNUM ] DIVASSIGN expr

    INTNUM          shift and go to state 116


state 103

    (15) array_interior -> array_interior , expr .
    (14) expr -> expr . '
    (36) expr -> expr . + expr
    (37) expr -> expr . - expr
    (38) expr -> expr . * expr
    (39) expr -> expr . / expr
    (40) expr -> expr . MPLUS expr
    (41) expr -> expr . MMINUS expr
    (42) expr -> expr . MMLTP expr
    (43) expr -> expr . MDIV expr
    (44) expr -> expr . EQ expr
    (45) expr -> expr . NEQ expr
    (46) expr -> expr . GTEQ expr
    (47) expr -> expr . LTEQ expr
    (48) expr -> expr . > expr
    (49) expr -> expr . < expr

    ]               reduce using rule 15 (array_interior -> array_interior , expr .)
    ,               reduce using rule 15 (array_interior -> array_interior , expr .)
    ;               reduce using rule 15 (array_interior -> array_interior , expr .)
    '               shift and go to state 28
    +               shift and go to state 29
    -               shift and go to state 30
    *               shift and go to state 31
    /               shift and go to state 32
    MPLUS           shift and go to state 33
    MMINUS          shift and go to state 34
    MMLTP           shift and go to state 35
    MDIV            shift and go to state 36
    EQ              shift and go to state 37
    NEQ             shift and go to state 38
    GTEQ            shift and go to state 39
    LTEQ            shift and go to state 40
    >               shift and go to state 41
    <               shift and go to state 42


state 104

    (54) cond_block -> { start . }
    (2) start -> start . struct
    (4) start -> start . { start }
    (5) struct -> . expr ;
    (6) struct -> . cond_expr
    (7) struct -> . instruction
    (8) expr -> . INTNUM
    (9) expr -> . FLOATNUM
    (10) expr -> . STRING
    (11) expr -> . ID
    (12) expr -> . ( expr )
    (13) expr -> . - expr
    (14) expr -> . expr '
    (17) expr -> . [ array_interior ]
    (18) expr -> . ID = expr
    (19) expr -> . ID PLUSASSIGN expr
    (20) expr -> . ID MINASSIGN expr
    (21) expr -> . ID MULTASSIGN expr
    (22) expr -> . ID DIVASSIGN expr
    (23) expr -> . ID [ INTNUM ] = expr
    (24) expr -> . ID [ INTNUM ] PLUSASSIGN expr
    (25) expr -> . ID [ INTNUM ] MINASSIGN expr
    (26) expr -> . ID [ INTNUM ] MULTASSIGN expr
    (27) expr -> . ID [ INTNUM ] DIVASSIGN expr
    (28) expr -> . ID [ INTNUM , INTNUM ] = expr
    (29) expr -> . ID [ INTNUM , INTNUM ] PLUSASSIGN expr
    (30) expr -> . ID [ INTNUM , INTNUM ] MINASSIGN expr
    (31) expr -> . ID [ INTNUM , INTNUM ] MULTASSIGN expr
    (32) expr -> . ID [ INTNUM , INTNUM ] DIVASSIGN expr
    (33) expr -> . ID = ZEROS ( INTNUM )
    (34) expr -> . ID = ONES ( INTNUM )
    (35) expr -> . ID = EYE ( INTNUM )
    (36) expr -> . expr + expr
    (37) expr -> . expr - expr
    (38) expr -> . expr * expr
    (39) expr -> . expr / expr
    (40) expr -> . expr MPLUS expr
    (41) expr -> . expr MMINUS expr
    (42) expr -> . expr MMLTP expr
    (43) expr -> . expr MDIV expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr > expr
    (49) expr -> . expr < expr
    (50) cond_expr -> . cond_if
    (51) cond_expr -> . cond_while
    (52) cond_expr -> . cond_for
    (59) instruction -> . BREAK ;
    (60) instruction -> . CONTINUE ;
    (61) instruction -> . RETURN expr ;
    (62) instruction -> . PRINT array_interior ;
    (55) cond_if -> . IF ( expr ) cond_block
    (56) cond_if -> . cond_if ELSE cond_block
    (57) cond_while -> . WHILE ( expr ) cond_block
    (58) cond_for -> . FOR ID = expr : expr cond_block

    }               shift and go to state 117
    {               shift and go to state 25
    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ID              shift and go to state 10
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13
    BREAK           shift and go to state 17
    CONTINUE        shift and go to state 18
    RETURN          shift and go to state 19
    PRINT           shift and go to state 20
    IF              shift and go to state 21
    WHILE           shift and go to state 22
    FOR             shift and go to state 23

    struct                         shift and go to state 24
    expr                           shift and go to state 4
    cond_expr                      shift and go to state 5
    instruction                    shift and go to state 6
    cond_if                        shift and go to state 14
    cond_while                     shift and go to state 15
    cond_for                       shift and go to state 16

state 105

    (55) cond_if -> IF ( expr ) . cond_block
    (53) cond_block -> . struct
    (54) cond_block -> . { start }
    (5) struct -> . expr ;
    (6) struct -> . cond_expr
    (7) struct -> . instruction
    (8) expr -> . INTNUM
    (9) expr -> . FLOATNUM
    (10) expr -> . STRING
    (11) expr -> . ID
    (12) expr -> . ( expr )
    (13) expr -> . - expr
    (14) expr -> . expr '
    (17) expr -> . [ array_interior ]
    (18) expr -> . ID = expr
    (19) expr -> . ID PLUSASSIGN expr
    (20) expr -> . ID MINASSIGN expr
    (21) expr -> . ID MULTASSIGN expr
    (22) expr -> . ID DIVASSIGN expr
    (23) expr -> . ID [ INTNUM ] = expr
    (24) expr -> . ID [ INTNUM ] PLUSASSIGN expr
    (25) expr -> . ID [ INTNUM ] MINASSIGN expr
    (26) expr -> . ID [ INTNUM ] MULTASSIGN expr
    (27) expr -> . ID [ INTNUM ] DIVASSIGN expr
    (28) expr -> . ID [ INTNUM , INTNUM ] = expr
    (29) expr -> . ID [ INTNUM , INTNUM ] PLUSASSIGN expr
    (30) expr -> . ID [ INTNUM , INTNUM ] MINASSIGN expr
    (31) expr -> . ID [ INTNUM , INTNUM ] MULTASSIGN expr
    (32) expr -> . ID [ INTNUM , INTNUM ] DIVASSIGN expr
    (33) expr -> . ID = ZEROS ( INTNUM )
    (34) expr -> . ID = ONES ( INTNUM )
    (35) expr -> . ID = EYE ( INTNUM )
    (36) expr -> . expr + expr
    (37) expr -> . expr - expr
    (38) expr -> . expr * expr
    (39) expr -> . expr / expr
    (40) expr -> . expr MPLUS expr
    (41) expr -> . expr MMINUS expr
    (42) expr -> . expr MMLTP expr
    (43) expr -> . expr MDIV expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr > expr
    (49) expr -> . expr < expr
    (50) cond_expr -> . cond_if
    (51) cond_expr -> . cond_while
    (52) cond_expr -> . cond_for
    (59) instruction -> . BREAK ;
    (60) instruction -> . CONTINUE ;
    (61) instruction -> . RETURN expr ;
    (62) instruction -> . PRINT array_interior ;
    (55) cond_if -> . IF ( expr ) cond_block
    (56) cond_if -> . cond_if ELSE cond_block
    (57) cond_while -> . WHILE ( expr ) cond_block
    (58) cond_for -> . FOR ID = expr : expr cond_block

    {               shift and go to state 91
    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ID              shift and go to state 10
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13
    BREAK           shift and go to state 17
    CONTINUE        shift and go to state 18
    RETURN          shift and go to state 19
    PRINT           shift and go to state 20
    IF              shift and go to state 21
    WHILE           shift and go to state 22
    FOR             shift and go to state 23

    expr                           shift and go to state 4
    cond_block                     shift and go to state 118
    struct                         shift and go to state 90
    cond_expr                      shift and go to state 5
    instruction                    shift and go to state 6
    cond_if                        shift and go to state 14
    cond_while                     shift and go to state 15
    cond_for                       shift and go to state 16

state 106

    (57) cond_while -> WHILE ( expr ) . cond_block
    (53) cond_block -> . struct
    (54) cond_block -> . { start }
    (5) struct -> . expr ;
    (6) struct -> . cond_expr
    (7) struct -> . instruction
    (8) expr -> . INTNUM
    (9) expr -> . FLOATNUM
    (10) expr -> . STRING
    (11) expr -> . ID
    (12) expr -> . ( expr )
    (13) expr -> . - expr
    (14) expr -> . expr '
    (17) expr -> . [ array_interior ]
    (18) expr -> . ID = expr
    (19) expr -> . ID PLUSASSIGN expr
    (20) expr -> . ID MINASSIGN expr
    (21) expr -> . ID MULTASSIGN expr
    (22) expr -> . ID DIVASSIGN expr
    (23) expr -> . ID [ INTNUM ] = expr
    (24) expr -> . ID [ INTNUM ] PLUSASSIGN expr
    (25) expr -> . ID [ INTNUM ] MINASSIGN expr
    (26) expr -> . ID [ INTNUM ] MULTASSIGN expr
    (27) expr -> . ID [ INTNUM ] DIVASSIGN expr
    (28) expr -> . ID [ INTNUM , INTNUM ] = expr
    (29) expr -> . ID [ INTNUM , INTNUM ] PLUSASSIGN expr
    (30) expr -> . ID [ INTNUM , INTNUM ] MINASSIGN expr
    (31) expr -> . ID [ INTNUM , INTNUM ] MULTASSIGN expr
    (32) expr -> . ID [ INTNUM , INTNUM ] DIVASSIGN expr
    (33) expr -> . ID = ZEROS ( INTNUM )
    (34) expr -> . ID = ONES ( INTNUM )
    (35) expr -> . ID = EYE ( INTNUM )
    (36) expr -> . expr + expr
    (37) expr -> . expr - expr
    (38) expr -> . expr * expr
    (39) expr -> . expr / expr
    (40) expr -> . expr MPLUS expr
    (41) expr -> . expr MMINUS expr
    (42) expr -> . expr MMLTP expr
    (43) expr -> . expr MDIV expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr > expr
    (49) expr -> . expr < expr
    (50) cond_expr -> . cond_if
    (51) cond_expr -> . cond_while
    (52) cond_expr -> . cond_for
    (59) instruction -> . BREAK ;
    (60) instruction -> . CONTINUE ;
    (61) instruction -> . RETURN expr ;
    (62) instruction -> . PRINT array_interior ;
    (55) cond_if -> . IF ( expr ) cond_block
    (56) cond_if -> . cond_if ELSE cond_block
    (57) cond_while -> . WHILE ( expr ) cond_block
    (58) cond_for -> . FOR ID = expr : expr cond_block

    {               shift and go to state 91
    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ID              shift and go to state 10
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13
    BREAK           shift and go to state 17
    CONTINUE        shift and go to state 18
    RETURN          shift and go to state 19
    PRINT           shift and go to state 20
    IF              shift and go to state 21
    WHILE           shift and go to state 22
    FOR             shift and go to state 23

    expr                           shift and go to state 4
    cond_block                     shift and go to state 119
    struct                         shift and go to state 90
    cond_expr                      shift and go to state 5
    instruction                    shift and go to state 6
    cond_if                        shift and go to state 14
    cond_while                     shift and go to state 15
    cond_for                       shift and go to state 16

state 107

    (58) cond_for -> FOR ID = expr . : expr cond_block
    (14) expr -> expr . '
    (36) expr -> expr . + expr
    (37) expr -> expr . - expr
    (38) expr -> expr . * expr
    (39) expr -> expr . / expr
    (40) expr -> expr . MPLUS expr
    (41) expr -> expr . MMINUS expr
    (42) expr -> expr . MMLTP expr
    (43) expr -> expr . MDIV expr
    (44) expr -> expr . EQ expr
    (45) expr -> expr . NEQ expr
    (46) expr -> expr . GTEQ expr
    (47) expr -> expr . LTEQ expr
    (48) expr -> expr . > expr
    (49) expr -> expr . < expr

    :               shift and go to state 120
    '               shift and go to state 28
    +               shift and go to state 29
    -               shift and go to state 30
    *               shift and go to state 31
    /               shift and go to state 32
    MPLUS           shift and go to state 33
    MMINUS          shift and go to state 34
    MMLTP           shift and go to state 35
    MDIV            shift and go to state 36
    EQ              shift and go to state 37
    NEQ             shift and go to state 38
    GTEQ            shift and go to state 39
    LTEQ            shift and go to state 40
    >               shift and go to state 41
    <               shift and go to state 42


state 108

    (33) expr -> ID = ZEROS ( INTNUM . )

    )               shift and go to state 121


state 109

    (34) expr -> ID = ONES ( INTNUM . )

    )               shift and go to state 122


state 110

    (35) expr -> ID = EYE ( INTNUM . )

    )               shift and go to state 123


state 111

    (23) expr -> ID [ INTNUM ] = . expr
    (8) expr -> . INTNUM
    (9) expr -> . FLOATNUM
    (10) expr -> . STRING
    (11) expr -> . ID
    (12) expr -> . ( expr )
    (13) expr -> . - expr
    (14) expr -> . expr '
    (17) expr -> . [ array_interior ]
    (18) expr -> . ID = expr
    (19) expr -> . ID PLUSASSIGN expr
    (20) expr -> . ID MINASSIGN expr
    (21) expr -> . ID MULTASSIGN expr
    (22) expr -> . ID DIVASSIGN expr
    (23) expr -> . ID [ INTNUM ] = expr
    (24) expr -> . ID [ INTNUM ] PLUSASSIGN expr
    (25) expr -> . ID [ INTNUM ] MINASSIGN expr
    (26) expr -> . ID [ INTNUM ] MULTASSIGN expr
    (27) expr -> . ID [ INTNUM ] DIVASSIGN expr
    (28) expr -> . ID [ INTNUM , INTNUM ] = expr
    (29) expr -> . ID [ INTNUM , INTNUM ] PLUSASSIGN expr
    (30) expr -> . ID [ INTNUM , INTNUM ] MINASSIGN expr
    (31) expr -> . ID [ INTNUM , INTNUM ] MULTASSIGN expr
    (32) expr -> . ID [ INTNUM , INTNUM ] DIVASSIGN expr
    (33) expr -> . ID = ZEROS ( INTNUM )
    (34) expr -> . ID = ONES ( INTNUM )
    (35) expr -> . ID = EYE ( INTNUM )
    (36) expr -> . expr + expr
    (37) expr -> . expr - expr
    (38) expr -> . expr * expr
    (39) expr -> . expr / expr
    (40) expr -> . expr MPLUS expr
    (41) expr -> . expr MMINUS expr
    (42) expr -> . expr MMLTP expr
    (43) expr -> . expr MDIV expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr > expr
    (49) expr -> . expr < expr

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ID              shift and go to state 10
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13

    expr                           shift and go to state 124

state 112

    (24) expr -> ID [ INTNUM ] PLUSASSIGN . expr
    (8) expr -> . INTNUM
    (9) expr -> . FLOATNUM
    (10) expr -> . STRING
    (11) expr -> . ID
    (12) expr -> . ( expr )
    (13) expr -> . - expr
    (14) expr -> . expr '
    (17) expr -> . [ array_interior ]
    (18) expr -> . ID = expr
    (19) expr -> . ID PLUSASSIGN expr
    (20) expr -> . ID MINASSIGN expr
    (21) expr -> . ID MULTASSIGN expr
    (22) expr -> . ID DIVASSIGN expr
    (23) expr -> . ID [ INTNUM ] = expr
    (24) expr -> . ID [ INTNUM ] PLUSASSIGN expr
    (25) expr -> . ID [ INTNUM ] MINASSIGN expr
    (26) expr -> . ID [ INTNUM ] MULTASSIGN expr
    (27) expr -> . ID [ INTNUM ] DIVASSIGN expr
    (28) expr -> . ID [ INTNUM , INTNUM ] = expr
    (29) expr -> . ID [ INTNUM , INTNUM ] PLUSASSIGN expr
    (30) expr -> . ID [ INTNUM , INTNUM ] MINASSIGN expr
    (31) expr -> . ID [ INTNUM , INTNUM ] MULTASSIGN expr
    (32) expr -> . ID [ INTNUM , INTNUM ] DIVASSIGN expr
    (33) expr -> . ID = ZEROS ( INTNUM )
    (34) expr -> . ID = ONES ( INTNUM )
    (35) expr -> . ID = EYE ( INTNUM )
    (36) expr -> . expr + expr
    (37) expr -> . expr - expr
    (38) expr -> . expr * expr
    (39) expr -> . expr / expr
    (40) expr -> . expr MPLUS expr
    (41) expr -> . expr MMINUS expr
    (42) expr -> . expr MMLTP expr
    (43) expr -> . expr MDIV expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr > expr
    (49) expr -> . expr < expr

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ID              shift and go to state 10
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13

    expr                           shift and go to state 125

state 113

    (25) expr -> ID [ INTNUM ] MINASSIGN . expr
    (8) expr -> . INTNUM
    (9) expr -> . FLOATNUM
    (10) expr -> . STRING
    (11) expr -> . ID
    (12) expr -> . ( expr )
    (13) expr -> . - expr
    (14) expr -> . expr '
    (17) expr -> . [ array_interior ]
    (18) expr -> . ID = expr
    (19) expr -> . ID PLUSASSIGN expr
    (20) expr -> . ID MINASSIGN expr
    (21) expr -> . ID MULTASSIGN expr
    (22) expr -> . ID DIVASSIGN expr
    (23) expr -> . ID [ INTNUM ] = expr
    (24) expr -> . ID [ INTNUM ] PLUSASSIGN expr
    (25) expr -> . ID [ INTNUM ] MINASSIGN expr
    (26) expr -> . ID [ INTNUM ] MULTASSIGN expr
    (27) expr -> . ID [ INTNUM ] DIVASSIGN expr
    (28) expr -> . ID [ INTNUM , INTNUM ] = expr
    (29) expr -> . ID [ INTNUM , INTNUM ] PLUSASSIGN expr
    (30) expr -> . ID [ INTNUM , INTNUM ] MINASSIGN expr
    (31) expr -> . ID [ INTNUM , INTNUM ] MULTASSIGN expr
    (32) expr -> . ID [ INTNUM , INTNUM ] DIVASSIGN expr
    (33) expr -> . ID = ZEROS ( INTNUM )
    (34) expr -> . ID = ONES ( INTNUM )
    (35) expr -> . ID = EYE ( INTNUM )
    (36) expr -> . expr + expr
    (37) expr -> . expr - expr
    (38) expr -> . expr * expr
    (39) expr -> . expr / expr
    (40) expr -> . expr MPLUS expr
    (41) expr -> . expr MMINUS expr
    (42) expr -> . expr MMLTP expr
    (43) expr -> . expr MDIV expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr > expr
    (49) expr -> . expr < expr

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ID              shift and go to state 10
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13

    expr                           shift and go to state 126

state 114

    (26) expr -> ID [ INTNUM ] MULTASSIGN . expr
    (8) expr -> . INTNUM
    (9) expr -> . FLOATNUM
    (10) expr -> . STRING
    (11) expr -> . ID
    (12) expr -> . ( expr )
    (13) expr -> . - expr
    (14) expr -> . expr '
    (17) expr -> . [ array_interior ]
    (18) expr -> . ID = expr
    (19) expr -> . ID PLUSASSIGN expr
    (20) expr -> . ID MINASSIGN expr
    (21) expr -> . ID MULTASSIGN expr
    (22) expr -> . ID DIVASSIGN expr
    (23) expr -> . ID [ INTNUM ] = expr
    (24) expr -> . ID [ INTNUM ] PLUSASSIGN expr
    (25) expr -> . ID [ INTNUM ] MINASSIGN expr
    (26) expr -> . ID [ INTNUM ] MULTASSIGN expr
    (27) expr -> . ID [ INTNUM ] DIVASSIGN expr
    (28) expr -> . ID [ INTNUM , INTNUM ] = expr
    (29) expr -> . ID [ INTNUM , INTNUM ] PLUSASSIGN expr
    (30) expr -> . ID [ INTNUM , INTNUM ] MINASSIGN expr
    (31) expr -> . ID [ INTNUM , INTNUM ] MULTASSIGN expr
    (32) expr -> . ID [ INTNUM , INTNUM ] DIVASSIGN expr
    (33) expr -> . ID = ZEROS ( INTNUM )
    (34) expr -> . ID = ONES ( INTNUM )
    (35) expr -> . ID = EYE ( INTNUM )
    (36) expr -> . expr + expr
    (37) expr -> . expr - expr
    (38) expr -> . expr * expr
    (39) expr -> . expr / expr
    (40) expr -> . expr MPLUS expr
    (41) expr -> . expr MMINUS expr
    (42) expr -> . expr MMLTP expr
    (43) expr -> . expr MDIV expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr > expr
    (49) expr -> . expr < expr

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ID              shift and go to state 10
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13

    expr                           shift and go to state 127

state 115

    (27) expr -> ID [ INTNUM ] DIVASSIGN . expr
    (8) expr -> . INTNUM
    (9) expr -> . FLOATNUM
    (10) expr -> . STRING
    (11) expr -> . ID
    (12) expr -> . ( expr )
    (13) expr -> . - expr
    (14) expr -> . expr '
    (17) expr -> . [ array_interior ]
    (18) expr -> . ID = expr
    (19) expr -> . ID PLUSASSIGN expr
    (20) expr -> . ID MINASSIGN expr
    (21) expr -> . ID MULTASSIGN expr
    (22) expr -> . ID DIVASSIGN expr
    (23) expr -> . ID [ INTNUM ] = expr
    (24) expr -> . ID [ INTNUM ] PLUSASSIGN expr
    (25) expr -> . ID [ INTNUM ] MINASSIGN expr
    (26) expr -> . ID [ INTNUM ] MULTASSIGN expr
    (27) expr -> . ID [ INTNUM ] DIVASSIGN expr
    (28) expr -> . ID [ INTNUM , INTNUM ] = expr
    (29) expr -> . ID [ INTNUM , INTNUM ] PLUSASSIGN expr
    (30) expr -> . ID [ INTNUM , INTNUM ] MINASSIGN expr
    (31) expr -> . ID [ INTNUM , INTNUM ] MULTASSIGN expr
    (32) expr -> . ID [ INTNUM , INTNUM ] DIVASSIGN expr
    (33) expr -> . ID = ZEROS ( INTNUM )
    (34) expr -> . ID = ONES ( INTNUM )
    (35) expr -> . ID = EYE ( INTNUM )
    (36) expr -> . expr + expr
    (37) expr -> . expr - expr
    (38) expr -> . expr * expr
    (39) expr -> . expr / expr
    (40) expr -> . expr MPLUS expr
    (41) expr -> . expr MMINUS expr
    (42) expr -> . expr MMLTP expr
    (43) expr -> . expr MDIV expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr > expr
    (49) expr -> . expr < expr

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ID              shift and go to state 10
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13

    expr                           shift and go to state 128

state 116

    (28) expr -> ID [ INTNUM , INTNUM . ] = expr
    (29) expr -> ID [ INTNUM , INTNUM . ] PLUSASSIGN expr
    (30) expr -> ID [ INTNUM , INTNUM . ] MINASSIGN expr
    (31) expr -> ID [ INTNUM , INTNUM . ] MULTASSIGN expr
    (32) expr -> ID [ INTNUM , INTNUM . ] DIVASSIGN expr

    ]               shift and go to state 129


state 117

    (54) cond_block -> { start } .

    ELSE            reduce using rule 54 (cond_block -> { start } .)
    {               reduce using rule 54 (cond_block -> { start } .)
    INTNUM          reduce using rule 54 (cond_block -> { start } .)
    FLOATNUM        reduce using rule 54 (cond_block -> { start } .)
    STRING          reduce using rule 54 (cond_block -> { start } .)
    ID              reduce using rule 54 (cond_block -> { start } .)
    (               reduce using rule 54 (cond_block -> { start } .)
    -               reduce using rule 54 (cond_block -> { start } .)
    [               reduce using rule 54 (cond_block -> { start } .)
    BREAK           reduce using rule 54 (cond_block -> { start } .)
    CONTINUE        reduce using rule 54 (cond_block -> { start } .)
    RETURN          reduce using rule 54 (cond_block -> { start } .)
    PRINT           reduce using rule 54 (cond_block -> { start } .)
    IF              reduce using rule 54 (cond_block -> { start } .)
    WHILE           reduce using rule 54 (cond_block -> { start } .)
    FOR             reduce using rule 54 (cond_block -> { start } .)
    $end            reduce using rule 54 (cond_block -> { start } .)
    }               reduce using rule 54 (cond_block -> { start } .)


state 118

    (55) cond_if -> IF ( expr ) cond_block .

    ELSE            reduce using rule 55 (cond_if -> IF ( expr ) cond_block .)
    {               reduce using rule 55 (cond_if -> IF ( expr ) cond_block .)
    INTNUM          reduce using rule 55 (cond_if -> IF ( expr ) cond_block .)
    FLOATNUM        reduce using rule 55 (cond_if -> IF ( expr ) cond_block .)
    STRING          reduce using rule 55 (cond_if -> IF ( expr ) cond_block .)
    ID              reduce using rule 55 (cond_if -> IF ( expr ) cond_block .)
    (               reduce using rule 55 (cond_if -> IF ( expr ) cond_block .)
    -               reduce using rule 55 (cond_if -> IF ( expr ) cond_block .)
    [               reduce using rule 55 (cond_if -> IF ( expr ) cond_block .)
    BREAK           reduce using rule 55 (cond_if -> IF ( expr ) cond_block .)
    CONTINUE        reduce using rule 55 (cond_if -> IF ( expr ) cond_block .)
    RETURN          reduce using rule 55 (cond_if -> IF ( expr ) cond_block .)
    PRINT           reduce using rule 55 (cond_if -> IF ( expr ) cond_block .)
    IF              reduce using rule 55 (cond_if -> IF ( expr ) cond_block .)
    WHILE           reduce using rule 55 (cond_if -> IF ( expr ) cond_block .)
    FOR             reduce using rule 55 (cond_if -> IF ( expr ) cond_block .)
    $end            reduce using rule 55 (cond_if -> IF ( expr ) cond_block .)
    }               reduce using rule 55 (cond_if -> IF ( expr ) cond_block .)


state 119

    (57) cond_while -> WHILE ( expr ) cond_block .

    {               reduce using rule 57 (cond_while -> WHILE ( expr ) cond_block .)
    INTNUM          reduce using rule 57 (cond_while -> WHILE ( expr ) cond_block .)
    FLOATNUM        reduce using rule 57 (cond_while -> WHILE ( expr ) cond_block .)
    STRING          reduce using rule 57 (cond_while -> WHILE ( expr ) cond_block .)
    ID              reduce using rule 57 (cond_while -> WHILE ( expr ) cond_block .)
    (               reduce using rule 57 (cond_while -> WHILE ( expr ) cond_block .)
    -               reduce using rule 57 (cond_while -> WHILE ( expr ) cond_block .)
    [               reduce using rule 57 (cond_while -> WHILE ( expr ) cond_block .)
    BREAK           reduce using rule 57 (cond_while -> WHILE ( expr ) cond_block .)
    CONTINUE        reduce using rule 57 (cond_while -> WHILE ( expr ) cond_block .)
    RETURN          reduce using rule 57 (cond_while -> WHILE ( expr ) cond_block .)
    PRINT           reduce using rule 57 (cond_while -> WHILE ( expr ) cond_block .)
    IF              reduce using rule 57 (cond_while -> WHILE ( expr ) cond_block .)
    WHILE           reduce using rule 57 (cond_while -> WHILE ( expr ) cond_block .)
    FOR             reduce using rule 57 (cond_while -> WHILE ( expr ) cond_block .)
    $end            reduce using rule 57 (cond_while -> WHILE ( expr ) cond_block .)
    }               reduce using rule 57 (cond_while -> WHILE ( expr ) cond_block .)
    ELSE            reduce using rule 57 (cond_while -> WHILE ( expr ) cond_block .)


state 120

    (58) cond_for -> FOR ID = expr : . expr cond_block
    (8) expr -> . INTNUM
    (9) expr -> . FLOATNUM
    (10) expr -> . STRING
    (11) expr -> . ID
    (12) expr -> . ( expr )
    (13) expr -> . - expr
    (14) expr -> . expr '
    (17) expr -> . [ array_interior ]
    (18) expr -> . ID = expr
    (19) expr -> . ID PLUSASSIGN expr
    (20) expr -> . ID MINASSIGN expr
    (21) expr -> . ID MULTASSIGN expr
    (22) expr -> . ID DIVASSIGN expr
    (23) expr -> . ID [ INTNUM ] = expr
    (24) expr -> . ID [ INTNUM ] PLUSASSIGN expr
    (25) expr -> . ID [ INTNUM ] MINASSIGN expr
    (26) expr -> . ID [ INTNUM ] MULTASSIGN expr
    (27) expr -> . ID [ INTNUM ] DIVASSIGN expr
    (28) expr -> . ID [ INTNUM , INTNUM ] = expr
    (29) expr -> . ID [ INTNUM , INTNUM ] PLUSASSIGN expr
    (30) expr -> . ID [ INTNUM , INTNUM ] MINASSIGN expr
    (31) expr -> . ID [ INTNUM , INTNUM ] MULTASSIGN expr
    (32) expr -> . ID [ INTNUM , INTNUM ] DIVASSIGN expr
    (33) expr -> . ID = ZEROS ( INTNUM )
    (34) expr -> . ID = ONES ( INTNUM )
    (35) expr -> . ID = EYE ( INTNUM )
    (36) expr -> . expr + expr
    (37) expr -> . expr - expr
    (38) expr -> . expr * expr
    (39) expr -> . expr / expr
    (40) expr -> . expr MPLUS expr
    (41) expr -> . expr MMINUS expr
    (42) expr -> . expr MMLTP expr
    (43) expr -> . expr MDIV expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr > expr
    (49) expr -> . expr < expr

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ID              shift and go to state 10
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13

    expr                           shift and go to state 130

state 121

    (33) expr -> ID = ZEROS ( INTNUM ) .

    ;               reduce using rule 33 (expr -> ID = ZEROS ( INTNUM ) .)
    '               reduce using rule 33 (expr -> ID = ZEROS ( INTNUM ) .)
    +               reduce using rule 33 (expr -> ID = ZEROS ( INTNUM ) .)
    -               reduce using rule 33 (expr -> ID = ZEROS ( INTNUM ) .)
    *               reduce using rule 33 (expr -> ID = ZEROS ( INTNUM ) .)
    /               reduce using rule 33 (expr -> ID = ZEROS ( INTNUM ) .)
    MPLUS           reduce using rule 33 (expr -> ID = ZEROS ( INTNUM ) .)
    MMINUS          reduce using rule 33 (expr -> ID = ZEROS ( INTNUM ) .)
    MMLTP           reduce using rule 33 (expr -> ID = ZEROS ( INTNUM ) .)
    MDIV            reduce using rule 33 (expr -> ID = ZEROS ( INTNUM ) .)
    EQ              reduce using rule 33 (expr -> ID = ZEROS ( INTNUM ) .)
    NEQ             reduce using rule 33 (expr -> ID = ZEROS ( INTNUM ) .)
    GTEQ            reduce using rule 33 (expr -> ID = ZEROS ( INTNUM ) .)
    LTEQ            reduce using rule 33 (expr -> ID = ZEROS ( INTNUM ) .)
    >               reduce using rule 33 (expr -> ID = ZEROS ( INTNUM ) .)
    <               reduce using rule 33 (expr -> ID = ZEROS ( INTNUM ) .)
    )               reduce using rule 33 (expr -> ID = ZEROS ( INTNUM ) .)
    ]               reduce using rule 33 (expr -> ID = ZEROS ( INTNUM ) .)
    ,               reduce using rule 33 (expr -> ID = ZEROS ( INTNUM ) .)
    :               reduce using rule 33 (expr -> ID = ZEROS ( INTNUM ) .)
    {               reduce using rule 33 (expr -> ID = ZEROS ( INTNUM ) .)
    INTNUM          reduce using rule 33 (expr -> ID = ZEROS ( INTNUM ) .)
    FLOATNUM        reduce using rule 33 (expr -> ID = ZEROS ( INTNUM ) .)
    STRING          reduce using rule 33 (expr -> ID = ZEROS ( INTNUM ) .)
    ID              reduce using rule 33 (expr -> ID = ZEROS ( INTNUM ) .)
    (               reduce using rule 33 (expr -> ID = ZEROS ( INTNUM ) .)
    [               reduce using rule 33 (expr -> ID = ZEROS ( INTNUM ) .)
    BREAK           reduce using rule 33 (expr -> ID = ZEROS ( INTNUM ) .)
    CONTINUE        reduce using rule 33 (expr -> ID = ZEROS ( INTNUM ) .)
    RETURN          reduce using rule 33 (expr -> ID = ZEROS ( INTNUM ) .)
    PRINT           reduce using rule 33 (expr -> ID = ZEROS ( INTNUM ) .)
    IF              reduce using rule 33 (expr -> ID = ZEROS ( INTNUM ) .)
    WHILE           reduce using rule 33 (expr -> ID = ZEROS ( INTNUM ) .)
    FOR             reduce using rule 33 (expr -> ID = ZEROS ( INTNUM ) .)


state 122

    (34) expr -> ID = ONES ( INTNUM ) .

    ;               reduce using rule 34 (expr -> ID = ONES ( INTNUM ) .)
    '               reduce using rule 34 (expr -> ID = ONES ( INTNUM ) .)
    +               reduce using rule 34 (expr -> ID = ONES ( INTNUM ) .)
    -               reduce using rule 34 (expr -> ID = ONES ( INTNUM ) .)
    *               reduce using rule 34 (expr -> ID = ONES ( INTNUM ) .)
    /               reduce using rule 34 (expr -> ID = ONES ( INTNUM ) .)
    MPLUS           reduce using rule 34 (expr -> ID = ONES ( INTNUM ) .)
    MMINUS          reduce using rule 34 (expr -> ID = ONES ( INTNUM ) .)
    MMLTP           reduce using rule 34 (expr -> ID = ONES ( INTNUM ) .)
    MDIV            reduce using rule 34 (expr -> ID = ONES ( INTNUM ) .)
    EQ              reduce using rule 34 (expr -> ID = ONES ( INTNUM ) .)
    NEQ             reduce using rule 34 (expr -> ID = ONES ( INTNUM ) .)
    GTEQ            reduce using rule 34 (expr -> ID = ONES ( INTNUM ) .)
    LTEQ            reduce using rule 34 (expr -> ID = ONES ( INTNUM ) .)
    >               reduce using rule 34 (expr -> ID = ONES ( INTNUM ) .)
    <               reduce using rule 34 (expr -> ID = ONES ( INTNUM ) .)
    )               reduce using rule 34 (expr -> ID = ONES ( INTNUM ) .)
    ]               reduce using rule 34 (expr -> ID = ONES ( INTNUM ) .)
    ,               reduce using rule 34 (expr -> ID = ONES ( INTNUM ) .)
    :               reduce using rule 34 (expr -> ID = ONES ( INTNUM ) .)
    {               reduce using rule 34 (expr -> ID = ONES ( INTNUM ) .)
    INTNUM          reduce using rule 34 (expr -> ID = ONES ( INTNUM ) .)
    FLOATNUM        reduce using rule 34 (expr -> ID = ONES ( INTNUM ) .)
    STRING          reduce using rule 34 (expr -> ID = ONES ( INTNUM ) .)
    ID              reduce using rule 34 (expr -> ID = ONES ( INTNUM ) .)
    (               reduce using rule 34 (expr -> ID = ONES ( INTNUM ) .)
    [               reduce using rule 34 (expr -> ID = ONES ( INTNUM ) .)
    BREAK           reduce using rule 34 (expr -> ID = ONES ( INTNUM ) .)
    CONTINUE        reduce using rule 34 (expr -> ID = ONES ( INTNUM ) .)
    RETURN          reduce using rule 34 (expr -> ID = ONES ( INTNUM ) .)
    PRINT           reduce using rule 34 (expr -> ID = ONES ( INTNUM ) .)
    IF              reduce using rule 34 (expr -> ID = ONES ( INTNUM ) .)
    WHILE           reduce using rule 34 (expr -> ID = ONES ( INTNUM ) .)
    FOR             reduce using rule 34 (expr -> ID = ONES ( INTNUM ) .)


state 123

    (35) expr -> ID = EYE ( INTNUM ) .

    ;               reduce using rule 35 (expr -> ID = EYE ( INTNUM ) .)
    '               reduce using rule 35 (expr -> ID = EYE ( INTNUM ) .)
    +               reduce using rule 35 (expr -> ID = EYE ( INTNUM ) .)
    -               reduce using rule 35 (expr -> ID = EYE ( INTNUM ) .)
    *               reduce using rule 35 (expr -> ID = EYE ( INTNUM ) .)
    /               reduce using rule 35 (expr -> ID = EYE ( INTNUM ) .)
    MPLUS           reduce using rule 35 (expr -> ID = EYE ( INTNUM ) .)
    MMINUS          reduce using rule 35 (expr -> ID = EYE ( INTNUM ) .)
    MMLTP           reduce using rule 35 (expr -> ID = EYE ( INTNUM ) .)
    MDIV            reduce using rule 35 (expr -> ID = EYE ( INTNUM ) .)
    EQ              reduce using rule 35 (expr -> ID = EYE ( INTNUM ) .)
    NEQ             reduce using rule 35 (expr -> ID = EYE ( INTNUM ) .)
    GTEQ            reduce using rule 35 (expr -> ID = EYE ( INTNUM ) .)
    LTEQ            reduce using rule 35 (expr -> ID = EYE ( INTNUM ) .)
    >               reduce using rule 35 (expr -> ID = EYE ( INTNUM ) .)
    <               reduce using rule 35 (expr -> ID = EYE ( INTNUM ) .)
    )               reduce using rule 35 (expr -> ID = EYE ( INTNUM ) .)
    ]               reduce using rule 35 (expr -> ID = EYE ( INTNUM ) .)
    ,               reduce using rule 35 (expr -> ID = EYE ( INTNUM ) .)
    :               reduce using rule 35 (expr -> ID = EYE ( INTNUM ) .)
    {               reduce using rule 35 (expr -> ID = EYE ( INTNUM ) .)
    INTNUM          reduce using rule 35 (expr -> ID = EYE ( INTNUM ) .)
    FLOATNUM        reduce using rule 35 (expr -> ID = EYE ( INTNUM ) .)
    STRING          reduce using rule 35 (expr -> ID = EYE ( INTNUM ) .)
    ID              reduce using rule 35 (expr -> ID = EYE ( INTNUM ) .)
    (               reduce using rule 35 (expr -> ID = EYE ( INTNUM ) .)
    [               reduce using rule 35 (expr -> ID = EYE ( INTNUM ) .)
    BREAK           reduce using rule 35 (expr -> ID = EYE ( INTNUM ) .)
    CONTINUE        reduce using rule 35 (expr -> ID = EYE ( INTNUM ) .)
    RETURN          reduce using rule 35 (expr -> ID = EYE ( INTNUM ) .)
    PRINT           reduce using rule 35 (expr -> ID = EYE ( INTNUM ) .)
    IF              reduce using rule 35 (expr -> ID = EYE ( INTNUM ) .)
    WHILE           reduce using rule 35 (expr -> ID = EYE ( INTNUM ) .)
    FOR             reduce using rule 35 (expr -> ID = EYE ( INTNUM ) .)


state 124

    (23) expr -> ID [ INTNUM ] = expr .
    (14) expr -> expr . '
    (36) expr -> expr . + expr
    (37) expr -> expr . - expr
    (38) expr -> expr . * expr
    (39) expr -> expr . / expr
    (40) expr -> expr . MPLUS expr
    (41) expr -> expr . MMINUS expr
    (42) expr -> expr . MMLTP expr
    (43) expr -> expr . MDIV expr
    (44) expr -> expr . EQ expr
    (45) expr -> expr . NEQ expr
    (46) expr -> expr . GTEQ expr
    (47) expr -> expr . LTEQ expr
    (48) expr -> expr . > expr
    (49) expr -> expr . < expr

    ;               reduce using rule 23 (expr -> ID [ INTNUM ] = expr .)
    EQ              reduce using rule 23 (expr -> ID [ INTNUM ] = expr .)
    NEQ             reduce using rule 23 (expr -> ID [ INTNUM ] = expr .)
    GTEQ            reduce using rule 23 (expr -> ID [ INTNUM ] = expr .)
    LTEQ            reduce using rule 23 (expr -> ID [ INTNUM ] = expr .)
    >               reduce using rule 23 (expr -> ID [ INTNUM ] = expr .)
    <               reduce using rule 23 (expr -> ID [ INTNUM ] = expr .)
    )               reduce using rule 23 (expr -> ID [ INTNUM ] = expr .)
    ]               reduce using rule 23 (expr -> ID [ INTNUM ] = expr .)
    ,               reduce using rule 23 (expr -> ID [ INTNUM ] = expr .)
    :               reduce using rule 23 (expr -> ID [ INTNUM ] = expr .)
    {               reduce using rule 23 (expr -> ID [ INTNUM ] = expr .)
    INTNUM          reduce using rule 23 (expr -> ID [ INTNUM ] = expr .)
    FLOATNUM        reduce using rule 23 (expr -> ID [ INTNUM ] = expr .)
    STRING          reduce using rule 23 (expr -> ID [ INTNUM ] = expr .)
    ID              reduce using rule 23 (expr -> ID [ INTNUM ] = expr .)
    (               reduce using rule 23 (expr -> ID [ INTNUM ] = expr .)
    [               reduce using rule 23 (expr -> ID [ INTNUM ] = expr .)
    BREAK           reduce using rule 23 (expr -> ID [ INTNUM ] = expr .)
    CONTINUE        reduce using rule 23 (expr -> ID [ INTNUM ] = expr .)
    RETURN          reduce using rule 23 (expr -> ID [ INTNUM ] = expr .)
    PRINT           reduce using rule 23 (expr -> ID [ INTNUM ] = expr .)
    IF              reduce using rule 23 (expr -> ID [ INTNUM ] = expr .)
    WHILE           reduce using rule 23 (expr -> ID [ INTNUM ] = expr .)
    FOR             reduce using rule 23 (expr -> ID [ INTNUM ] = expr .)
    '               shift and go to state 28
    +               shift and go to state 29
    -               shift and go to state 30
    *               shift and go to state 31
    /               shift and go to state 32
    MPLUS           shift and go to state 33
    MMINUS          shift and go to state 34
    MMLTP           shift and go to state 35
    MDIV            shift and go to state 36

  ! '               [ reduce using rule 23 (expr -> ID [ INTNUM ] = expr .) ]
  ! +               [ reduce using rule 23 (expr -> ID [ INTNUM ] = expr .) ]
  ! -               [ reduce using rule 23 (expr -> ID [ INTNUM ] = expr .) ]
  ! *               [ reduce using rule 23 (expr -> ID [ INTNUM ] = expr .) ]
  ! /               [ reduce using rule 23 (expr -> ID [ INTNUM ] = expr .) ]
  ! MPLUS           [ reduce using rule 23 (expr -> ID [ INTNUM ] = expr .) ]
  ! MMINUS          [ reduce using rule 23 (expr -> ID [ INTNUM ] = expr .) ]
  ! MMLTP           [ reduce using rule 23 (expr -> ID [ INTNUM ] = expr .) ]
  ! MDIV            [ reduce using rule 23 (expr -> ID [ INTNUM ] = expr .) ]
  ! EQ              [ shift and go to state 37 ]
  ! NEQ             [ shift and go to state 38 ]
  ! GTEQ            [ shift and go to state 39 ]
  ! LTEQ            [ shift and go to state 40 ]
  ! >               [ shift and go to state 41 ]
  ! <               [ shift and go to state 42 ]


state 125

    (24) expr -> ID [ INTNUM ] PLUSASSIGN expr .
    (14) expr -> expr . '
    (36) expr -> expr . + expr
    (37) expr -> expr . - expr
    (38) expr -> expr . * expr
    (39) expr -> expr . / expr
    (40) expr -> expr . MPLUS expr
    (41) expr -> expr . MMINUS expr
    (42) expr -> expr . MMLTP expr
    (43) expr -> expr . MDIV expr
    (44) expr -> expr . EQ expr
    (45) expr -> expr . NEQ expr
    (46) expr -> expr . GTEQ expr
    (47) expr -> expr . LTEQ expr
    (48) expr -> expr . > expr
    (49) expr -> expr . < expr

    ;               reduce using rule 24 (expr -> ID [ INTNUM ] PLUSASSIGN expr .)
    EQ              reduce using rule 24 (expr -> ID [ INTNUM ] PLUSASSIGN expr .)
    NEQ             reduce using rule 24 (expr -> ID [ INTNUM ] PLUSASSIGN expr .)
    GTEQ            reduce using rule 24 (expr -> ID [ INTNUM ] PLUSASSIGN expr .)
    LTEQ            reduce using rule 24 (expr -> ID [ INTNUM ] PLUSASSIGN expr .)
    >               reduce using rule 24 (expr -> ID [ INTNUM ] PLUSASSIGN expr .)
    <               reduce using rule 24 (expr -> ID [ INTNUM ] PLUSASSIGN expr .)
    )               reduce using rule 24 (expr -> ID [ INTNUM ] PLUSASSIGN expr .)
    ]               reduce using rule 24 (expr -> ID [ INTNUM ] PLUSASSIGN expr .)
    ,               reduce using rule 24 (expr -> ID [ INTNUM ] PLUSASSIGN expr .)
    :               reduce using rule 24 (expr -> ID [ INTNUM ] PLUSASSIGN expr .)
    {               reduce using rule 24 (expr -> ID [ INTNUM ] PLUSASSIGN expr .)
    INTNUM          reduce using rule 24 (expr -> ID [ INTNUM ] PLUSASSIGN expr .)
    FLOATNUM        reduce using rule 24 (expr -> ID [ INTNUM ] PLUSASSIGN expr .)
    STRING          reduce using rule 24 (expr -> ID [ INTNUM ] PLUSASSIGN expr .)
    ID              reduce using rule 24 (expr -> ID [ INTNUM ] PLUSASSIGN expr .)
    (               reduce using rule 24 (expr -> ID [ INTNUM ] PLUSASSIGN expr .)
    [               reduce using rule 24 (expr -> ID [ INTNUM ] PLUSASSIGN expr .)
    BREAK           reduce using rule 24 (expr -> ID [ INTNUM ] PLUSASSIGN expr .)
    CONTINUE        reduce using rule 24 (expr -> ID [ INTNUM ] PLUSASSIGN expr .)
    RETURN          reduce using rule 24 (expr -> ID [ INTNUM ] PLUSASSIGN expr .)
    PRINT           reduce using rule 24 (expr -> ID [ INTNUM ] PLUSASSIGN expr .)
    IF              reduce using rule 24 (expr -> ID [ INTNUM ] PLUSASSIGN expr .)
    WHILE           reduce using rule 24 (expr -> ID [ INTNUM ] PLUSASSIGN expr .)
    FOR             reduce using rule 24 (expr -> ID [ INTNUM ] PLUSASSIGN expr .)
    '               shift and go to state 28
    +               shift and go to state 29
    -               shift and go to state 30
    *               shift and go to state 31
    /               shift and go to state 32
    MPLUS           shift and go to state 33
    MMINUS          shift and go to state 34
    MMLTP           shift and go to state 35
    MDIV            shift and go to state 36

  ! '               [ reduce using rule 24 (expr -> ID [ INTNUM ] PLUSASSIGN expr .) ]
  ! +               [ reduce using rule 24 (expr -> ID [ INTNUM ] PLUSASSIGN expr .) ]
  ! -               [ reduce using rule 24 (expr -> ID [ INTNUM ] PLUSASSIGN expr .) ]
  ! *               [ reduce using rule 24 (expr -> ID [ INTNUM ] PLUSASSIGN expr .) ]
  ! /               [ reduce using rule 24 (expr -> ID [ INTNUM ] PLUSASSIGN expr .) ]
  ! MPLUS           [ reduce using rule 24 (expr -> ID [ INTNUM ] PLUSASSIGN expr .) ]
  ! MMINUS          [ reduce using rule 24 (expr -> ID [ INTNUM ] PLUSASSIGN expr .) ]
  ! MMLTP           [ reduce using rule 24 (expr -> ID [ INTNUM ] PLUSASSIGN expr .) ]
  ! MDIV            [ reduce using rule 24 (expr -> ID [ INTNUM ] PLUSASSIGN expr .) ]
  ! EQ              [ shift and go to state 37 ]
  ! NEQ             [ shift and go to state 38 ]
  ! GTEQ            [ shift and go to state 39 ]
  ! LTEQ            [ shift and go to state 40 ]
  ! >               [ shift and go to state 41 ]
  ! <               [ shift and go to state 42 ]


state 126

    (25) expr -> ID [ INTNUM ] MINASSIGN expr .
    (14) expr -> expr . '
    (36) expr -> expr . + expr
    (37) expr -> expr . - expr
    (38) expr -> expr . * expr
    (39) expr -> expr . / expr
    (40) expr -> expr . MPLUS expr
    (41) expr -> expr . MMINUS expr
    (42) expr -> expr . MMLTP expr
    (43) expr -> expr . MDIV expr
    (44) expr -> expr . EQ expr
    (45) expr -> expr . NEQ expr
    (46) expr -> expr . GTEQ expr
    (47) expr -> expr . LTEQ expr
    (48) expr -> expr . > expr
    (49) expr -> expr . < expr

    ;               reduce using rule 25 (expr -> ID [ INTNUM ] MINASSIGN expr .)
    EQ              reduce using rule 25 (expr -> ID [ INTNUM ] MINASSIGN expr .)
    NEQ             reduce using rule 25 (expr -> ID [ INTNUM ] MINASSIGN expr .)
    GTEQ            reduce using rule 25 (expr -> ID [ INTNUM ] MINASSIGN expr .)
    LTEQ            reduce using rule 25 (expr -> ID [ INTNUM ] MINASSIGN expr .)
    >               reduce using rule 25 (expr -> ID [ INTNUM ] MINASSIGN expr .)
    <               reduce using rule 25 (expr -> ID [ INTNUM ] MINASSIGN expr .)
    )               reduce using rule 25 (expr -> ID [ INTNUM ] MINASSIGN expr .)
    ]               reduce using rule 25 (expr -> ID [ INTNUM ] MINASSIGN expr .)
    ,               reduce using rule 25 (expr -> ID [ INTNUM ] MINASSIGN expr .)
    :               reduce using rule 25 (expr -> ID [ INTNUM ] MINASSIGN expr .)
    {               reduce using rule 25 (expr -> ID [ INTNUM ] MINASSIGN expr .)
    INTNUM          reduce using rule 25 (expr -> ID [ INTNUM ] MINASSIGN expr .)
    FLOATNUM        reduce using rule 25 (expr -> ID [ INTNUM ] MINASSIGN expr .)
    STRING          reduce using rule 25 (expr -> ID [ INTNUM ] MINASSIGN expr .)
    ID              reduce using rule 25 (expr -> ID [ INTNUM ] MINASSIGN expr .)
    (               reduce using rule 25 (expr -> ID [ INTNUM ] MINASSIGN expr .)
    [               reduce using rule 25 (expr -> ID [ INTNUM ] MINASSIGN expr .)
    BREAK           reduce using rule 25 (expr -> ID [ INTNUM ] MINASSIGN expr .)
    CONTINUE        reduce using rule 25 (expr -> ID [ INTNUM ] MINASSIGN expr .)
    RETURN          reduce using rule 25 (expr -> ID [ INTNUM ] MINASSIGN expr .)
    PRINT           reduce using rule 25 (expr -> ID [ INTNUM ] MINASSIGN expr .)
    IF              reduce using rule 25 (expr -> ID [ INTNUM ] MINASSIGN expr .)
    WHILE           reduce using rule 25 (expr -> ID [ INTNUM ] MINASSIGN expr .)
    FOR             reduce using rule 25 (expr -> ID [ INTNUM ] MINASSIGN expr .)
    '               shift and go to state 28
    +               shift and go to state 29
    -               shift and go to state 30
    *               shift and go to state 31
    /               shift and go to state 32
    MPLUS           shift and go to state 33
    MMINUS          shift and go to state 34
    MMLTP           shift and go to state 35
    MDIV            shift and go to state 36

  ! '               [ reduce using rule 25 (expr -> ID [ INTNUM ] MINASSIGN expr .) ]
  ! +               [ reduce using rule 25 (expr -> ID [ INTNUM ] MINASSIGN expr .) ]
  ! -               [ reduce using rule 25 (expr -> ID [ INTNUM ] MINASSIGN expr .) ]
  ! *               [ reduce using rule 25 (expr -> ID [ INTNUM ] MINASSIGN expr .) ]
  ! /               [ reduce using rule 25 (expr -> ID [ INTNUM ] MINASSIGN expr .) ]
  ! MPLUS           [ reduce using rule 25 (expr -> ID [ INTNUM ] MINASSIGN expr .) ]
  ! MMINUS          [ reduce using rule 25 (expr -> ID [ INTNUM ] MINASSIGN expr .) ]
  ! MMLTP           [ reduce using rule 25 (expr -> ID [ INTNUM ] MINASSIGN expr .) ]
  ! MDIV            [ reduce using rule 25 (expr -> ID [ INTNUM ] MINASSIGN expr .) ]
  ! EQ              [ shift and go to state 37 ]
  ! NEQ             [ shift and go to state 38 ]
  ! GTEQ            [ shift and go to state 39 ]
  ! LTEQ            [ shift and go to state 40 ]
  ! >               [ shift and go to state 41 ]
  ! <               [ shift and go to state 42 ]


state 127

    (26) expr -> ID [ INTNUM ] MULTASSIGN expr .
    (14) expr -> expr . '
    (36) expr -> expr . + expr
    (37) expr -> expr . - expr
    (38) expr -> expr . * expr
    (39) expr -> expr . / expr
    (40) expr -> expr . MPLUS expr
    (41) expr -> expr . MMINUS expr
    (42) expr -> expr . MMLTP expr
    (43) expr -> expr . MDIV expr
    (44) expr -> expr . EQ expr
    (45) expr -> expr . NEQ expr
    (46) expr -> expr . GTEQ expr
    (47) expr -> expr . LTEQ expr
    (48) expr -> expr . > expr
    (49) expr -> expr . < expr

    ;               reduce using rule 26 (expr -> ID [ INTNUM ] MULTASSIGN expr .)
    EQ              reduce using rule 26 (expr -> ID [ INTNUM ] MULTASSIGN expr .)
    NEQ             reduce using rule 26 (expr -> ID [ INTNUM ] MULTASSIGN expr .)
    GTEQ            reduce using rule 26 (expr -> ID [ INTNUM ] MULTASSIGN expr .)
    LTEQ            reduce using rule 26 (expr -> ID [ INTNUM ] MULTASSIGN expr .)
    >               reduce using rule 26 (expr -> ID [ INTNUM ] MULTASSIGN expr .)
    <               reduce using rule 26 (expr -> ID [ INTNUM ] MULTASSIGN expr .)
    )               reduce using rule 26 (expr -> ID [ INTNUM ] MULTASSIGN expr .)
    ]               reduce using rule 26 (expr -> ID [ INTNUM ] MULTASSIGN expr .)
    ,               reduce using rule 26 (expr -> ID [ INTNUM ] MULTASSIGN expr .)
    :               reduce using rule 26 (expr -> ID [ INTNUM ] MULTASSIGN expr .)
    {               reduce using rule 26 (expr -> ID [ INTNUM ] MULTASSIGN expr .)
    INTNUM          reduce using rule 26 (expr -> ID [ INTNUM ] MULTASSIGN expr .)
    FLOATNUM        reduce using rule 26 (expr -> ID [ INTNUM ] MULTASSIGN expr .)
    STRING          reduce using rule 26 (expr -> ID [ INTNUM ] MULTASSIGN expr .)
    ID              reduce using rule 26 (expr -> ID [ INTNUM ] MULTASSIGN expr .)
    (               reduce using rule 26 (expr -> ID [ INTNUM ] MULTASSIGN expr .)
    [               reduce using rule 26 (expr -> ID [ INTNUM ] MULTASSIGN expr .)
    BREAK           reduce using rule 26 (expr -> ID [ INTNUM ] MULTASSIGN expr .)
    CONTINUE        reduce using rule 26 (expr -> ID [ INTNUM ] MULTASSIGN expr .)
    RETURN          reduce using rule 26 (expr -> ID [ INTNUM ] MULTASSIGN expr .)
    PRINT           reduce using rule 26 (expr -> ID [ INTNUM ] MULTASSIGN expr .)
    IF              reduce using rule 26 (expr -> ID [ INTNUM ] MULTASSIGN expr .)
    WHILE           reduce using rule 26 (expr -> ID [ INTNUM ] MULTASSIGN expr .)
    FOR             reduce using rule 26 (expr -> ID [ INTNUM ] MULTASSIGN expr .)
    '               shift and go to state 28
    +               shift and go to state 29
    -               shift and go to state 30
    *               shift and go to state 31
    /               shift and go to state 32
    MPLUS           shift and go to state 33
    MMINUS          shift and go to state 34
    MMLTP           shift and go to state 35
    MDIV            shift and go to state 36

  ! '               [ reduce using rule 26 (expr -> ID [ INTNUM ] MULTASSIGN expr .) ]
  ! +               [ reduce using rule 26 (expr -> ID [ INTNUM ] MULTASSIGN expr .) ]
  ! -               [ reduce using rule 26 (expr -> ID [ INTNUM ] MULTASSIGN expr .) ]
  ! *               [ reduce using rule 26 (expr -> ID [ INTNUM ] MULTASSIGN expr .) ]
  ! /               [ reduce using rule 26 (expr -> ID [ INTNUM ] MULTASSIGN expr .) ]
  ! MPLUS           [ reduce using rule 26 (expr -> ID [ INTNUM ] MULTASSIGN expr .) ]
  ! MMINUS          [ reduce using rule 26 (expr -> ID [ INTNUM ] MULTASSIGN expr .) ]
  ! MMLTP           [ reduce using rule 26 (expr -> ID [ INTNUM ] MULTASSIGN expr .) ]
  ! MDIV            [ reduce using rule 26 (expr -> ID [ INTNUM ] MULTASSIGN expr .) ]
  ! EQ              [ shift and go to state 37 ]
  ! NEQ             [ shift and go to state 38 ]
  ! GTEQ            [ shift and go to state 39 ]
  ! LTEQ            [ shift and go to state 40 ]
  ! >               [ shift and go to state 41 ]
  ! <               [ shift and go to state 42 ]


state 128

    (27) expr -> ID [ INTNUM ] DIVASSIGN expr .
    (14) expr -> expr . '
    (36) expr -> expr . + expr
    (37) expr -> expr . - expr
    (38) expr -> expr . * expr
    (39) expr -> expr . / expr
    (40) expr -> expr . MPLUS expr
    (41) expr -> expr . MMINUS expr
    (42) expr -> expr . MMLTP expr
    (43) expr -> expr . MDIV expr
    (44) expr -> expr . EQ expr
    (45) expr -> expr . NEQ expr
    (46) expr -> expr . GTEQ expr
    (47) expr -> expr . LTEQ expr
    (48) expr -> expr . > expr
    (49) expr -> expr . < expr

    ;               reduce using rule 27 (expr -> ID [ INTNUM ] DIVASSIGN expr .)
    EQ              reduce using rule 27 (expr -> ID [ INTNUM ] DIVASSIGN expr .)
    NEQ             reduce using rule 27 (expr -> ID [ INTNUM ] DIVASSIGN expr .)
    GTEQ            reduce using rule 27 (expr -> ID [ INTNUM ] DIVASSIGN expr .)
    LTEQ            reduce using rule 27 (expr -> ID [ INTNUM ] DIVASSIGN expr .)
    >               reduce using rule 27 (expr -> ID [ INTNUM ] DIVASSIGN expr .)
    <               reduce using rule 27 (expr -> ID [ INTNUM ] DIVASSIGN expr .)
    )               reduce using rule 27 (expr -> ID [ INTNUM ] DIVASSIGN expr .)
    ]               reduce using rule 27 (expr -> ID [ INTNUM ] DIVASSIGN expr .)
    ,               reduce using rule 27 (expr -> ID [ INTNUM ] DIVASSIGN expr .)
    :               reduce using rule 27 (expr -> ID [ INTNUM ] DIVASSIGN expr .)
    {               reduce using rule 27 (expr -> ID [ INTNUM ] DIVASSIGN expr .)
    INTNUM          reduce using rule 27 (expr -> ID [ INTNUM ] DIVASSIGN expr .)
    FLOATNUM        reduce using rule 27 (expr -> ID [ INTNUM ] DIVASSIGN expr .)
    STRING          reduce using rule 27 (expr -> ID [ INTNUM ] DIVASSIGN expr .)
    ID              reduce using rule 27 (expr -> ID [ INTNUM ] DIVASSIGN expr .)
    (               reduce using rule 27 (expr -> ID [ INTNUM ] DIVASSIGN expr .)
    [               reduce using rule 27 (expr -> ID [ INTNUM ] DIVASSIGN expr .)
    BREAK           reduce using rule 27 (expr -> ID [ INTNUM ] DIVASSIGN expr .)
    CONTINUE        reduce using rule 27 (expr -> ID [ INTNUM ] DIVASSIGN expr .)
    RETURN          reduce using rule 27 (expr -> ID [ INTNUM ] DIVASSIGN expr .)
    PRINT           reduce using rule 27 (expr -> ID [ INTNUM ] DIVASSIGN expr .)
    IF              reduce using rule 27 (expr -> ID [ INTNUM ] DIVASSIGN expr .)
    WHILE           reduce using rule 27 (expr -> ID [ INTNUM ] DIVASSIGN expr .)
    FOR             reduce using rule 27 (expr -> ID [ INTNUM ] DIVASSIGN expr .)
    '               shift and go to state 28
    +               shift and go to state 29
    -               shift and go to state 30
    *               shift and go to state 31
    /               shift and go to state 32
    MPLUS           shift and go to state 33
    MMINUS          shift and go to state 34
    MMLTP           shift and go to state 35
    MDIV            shift and go to state 36

  ! '               [ reduce using rule 27 (expr -> ID [ INTNUM ] DIVASSIGN expr .) ]
  ! +               [ reduce using rule 27 (expr -> ID [ INTNUM ] DIVASSIGN expr .) ]
  ! -               [ reduce using rule 27 (expr -> ID [ INTNUM ] DIVASSIGN expr .) ]
  ! *               [ reduce using rule 27 (expr -> ID [ INTNUM ] DIVASSIGN expr .) ]
  ! /               [ reduce using rule 27 (expr -> ID [ INTNUM ] DIVASSIGN expr .) ]
  ! MPLUS           [ reduce using rule 27 (expr -> ID [ INTNUM ] DIVASSIGN expr .) ]
  ! MMINUS          [ reduce using rule 27 (expr -> ID [ INTNUM ] DIVASSIGN expr .) ]
  ! MMLTP           [ reduce using rule 27 (expr -> ID [ INTNUM ] DIVASSIGN expr .) ]
  ! MDIV            [ reduce using rule 27 (expr -> ID [ INTNUM ] DIVASSIGN expr .) ]
  ! EQ              [ shift and go to state 37 ]
  ! NEQ             [ shift and go to state 38 ]
  ! GTEQ            [ shift and go to state 39 ]
  ! LTEQ            [ shift and go to state 40 ]
  ! >               [ shift and go to state 41 ]
  ! <               [ shift and go to state 42 ]


state 129

    (28) expr -> ID [ INTNUM , INTNUM ] . = expr
    (29) expr -> ID [ INTNUM , INTNUM ] . PLUSASSIGN expr
    (30) expr -> ID [ INTNUM , INTNUM ] . MINASSIGN expr
    (31) expr -> ID [ INTNUM , INTNUM ] . MULTASSIGN expr
    (32) expr -> ID [ INTNUM , INTNUM ] . DIVASSIGN expr

    =               shift and go to state 131
    PLUSASSIGN      shift and go to state 132
    MINASSIGN       shift and go to state 133
    MULTASSIGN      shift and go to state 134
    DIVASSIGN       shift and go to state 135


state 130

    (58) cond_for -> FOR ID = expr : expr . cond_block
    (14) expr -> expr . '
    (36) expr -> expr . + expr
    (37) expr -> expr . - expr
    (38) expr -> expr . * expr
    (39) expr -> expr . / expr
    (40) expr -> expr . MPLUS expr
    (41) expr -> expr . MMINUS expr
    (42) expr -> expr . MMLTP expr
    (43) expr -> expr . MDIV expr
    (44) expr -> expr . EQ expr
    (45) expr -> expr . NEQ expr
    (46) expr -> expr . GTEQ expr
    (47) expr -> expr . LTEQ expr
    (48) expr -> expr . > expr
    (49) expr -> expr . < expr
    (53) cond_block -> . struct
    (54) cond_block -> . { start }
    (5) struct -> . expr ;
    (6) struct -> . cond_expr
    (7) struct -> . instruction
    (8) expr -> . INTNUM
    (9) expr -> . FLOATNUM
    (10) expr -> . STRING
    (11) expr -> . ID
    (12) expr -> . ( expr )
    (13) expr -> . - expr
    (14) expr -> . expr '
    (17) expr -> . [ array_interior ]
    (18) expr -> . ID = expr
    (19) expr -> . ID PLUSASSIGN expr
    (20) expr -> . ID MINASSIGN expr
    (21) expr -> . ID MULTASSIGN expr
    (22) expr -> . ID DIVASSIGN expr
    (23) expr -> . ID [ INTNUM ] = expr
    (24) expr -> . ID [ INTNUM ] PLUSASSIGN expr
    (25) expr -> . ID [ INTNUM ] MINASSIGN expr
    (26) expr -> . ID [ INTNUM ] MULTASSIGN expr
    (27) expr -> . ID [ INTNUM ] DIVASSIGN expr
    (28) expr -> . ID [ INTNUM , INTNUM ] = expr
    (29) expr -> . ID [ INTNUM , INTNUM ] PLUSASSIGN expr
    (30) expr -> . ID [ INTNUM , INTNUM ] MINASSIGN expr
    (31) expr -> . ID [ INTNUM , INTNUM ] MULTASSIGN expr
    (32) expr -> . ID [ INTNUM , INTNUM ] DIVASSIGN expr
    (33) expr -> . ID = ZEROS ( INTNUM )
    (34) expr -> . ID = ONES ( INTNUM )
    (35) expr -> . ID = EYE ( INTNUM )
    (36) expr -> . expr + expr
    (37) expr -> . expr - expr
    (38) expr -> . expr * expr
    (39) expr -> . expr / expr
    (40) expr -> . expr MPLUS expr
    (41) expr -> . expr MMINUS expr
    (42) expr -> . expr MMLTP expr
    (43) expr -> . expr MDIV expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr > expr
    (49) expr -> . expr < expr
    (50) cond_expr -> . cond_if
    (51) cond_expr -> . cond_while
    (52) cond_expr -> . cond_for
    (59) instruction -> . BREAK ;
    (60) instruction -> . CONTINUE ;
    (61) instruction -> . RETURN expr ;
    (62) instruction -> . PRINT array_interior ;
    (55) cond_if -> . IF ( expr ) cond_block
    (56) cond_if -> . cond_if ELSE cond_block
    (57) cond_while -> . WHILE ( expr ) cond_block
    (58) cond_for -> . FOR ID = expr : expr cond_block

    '               shift and go to state 28
    +               shift and go to state 29
    -               shift and go to state 137
    *               shift and go to state 31
    /               shift and go to state 32
    MPLUS           shift and go to state 33
    MMINUS          shift and go to state 34
    MMLTP           shift and go to state 35
    MDIV            shift and go to state 36
    EQ              shift and go to state 37
    NEQ             shift and go to state 38
    GTEQ            shift and go to state 39
    LTEQ            shift and go to state 40
    >               shift and go to state 41
    <               shift and go to state 42
    {               shift and go to state 91
    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ID              shift and go to state 10
    (               shift and go to state 11
    [               shift and go to state 13
    BREAK           shift and go to state 17
    CONTINUE        shift and go to state 18
    RETURN          shift and go to state 19
    PRINT           shift and go to state 20
    IF              shift and go to state 21
    WHILE           shift and go to state 22
    FOR             shift and go to state 23

    expr                           shift and go to state 4
    cond_block                     shift and go to state 136
    struct                         shift and go to state 90
    cond_expr                      shift and go to state 5
    instruction                    shift and go to state 6
    cond_if                        shift and go to state 14
    cond_while                     shift and go to state 15
    cond_for                       shift and go to state 16

state 131

    (28) expr -> ID [ INTNUM , INTNUM ] = . expr
    (8) expr -> . INTNUM
    (9) expr -> . FLOATNUM
    (10) expr -> . STRING
    (11) expr -> . ID
    (12) expr -> . ( expr )
    (13) expr -> . - expr
    (14) expr -> . expr '
    (17) expr -> . [ array_interior ]
    (18) expr -> . ID = expr
    (19) expr -> . ID PLUSASSIGN expr
    (20) expr -> . ID MINASSIGN expr
    (21) expr -> . ID MULTASSIGN expr
    (22) expr -> . ID DIVASSIGN expr
    (23) expr -> . ID [ INTNUM ] = expr
    (24) expr -> . ID [ INTNUM ] PLUSASSIGN expr
    (25) expr -> . ID [ INTNUM ] MINASSIGN expr
    (26) expr -> . ID [ INTNUM ] MULTASSIGN expr
    (27) expr -> . ID [ INTNUM ] DIVASSIGN expr
    (28) expr -> . ID [ INTNUM , INTNUM ] = expr
    (29) expr -> . ID [ INTNUM , INTNUM ] PLUSASSIGN expr
    (30) expr -> . ID [ INTNUM , INTNUM ] MINASSIGN expr
    (31) expr -> . ID [ INTNUM , INTNUM ] MULTASSIGN expr
    (32) expr -> . ID [ INTNUM , INTNUM ] DIVASSIGN expr
    (33) expr -> . ID = ZEROS ( INTNUM )
    (34) expr -> . ID = ONES ( INTNUM )
    (35) expr -> . ID = EYE ( INTNUM )
    (36) expr -> . expr + expr
    (37) expr -> . expr - expr
    (38) expr -> . expr * expr
    (39) expr -> . expr / expr
    (40) expr -> . expr MPLUS expr
    (41) expr -> . expr MMINUS expr
    (42) expr -> . expr MMLTP expr
    (43) expr -> . expr MDIV expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr > expr
    (49) expr -> . expr < expr

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ID              shift and go to state 10
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13

    expr                           shift and go to state 138

state 132

    (29) expr -> ID [ INTNUM , INTNUM ] PLUSASSIGN . expr
    (8) expr -> . INTNUM
    (9) expr -> . FLOATNUM
    (10) expr -> . STRING
    (11) expr -> . ID
    (12) expr -> . ( expr )
    (13) expr -> . - expr
    (14) expr -> . expr '
    (17) expr -> . [ array_interior ]
    (18) expr -> . ID = expr
    (19) expr -> . ID PLUSASSIGN expr
    (20) expr -> . ID MINASSIGN expr
    (21) expr -> . ID MULTASSIGN expr
    (22) expr -> . ID DIVASSIGN expr
    (23) expr -> . ID [ INTNUM ] = expr
    (24) expr -> . ID [ INTNUM ] PLUSASSIGN expr
    (25) expr -> . ID [ INTNUM ] MINASSIGN expr
    (26) expr -> . ID [ INTNUM ] MULTASSIGN expr
    (27) expr -> . ID [ INTNUM ] DIVASSIGN expr
    (28) expr -> . ID [ INTNUM , INTNUM ] = expr
    (29) expr -> . ID [ INTNUM , INTNUM ] PLUSASSIGN expr
    (30) expr -> . ID [ INTNUM , INTNUM ] MINASSIGN expr
    (31) expr -> . ID [ INTNUM , INTNUM ] MULTASSIGN expr
    (32) expr -> . ID [ INTNUM , INTNUM ] DIVASSIGN expr
    (33) expr -> . ID = ZEROS ( INTNUM )
    (34) expr -> . ID = ONES ( INTNUM )
    (35) expr -> . ID = EYE ( INTNUM )
    (36) expr -> . expr + expr
    (37) expr -> . expr - expr
    (38) expr -> . expr * expr
    (39) expr -> . expr / expr
    (40) expr -> . expr MPLUS expr
    (41) expr -> . expr MMINUS expr
    (42) expr -> . expr MMLTP expr
    (43) expr -> . expr MDIV expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr > expr
    (49) expr -> . expr < expr

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ID              shift and go to state 10
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13

    expr                           shift and go to state 139

state 133

    (30) expr -> ID [ INTNUM , INTNUM ] MINASSIGN . expr
    (8) expr -> . INTNUM
    (9) expr -> . FLOATNUM
    (10) expr -> . STRING
    (11) expr -> . ID
    (12) expr -> . ( expr )
    (13) expr -> . - expr
    (14) expr -> . expr '
    (17) expr -> . [ array_interior ]
    (18) expr -> . ID = expr
    (19) expr -> . ID PLUSASSIGN expr
    (20) expr -> . ID MINASSIGN expr
    (21) expr -> . ID MULTASSIGN expr
    (22) expr -> . ID DIVASSIGN expr
    (23) expr -> . ID [ INTNUM ] = expr
    (24) expr -> . ID [ INTNUM ] PLUSASSIGN expr
    (25) expr -> . ID [ INTNUM ] MINASSIGN expr
    (26) expr -> . ID [ INTNUM ] MULTASSIGN expr
    (27) expr -> . ID [ INTNUM ] DIVASSIGN expr
    (28) expr -> . ID [ INTNUM , INTNUM ] = expr
    (29) expr -> . ID [ INTNUM , INTNUM ] PLUSASSIGN expr
    (30) expr -> . ID [ INTNUM , INTNUM ] MINASSIGN expr
    (31) expr -> . ID [ INTNUM , INTNUM ] MULTASSIGN expr
    (32) expr -> . ID [ INTNUM , INTNUM ] DIVASSIGN expr
    (33) expr -> . ID = ZEROS ( INTNUM )
    (34) expr -> . ID = ONES ( INTNUM )
    (35) expr -> . ID = EYE ( INTNUM )
    (36) expr -> . expr + expr
    (37) expr -> . expr - expr
    (38) expr -> . expr * expr
    (39) expr -> . expr / expr
    (40) expr -> . expr MPLUS expr
    (41) expr -> . expr MMINUS expr
    (42) expr -> . expr MMLTP expr
    (43) expr -> . expr MDIV expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr > expr
    (49) expr -> . expr < expr

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ID              shift and go to state 10
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13

    expr                           shift and go to state 140

state 134

    (31) expr -> ID [ INTNUM , INTNUM ] MULTASSIGN . expr
    (8) expr -> . INTNUM
    (9) expr -> . FLOATNUM
    (10) expr -> . STRING
    (11) expr -> . ID
    (12) expr -> . ( expr )
    (13) expr -> . - expr
    (14) expr -> . expr '
    (17) expr -> . [ array_interior ]
    (18) expr -> . ID = expr
    (19) expr -> . ID PLUSASSIGN expr
    (20) expr -> . ID MINASSIGN expr
    (21) expr -> . ID MULTASSIGN expr
    (22) expr -> . ID DIVASSIGN expr
    (23) expr -> . ID [ INTNUM ] = expr
    (24) expr -> . ID [ INTNUM ] PLUSASSIGN expr
    (25) expr -> . ID [ INTNUM ] MINASSIGN expr
    (26) expr -> . ID [ INTNUM ] MULTASSIGN expr
    (27) expr -> . ID [ INTNUM ] DIVASSIGN expr
    (28) expr -> . ID [ INTNUM , INTNUM ] = expr
    (29) expr -> . ID [ INTNUM , INTNUM ] PLUSASSIGN expr
    (30) expr -> . ID [ INTNUM , INTNUM ] MINASSIGN expr
    (31) expr -> . ID [ INTNUM , INTNUM ] MULTASSIGN expr
    (32) expr -> . ID [ INTNUM , INTNUM ] DIVASSIGN expr
    (33) expr -> . ID = ZEROS ( INTNUM )
    (34) expr -> . ID = ONES ( INTNUM )
    (35) expr -> . ID = EYE ( INTNUM )
    (36) expr -> . expr + expr
    (37) expr -> . expr - expr
    (38) expr -> . expr * expr
    (39) expr -> . expr / expr
    (40) expr -> . expr MPLUS expr
    (41) expr -> . expr MMINUS expr
    (42) expr -> . expr MMLTP expr
    (43) expr -> . expr MDIV expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr > expr
    (49) expr -> . expr < expr

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ID              shift and go to state 10
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13

    expr                           shift and go to state 141

state 135

    (32) expr -> ID [ INTNUM , INTNUM ] DIVASSIGN . expr
    (8) expr -> . INTNUM
    (9) expr -> . FLOATNUM
    (10) expr -> . STRING
    (11) expr -> . ID
    (12) expr -> . ( expr )
    (13) expr -> . - expr
    (14) expr -> . expr '
    (17) expr -> . [ array_interior ]
    (18) expr -> . ID = expr
    (19) expr -> . ID PLUSASSIGN expr
    (20) expr -> . ID MINASSIGN expr
    (21) expr -> . ID MULTASSIGN expr
    (22) expr -> . ID DIVASSIGN expr
    (23) expr -> . ID [ INTNUM ] = expr
    (24) expr -> . ID [ INTNUM ] PLUSASSIGN expr
    (25) expr -> . ID [ INTNUM ] MINASSIGN expr
    (26) expr -> . ID [ INTNUM ] MULTASSIGN expr
    (27) expr -> . ID [ INTNUM ] DIVASSIGN expr
    (28) expr -> . ID [ INTNUM , INTNUM ] = expr
    (29) expr -> . ID [ INTNUM , INTNUM ] PLUSASSIGN expr
    (30) expr -> . ID [ INTNUM , INTNUM ] MINASSIGN expr
    (31) expr -> . ID [ INTNUM , INTNUM ] MULTASSIGN expr
    (32) expr -> . ID [ INTNUM , INTNUM ] DIVASSIGN expr
    (33) expr -> . ID = ZEROS ( INTNUM )
    (34) expr -> . ID = ONES ( INTNUM )
    (35) expr -> . ID = EYE ( INTNUM )
    (36) expr -> . expr + expr
    (37) expr -> . expr - expr
    (38) expr -> . expr * expr
    (39) expr -> . expr / expr
    (40) expr -> . expr MPLUS expr
    (41) expr -> . expr MMINUS expr
    (42) expr -> . expr MMLTP expr
    (43) expr -> . expr MDIV expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr > expr
    (49) expr -> . expr < expr

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ID              shift and go to state 10
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13

    expr                           shift and go to state 142

state 136

    (58) cond_for -> FOR ID = expr : expr cond_block .

    {               reduce using rule 58 (cond_for -> FOR ID = expr : expr cond_block .)
    INTNUM          reduce using rule 58 (cond_for -> FOR ID = expr : expr cond_block .)
    FLOATNUM        reduce using rule 58 (cond_for -> FOR ID = expr : expr cond_block .)
    STRING          reduce using rule 58 (cond_for -> FOR ID = expr : expr cond_block .)
    ID              reduce using rule 58 (cond_for -> FOR ID = expr : expr cond_block .)
    (               reduce using rule 58 (cond_for -> FOR ID = expr : expr cond_block .)
    -               reduce using rule 58 (cond_for -> FOR ID = expr : expr cond_block .)
    [               reduce using rule 58 (cond_for -> FOR ID = expr : expr cond_block .)
    BREAK           reduce using rule 58 (cond_for -> FOR ID = expr : expr cond_block .)
    CONTINUE        reduce using rule 58 (cond_for -> FOR ID = expr : expr cond_block .)
    RETURN          reduce using rule 58 (cond_for -> FOR ID = expr : expr cond_block .)
    PRINT           reduce using rule 58 (cond_for -> FOR ID = expr : expr cond_block .)
    IF              reduce using rule 58 (cond_for -> FOR ID = expr : expr cond_block .)
    WHILE           reduce using rule 58 (cond_for -> FOR ID = expr : expr cond_block .)
    FOR             reduce using rule 58 (cond_for -> FOR ID = expr : expr cond_block .)
    $end            reduce using rule 58 (cond_for -> FOR ID = expr : expr cond_block .)
    }               reduce using rule 58 (cond_for -> FOR ID = expr : expr cond_block .)
    ELSE            reduce using rule 58 (cond_for -> FOR ID = expr : expr cond_block .)


state 137

    (37) expr -> expr - . expr
    (13) expr -> - . expr
    (8) expr -> . INTNUM
    (9) expr -> . FLOATNUM
    (10) expr -> . STRING
    (11) expr -> . ID
    (12) expr -> . ( expr )
    (13) expr -> . - expr
    (14) expr -> . expr '
    (17) expr -> . [ array_interior ]
    (18) expr -> . ID = expr
    (19) expr -> . ID PLUSASSIGN expr
    (20) expr -> . ID MINASSIGN expr
    (21) expr -> . ID MULTASSIGN expr
    (22) expr -> . ID DIVASSIGN expr
    (23) expr -> . ID [ INTNUM ] = expr
    (24) expr -> . ID [ INTNUM ] PLUSASSIGN expr
    (25) expr -> . ID [ INTNUM ] MINASSIGN expr
    (26) expr -> . ID [ INTNUM ] MULTASSIGN expr
    (27) expr -> . ID [ INTNUM ] DIVASSIGN expr
    (28) expr -> . ID [ INTNUM , INTNUM ] = expr
    (29) expr -> . ID [ INTNUM , INTNUM ] PLUSASSIGN expr
    (30) expr -> . ID [ INTNUM , INTNUM ] MINASSIGN expr
    (31) expr -> . ID [ INTNUM , INTNUM ] MULTASSIGN expr
    (32) expr -> . ID [ INTNUM , INTNUM ] DIVASSIGN expr
    (33) expr -> . ID = ZEROS ( INTNUM )
    (34) expr -> . ID = ONES ( INTNUM )
    (35) expr -> . ID = EYE ( INTNUM )
    (36) expr -> . expr + expr
    (37) expr -> . expr - expr
    (38) expr -> . expr * expr
    (39) expr -> . expr / expr
    (40) expr -> . expr MPLUS expr
    (41) expr -> . expr MMINUS expr
    (42) expr -> . expr MMLTP expr
    (43) expr -> . expr MDIV expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NEQ expr
    (46) expr -> . expr GTEQ expr
    (47) expr -> . expr LTEQ expr
    (48) expr -> . expr > expr
    (49) expr -> . expr < expr

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ID              shift and go to state 10
    (               shift and go to state 11
    -               shift and go to state 12
    [               shift and go to state 13

    expr                           shift and go to state 143

state 138

    (28) expr -> ID [ INTNUM , INTNUM ] = expr .
    (14) expr -> expr . '
    (36) expr -> expr . + expr
    (37) expr -> expr . - expr
    (38) expr -> expr . * expr
    (39) expr -> expr . / expr
    (40) expr -> expr . MPLUS expr
    (41) expr -> expr . MMINUS expr
    (42) expr -> expr . MMLTP expr
    (43) expr -> expr . MDIV expr
    (44) expr -> expr . EQ expr
    (45) expr -> expr . NEQ expr
    (46) expr -> expr . GTEQ expr
    (47) expr -> expr . LTEQ expr
    (48) expr -> expr . > expr
    (49) expr -> expr . < expr

    ;               reduce using rule 28 (expr -> ID [ INTNUM , INTNUM ] = expr .)
    EQ              reduce using rule 28 (expr -> ID [ INTNUM , INTNUM ] = expr .)
    NEQ             reduce using rule 28 (expr -> ID [ INTNUM , INTNUM ] = expr .)
    GTEQ            reduce using rule 28 (expr -> ID [ INTNUM , INTNUM ] = expr .)
    LTEQ            reduce using rule 28 (expr -> ID [ INTNUM , INTNUM ] = expr .)
    >               reduce using rule 28 (expr -> ID [ INTNUM , INTNUM ] = expr .)
    <               reduce using rule 28 (expr -> ID [ INTNUM , INTNUM ] = expr .)
    )               reduce using rule 28 (expr -> ID [ INTNUM , INTNUM ] = expr .)
    ]               reduce using rule 28 (expr -> ID [ INTNUM , INTNUM ] = expr .)
    ,               reduce using rule 28 (expr -> ID [ INTNUM , INTNUM ] = expr .)
    :               reduce using rule 28 (expr -> ID [ INTNUM , INTNUM ] = expr .)
    {               reduce using rule 28 (expr -> ID [ INTNUM , INTNUM ] = expr .)
    INTNUM          reduce using rule 28 (expr -> ID [ INTNUM , INTNUM ] = expr .)
    FLOATNUM        reduce using rule 28 (expr -> ID [ INTNUM , INTNUM ] = expr .)
    STRING          reduce using rule 28 (expr -> ID [ INTNUM , INTNUM ] = expr .)
    ID              reduce using rule 28 (expr -> ID [ INTNUM , INTNUM ] = expr .)
    (               reduce using rule 28 (expr -> ID [ INTNUM , INTNUM ] = expr .)
    [               reduce using rule 28 (expr -> ID [ INTNUM , INTNUM ] = expr .)
    BREAK           reduce using rule 28 (expr -> ID [ INTNUM , INTNUM ] = expr .)
    CONTINUE        reduce using rule 28 (expr -> ID [ INTNUM , INTNUM ] = expr .)
    RETURN          reduce using rule 28 (expr -> ID [ INTNUM , INTNUM ] = expr .)
    PRINT           reduce using rule 28 (expr -> ID [ INTNUM , INTNUM ] = expr .)
    IF              reduce using rule 28 (expr -> ID [ INTNUM , INTNUM ] = expr .)
    WHILE           reduce using rule 28 (expr -> ID [ INTNUM , INTNUM ] = expr .)
    FOR             reduce using rule 28 (expr -> ID [ INTNUM , INTNUM ] = expr .)
    '               shift and go to state 28
    +               shift and go to state 29
    -               shift and go to state 30
    *               shift and go to state 31
    /               shift and go to state 32
    MPLUS           shift and go to state 33
    MMINUS          shift and go to state 34
    MMLTP           shift and go to state 35
    MDIV            shift and go to state 36

  ! '               [ reduce using rule 28 (expr -> ID [ INTNUM , INTNUM ] = expr .) ]
  ! +               [ reduce using rule 28 (expr -> ID [ INTNUM , INTNUM ] = expr .) ]
  ! -               [ reduce using rule 28 (expr -> ID [ INTNUM , INTNUM ] = expr .) ]
  ! *               [ reduce using rule 28 (expr -> ID [ INTNUM , INTNUM ] = expr .) ]
  ! /               [ reduce using rule 28 (expr -> ID [ INTNUM , INTNUM ] = expr .) ]
  ! MPLUS           [ reduce using rule 28 (expr -> ID [ INTNUM , INTNUM ] = expr .) ]
  ! MMINUS          [ reduce using rule 28 (expr -> ID [ INTNUM , INTNUM ] = expr .) ]
  ! MMLTP           [ reduce using rule 28 (expr -> ID [ INTNUM , INTNUM ] = expr .) ]
  ! MDIV            [ reduce using rule 28 (expr -> ID [ INTNUM , INTNUM ] = expr .) ]
  ! EQ              [ shift and go to state 37 ]
  ! NEQ             [ shift and go to state 38 ]
  ! GTEQ            [ shift and go to state 39 ]
  ! LTEQ            [ shift and go to state 40 ]
  ! >               [ shift and go to state 41 ]
  ! <               [ shift and go to state 42 ]


state 139

    (29) expr -> ID [ INTNUM , INTNUM ] PLUSASSIGN expr .
    (14) expr -> expr . '
    (36) expr -> expr . + expr
    (37) expr -> expr . - expr
    (38) expr -> expr . * expr
    (39) expr -> expr . / expr
    (40) expr -> expr . MPLUS expr
    (41) expr -> expr . MMINUS expr
    (42) expr -> expr . MMLTP expr
    (43) expr -> expr . MDIV expr
    (44) expr -> expr . EQ expr
    (45) expr -> expr . NEQ expr
    (46) expr -> expr . GTEQ expr
    (47) expr -> expr . LTEQ expr
    (48) expr -> expr . > expr
    (49) expr -> expr . < expr

    ;               reduce using rule 29 (expr -> ID [ INTNUM , INTNUM ] PLUSASSIGN expr .)
    EQ              reduce using rule 29 (expr -> ID [ INTNUM , INTNUM ] PLUSASSIGN expr .)
    NEQ             reduce using rule 29 (expr -> ID [ INTNUM , INTNUM ] PLUSASSIGN expr .)
    GTEQ            reduce using rule 29 (expr -> ID [ INTNUM , INTNUM ] PLUSASSIGN expr .)
    LTEQ            reduce using rule 29 (expr -> ID [ INTNUM , INTNUM ] PLUSASSIGN expr .)
    >               reduce using rule 29 (expr -> ID [ INTNUM , INTNUM ] PLUSASSIGN expr .)
    <               reduce using rule 29 (expr -> ID [ INTNUM , INTNUM ] PLUSASSIGN expr .)
    )               reduce using rule 29 (expr -> ID [ INTNUM , INTNUM ] PLUSASSIGN expr .)
    ]               reduce using rule 29 (expr -> ID [ INTNUM , INTNUM ] PLUSASSIGN expr .)
    ,               reduce using rule 29 (expr -> ID [ INTNUM , INTNUM ] PLUSASSIGN expr .)
    :               reduce using rule 29 (expr -> ID [ INTNUM , INTNUM ] PLUSASSIGN expr .)
    {               reduce using rule 29 (expr -> ID [ INTNUM , INTNUM ] PLUSASSIGN expr .)
    INTNUM          reduce using rule 29 (expr -> ID [ INTNUM , INTNUM ] PLUSASSIGN expr .)
    FLOATNUM        reduce using rule 29 (expr -> ID [ INTNUM , INTNUM ] PLUSASSIGN expr .)
    STRING          reduce using rule 29 (expr -> ID [ INTNUM , INTNUM ] PLUSASSIGN expr .)
    ID              reduce using rule 29 (expr -> ID [ INTNUM , INTNUM ] PLUSASSIGN expr .)
    (               reduce using rule 29 (expr -> ID [ INTNUM , INTNUM ] PLUSASSIGN expr .)
    [               reduce using rule 29 (expr -> ID [ INTNUM , INTNUM ] PLUSASSIGN expr .)
    BREAK           reduce using rule 29 (expr -> ID [ INTNUM , INTNUM ] PLUSASSIGN expr .)
    CONTINUE        reduce using rule 29 (expr -> ID [ INTNUM , INTNUM ] PLUSASSIGN expr .)
    RETURN          reduce using rule 29 (expr -> ID [ INTNUM , INTNUM ] PLUSASSIGN expr .)
    PRINT           reduce using rule 29 (expr -> ID [ INTNUM , INTNUM ] PLUSASSIGN expr .)
    IF              reduce using rule 29 (expr -> ID [ INTNUM , INTNUM ] PLUSASSIGN expr .)
    WHILE           reduce using rule 29 (expr -> ID [ INTNUM , INTNUM ] PLUSASSIGN expr .)
    FOR             reduce using rule 29 (expr -> ID [ INTNUM , INTNUM ] PLUSASSIGN expr .)
    '               shift and go to state 28
    +               shift and go to state 29
    -               shift and go to state 30
    *               shift and go to state 31
    /               shift and go to state 32
    MPLUS           shift and go to state 33
    MMINUS          shift and go to state 34
    MMLTP           shift and go to state 35
    MDIV            shift and go to state 36

  ! '               [ reduce using rule 29 (expr -> ID [ INTNUM , INTNUM ] PLUSASSIGN expr .) ]
  ! +               [ reduce using rule 29 (expr -> ID [ INTNUM , INTNUM ] PLUSASSIGN expr .) ]
  ! -               [ reduce using rule 29 (expr -> ID [ INTNUM , INTNUM ] PLUSASSIGN expr .) ]
  ! *               [ reduce using rule 29 (expr -> ID [ INTNUM , INTNUM ] PLUSASSIGN expr .) ]
  ! /               [ reduce using rule 29 (expr -> ID [ INTNUM , INTNUM ] PLUSASSIGN expr .) ]
  ! MPLUS           [ reduce using rule 29 (expr -> ID [ INTNUM , INTNUM ] PLUSASSIGN expr .) ]
  ! MMINUS          [ reduce using rule 29 (expr -> ID [ INTNUM , INTNUM ] PLUSASSIGN expr .) ]
  ! MMLTP           [ reduce using rule 29 (expr -> ID [ INTNUM , INTNUM ] PLUSASSIGN expr .) ]
  ! MDIV            [ reduce using rule 29 (expr -> ID [ INTNUM , INTNUM ] PLUSASSIGN expr .) ]
  ! EQ              [ shift and go to state 37 ]
  ! NEQ             [ shift and go to state 38 ]
  ! GTEQ            [ shift and go to state 39 ]
  ! LTEQ            [ shift and go to state 40 ]
  ! >               [ shift and go to state 41 ]
  ! <               [ shift and go to state 42 ]


state 140

    (30) expr -> ID [ INTNUM , INTNUM ] MINASSIGN expr .
    (14) expr -> expr . '
    (36) expr -> expr . + expr
    (37) expr -> expr . - expr
    (38) expr -> expr . * expr
    (39) expr -> expr . / expr
    (40) expr -> expr . MPLUS expr
    (41) expr -> expr . MMINUS expr
    (42) expr -> expr . MMLTP expr
    (43) expr -> expr . MDIV expr
    (44) expr -> expr . EQ expr
    (45) expr -> expr . NEQ expr
    (46) expr -> expr . GTEQ expr
    (47) expr -> expr . LTEQ expr
    (48) expr -> expr . > expr
    (49) expr -> expr . < expr

    ;               reduce using rule 30 (expr -> ID [ INTNUM , INTNUM ] MINASSIGN expr .)
    EQ              reduce using rule 30 (expr -> ID [ INTNUM , INTNUM ] MINASSIGN expr .)
    NEQ             reduce using rule 30 (expr -> ID [ INTNUM , INTNUM ] MINASSIGN expr .)
    GTEQ            reduce using rule 30 (expr -> ID [ INTNUM , INTNUM ] MINASSIGN expr .)
    LTEQ            reduce using rule 30 (expr -> ID [ INTNUM , INTNUM ] MINASSIGN expr .)
    >               reduce using rule 30 (expr -> ID [ INTNUM , INTNUM ] MINASSIGN expr .)
    <               reduce using rule 30 (expr -> ID [ INTNUM , INTNUM ] MINASSIGN expr .)
    )               reduce using rule 30 (expr -> ID [ INTNUM , INTNUM ] MINASSIGN expr .)
    ]               reduce using rule 30 (expr -> ID [ INTNUM , INTNUM ] MINASSIGN expr .)
    ,               reduce using rule 30 (expr -> ID [ INTNUM , INTNUM ] MINASSIGN expr .)
    :               reduce using rule 30 (expr -> ID [ INTNUM , INTNUM ] MINASSIGN expr .)
    {               reduce using rule 30 (expr -> ID [ INTNUM , INTNUM ] MINASSIGN expr .)
    INTNUM          reduce using rule 30 (expr -> ID [ INTNUM , INTNUM ] MINASSIGN expr .)
    FLOATNUM        reduce using rule 30 (expr -> ID [ INTNUM , INTNUM ] MINASSIGN expr .)
    STRING          reduce using rule 30 (expr -> ID [ INTNUM , INTNUM ] MINASSIGN expr .)
    ID              reduce using rule 30 (expr -> ID [ INTNUM , INTNUM ] MINASSIGN expr .)
    (               reduce using rule 30 (expr -> ID [ INTNUM , INTNUM ] MINASSIGN expr .)
    [               reduce using rule 30 (expr -> ID [ INTNUM , INTNUM ] MINASSIGN expr .)
    BREAK           reduce using rule 30 (expr -> ID [ INTNUM , INTNUM ] MINASSIGN expr .)
    CONTINUE        reduce using rule 30 (expr -> ID [ INTNUM , INTNUM ] MINASSIGN expr .)
    RETURN          reduce using rule 30 (expr -> ID [ INTNUM , INTNUM ] MINASSIGN expr .)
    PRINT           reduce using rule 30 (expr -> ID [ INTNUM , INTNUM ] MINASSIGN expr .)
    IF              reduce using rule 30 (expr -> ID [ INTNUM , INTNUM ] MINASSIGN expr .)
    WHILE           reduce using rule 30 (expr -> ID [ INTNUM , INTNUM ] MINASSIGN expr .)
    FOR             reduce using rule 30 (expr -> ID [ INTNUM , INTNUM ] MINASSIGN expr .)
    '               shift and go to state 28
    +               shift and go to state 29
    -               shift and go to state 30
    *               shift and go to state 31
    /               shift and go to state 32
    MPLUS           shift and go to state 33
    MMINUS          shift and go to state 34
    MMLTP           shift and go to state 35
    MDIV            shift and go to state 36

  ! '               [ reduce using rule 30 (expr -> ID [ INTNUM , INTNUM ] MINASSIGN expr .) ]
  ! +               [ reduce using rule 30 (expr -> ID [ INTNUM , INTNUM ] MINASSIGN expr .) ]
  ! -               [ reduce using rule 30 (expr -> ID [ INTNUM , INTNUM ] MINASSIGN expr .) ]
  ! *               [ reduce using rule 30 (expr -> ID [ INTNUM , INTNUM ] MINASSIGN expr .) ]
  ! /               [ reduce using rule 30 (expr -> ID [ INTNUM , INTNUM ] MINASSIGN expr .) ]
  ! MPLUS           [ reduce using rule 30 (expr -> ID [ INTNUM , INTNUM ] MINASSIGN expr .) ]
  ! MMINUS          [ reduce using rule 30 (expr -> ID [ INTNUM , INTNUM ] MINASSIGN expr .) ]
  ! MMLTP           [ reduce using rule 30 (expr -> ID [ INTNUM , INTNUM ] MINASSIGN expr .) ]
  ! MDIV            [ reduce using rule 30 (expr -> ID [ INTNUM , INTNUM ] MINASSIGN expr .) ]
  ! EQ              [ shift and go to state 37 ]
  ! NEQ             [ shift and go to state 38 ]
  ! GTEQ            [ shift and go to state 39 ]
  ! LTEQ            [ shift and go to state 40 ]
  ! >               [ shift and go to state 41 ]
  ! <               [ shift and go to state 42 ]


state 141

    (31) expr -> ID [ INTNUM , INTNUM ] MULTASSIGN expr .
    (14) expr -> expr . '
    (36) expr -> expr . + expr
    (37) expr -> expr . - expr
    (38) expr -> expr . * expr
    (39) expr -> expr . / expr
    (40) expr -> expr . MPLUS expr
    (41) expr -> expr . MMINUS expr
    (42) expr -> expr . MMLTP expr
    (43) expr -> expr . MDIV expr
    (44) expr -> expr . EQ expr
    (45) expr -> expr . NEQ expr
    (46) expr -> expr . GTEQ expr
    (47) expr -> expr . LTEQ expr
    (48) expr -> expr . > expr
    (49) expr -> expr . < expr

    ;               reduce using rule 31 (expr -> ID [ INTNUM , INTNUM ] MULTASSIGN expr .)
    EQ              reduce using rule 31 (expr -> ID [ INTNUM , INTNUM ] MULTASSIGN expr .)
    NEQ             reduce using rule 31 (expr -> ID [ INTNUM , INTNUM ] MULTASSIGN expr .)
    GTEQ            reduce using rule 31 (expr -> ID [ INTNUM , INTNUM ] MULTASSIGN expr .)
    LTEQ            reduce using rule 31 (expr -> ID [ INTNUM , INTNUM ] MULTASSIGN expr .)
    >               reduce using rule 31 (expr -> ID [ INTNUM , INTNUM ] MULTASSIGN expr .)
    <               reduce using rule 31 (expr -> ID [ INTNUM , INTNUM ] MULTASSIGN expr .)
    )               reduce using rule 31 (expr -> ID [ INTNUM , INTNUM ] MULTASSIGN expr .)
    ]               reduce using rule 31 (expr -> ID [ INTNUM , INTNUM ] MULTASSIGN expr .)
    ,               reduce using rule 31 (expr -> ID [ INTNUM , INTNUM ] MULTASSIGN expr .)
    :               reduce using rule 31 (expr -> ID [ INTNUM , INTNUM ] MULTASSIGN expr .)
    {               reduce using rule 31 (expr -> ID [ INTNUM , INTNUM ] MULTASSIGN expr .)
    INTNUM          reduce using rule 31 (expr -> ID [ INTNUM , INTNUM ] MULTASSIGN expr .)
    FLOATNUM        reduce using rule 31 (expr -> ID [ INTNUM , INTNUM ] MULTASSIGN expr .)
    STRING          reduce using rule 31 (expr -> ID [ INTNUM , INTNUM ] MULTASSIGN expr .)
    ID              reduce using rule 31 (expr -> ID [ INTNUM , INTNUM ] MULTASSIGN expr .)
    (               reduce using rule 31 (expr -> ID [ INTNUM , INTNUM ] MULTASSIGN expr .)
    [               reduce using rule 31 (expr -> ID [ INTNUM , INTNUM ] MULTASSIGN expr .)
    BREAK           reduce using rule 31 (expr -> ID [ INTNUM , INTNUM ] MULTASSIGN expr .)
    CONTINUE        reduce using rule 31 (expr -> ID [ INTNUM , INTNUM ] MULTASSIGN expr .)
    RETURN          reduce using rule 31 (expr -> ID [ INTNUM , INTNUM ] MULTASSIGN expr .)
    PRINT           reduce using rule 31 (expr -> ID [ INTNUM , INTNUM ] MULTASSIGN expr .)
    IF              reduce using rule 31 (expr -> ID [ INTNUM , INTNUM ] MULTASSIGN expr .)
    WHILE           reduce using rule 31 (expr -> ID [ INTNUM , INTNUM ] MULTASSIGN expr .)
    FOR             reduce using rule 31 (expr -> ID [ INTNUM , INTNUM ] MULTASSIGN expr .)
    '               shift and go to state 28
    +               shift and go to state 29
    -               shift and go to state 30
    *               shift and go to state 31
    /               shift and go to state 32
    MPLUS           shift and go to state 33
    MMINUS          shift and go to state 34
    MMLTP           shift and go to state 35
    MDIV            shift and go to state 36

  ! '               [ reduce using rule 31 (expr -> ID [ INTNUM , INTNUM ] MULTASSIGN expr .) ]
  ! +               [ reduce using rule 31 (expr -> ID [ INTNUM , INTNUM ] MULTASSIGN expr .) ]
  ! -               [ reduce using rule 31 (expr -> ID [ INTNUM , INTNUM ] MULTASSIGN expr .) ]
  ! *               [ reduce using rule 31 (expr -> ID [ INTNUM , INTNUM ] MULTASSIGN expr .) ]
  ! /               [ reduce using rule 31 (expr -> ID [ INTNUM , INTNUM ] MULTASSIGN expr .) ]
  ! MPLUS           [ reduce using rule 31 (expr -> ID [ INTNUM , INTNUM ] MULTASSIGN expr .) ]
  ! MMINUS          [ reduce using rule 31 (expr -> ID [ INTNUM , INTNUM ] MULTASSIGN expr .) ]
  ! MMLTP           [ reduce using rule 31 (expr -> ID [ INTNUM , INTNUM ] MULTASSIGN expr .) ]
  ! MDIV            [ reduce using rule 31 (expr -> ID [ INTNUM , INTNUM ] MULTASSIGN expr .) ]
  ! EQ              [ shift and go to state 37 ]
  ! NEQ             [ shift and go to state 38 ]
  ! GTEQ            [ shift and go to state 39 ]
  ! LTEQ            [ shift and go to state 40 ]
  ! >               [ shift and go to state 41 ]
  ! <               [ shift and go to state 42 ]


state 142

    (32) expr -> ID [ INTNUM , INTNUM ] DIVASSIGN expr .
    (14) expr -> expr . '
    (36) expr -> expr . + expr
    (37) expr -> expr . - expr
    (38) expr -> expr . * expr
    (39) expr -> expr . / expr
    (40) expr -> expr . MPLUS expr
    (41) expr -> expr . MMINUS expr
    (42) expr -> expr . MMLTP expr
    (43) expr -> expr . MDIV expr
    (44) expr -> expr . EQ expr
    (45) expr -> expr . NEQ expr
    (46) expr -> expr . GTEQ expr
    (47) expr -> expr . LTEQ expr
    (48) expr -> expr . > expr
    (49) expr -> expr . < expr

    ;               reduce using rule 32 (expr -> ID [ INTNUM , INTNUM ] DIVASSIGN expr .)
    EQ              reduce using rule 32 (expr -> ID [ INTNUM , INTNUM ] DIVASSIGN expr .)
    NEQ             reduce using rule 32 (expr -> ID [ INTNUM , INTNUM ] DIVASSIGN expr .)
    GTEQ            reduce using rule 32 (expr -> ID [ INTNUM , INTNUM ] DIVASSIGN expr .)
    LTEQ            reduce using rule 32 (expr -> ID [ INTNUM , INTNUM ] DIVASSIGN expr .)
    >               reduce using rule 32 (expr -> ID [ INTNUM , INTNUM ] DIVASSIGN expr .)
    <               reduce using rule 32 (expr -> ID [ INTNUM , INTNUM ] DIVASSIGN expr .)
    )               reduce using rule 32 (expr -> ID [ INTNUM , INTNUM ] DIVASSIGN expr .)
    ]               reduce using rule 32 (expr -> ID [ INTNUM , INTNUM ] DIVASSIGN expr .)
    ,               reduce using rule 32 (expr -> ID [ INTNUM , INTNUM ] DIVASSIGN expr .)
    :               reduce using rule 32 (expr -> ID [ INTNUM , INTNUM ] DIVASSIGN expr .)
    {               reduce using rule 32 (expr -> ID [ INTNUM , INTNUM ] DIVASSIGN expr .)
    INTNUM          reduce using rule 32 (expr -> ID [ INTNUM , INTNUM ] DIVASSIGN expr .)
    FLOATNUM        reduce using rule 32 (expr -> ID [ INTNUM , INTNUM ] DIVASSIGN expr .)
    STRING          reduce using rule 32 (expr -> ID [ INTNUM , INTNUM ] DIVASSIGN expr .)
    ID              reduce using rule 32 (expr -> ID [ INTNUM , INTNUM ] DIVASSIGN expr .)
    (               reduce using rule 32 (expr -> ID [ INTNUM , INTNUM ] DIVASSIGN expr .)
    [               reduce using rule 32 (expr -> ID [ INTNUM , INTNUM ] DIVASSIGN expr .)
    BREAK           reduce using rule 32 (expr -> ID [ INTNUM , INTNUM ] DIVASSIGN expr .)
    CONTINUE        reduce using rule 32 (expr -> ID [ INTNUM , INTNUM ] DIVASSIGN expr .)
    RETURN          reduce using rule 32 (expr -> ID [ INTNUM , INTNUM ] DIVASSIGN expr .)
    PRINT           reduce using rule 32 (expr -> ID [ INTNUM , INTNUM ] DIVASSIGN expr .)
    IF              reduce using rule 32 (expr -> ID [ INTNUM , INTNUM ] DIVASSIGN expr .)
    WHILE           reduce using rule 32 (expr -> ID [ INTNUM , INTNUM ] DIVASSIGN expr .)
    FOR             reduce using rule 32 (expr -> ID [ INTNUM , INTNUM ] DIVASSIGN expr .)
    '               shift and go to state 28
    +               shift and go to state 29
    -               shift and go to state 30
    *               shift and go to state 31
    /               shift and go to state 32
    MPLUS           shift and go to state 33
    MMINUS          shift and go to state 34
    MMLTP           shift and go to state 35
    MDIV            shift and go to state 36

  ! '               [ reduce using rule 32 (expr -> ID [ INTNUM , INTNUM ] DIVASSIGN expr .) ]
  ! +               [ reduce using rule 32 (expr -> ID [ INTNUM , INTNUM ] DIVASSIGN expr .) ]
  ! -               [ reduce using rule 32 (expr -> ID [ INTNUM , INTNUM ] DIVASSIGN expr .) ]
  ! *               [ reduce using rule 32 (expr -> ID [ INTNUM , INTNUM ] DIVASSIGN expr .) ]
  ! /               [ reduce using rule 32 (expr -> ID [ INTNUM , INTNUM ] DIVASSIGN expr .) ]
  ! MPLUS           [ reduce using rule 32 (expr -> ID [ INTNUM , INTNUM ] DIVASSIGN expr .) ]
  ! MMINUS          [ reduce using rule 32 (expr -> ID [ INTNUM , INTNUM ] DIVASSIGN expr .) ]
  ! MMLTP           [ reduce using rule 32 (expr -> ID [ INTNUM , INTNUM ] DIVASSIGN expr .) ]
  ! MDIV            [ reduce using rule 32 (expr -> ID [ INTNUM , INTNUM ] DIVASSIGN expr .) ]
  ! EQ              [ shift and go to state 37 ]
  ! NEQ             [ shift and go to state 38 ]
  ! GTEQ            [ shift and go to state 39 ]
  ! LTEQ            [ shift and go to state 40 ]
  ! >               [ shift and go to state 41 ]
  ! <               [ shift and go to state 42 ]


state 143

    (37) expr -> expr - expr .
    (13) expr -> - expr .
    (14) expr -> expr . '
    (36) expr -> expr . + expr
    (37) expr -> expr . - expr
    (38) expr -> expr . * expr
    (39) expr -> expr . / expr
    (40) expr -> expr . MPLUS expr
    (41) expr -> expr . MMINUS expr
    (42) expr -> expr . MMLTP expr
    (43) expr -> expr . MDIV expr
    (44) expr -> expr . EQ expr
    (45) expr -> expr . NEQ expr
    (46) expr -> expr . GTEQ expr
    (47) expr -> expr . LTEQ expr
    (48) expr -> expr . > expr
    (49) expr -> expr . < expr

  ! reduce/reduce conflict for ' resolved using rule 13 (expr -> - expr .)
  ! reduce/reduce conflict for + resolved using rule 13 (expr -> - expr .)
  ! reduce/reduce conflict for - resolved using rule 13 (expr -> - expr .)
  ! reduce/reduce conflict for * resolved using rule 13 (expr -> - expr .)
  ! reduce/reduce conflict for / resolved using rule 13 (expr -> - expr .)
  ! reduce/reduce conflict for MPLUS resolved using rule 13 (expr -> - expr .)
  ! reduce/reduce conflict for MMINUS resolved using rule 13 (expr -> - expr .)
  ! reduce/reduce conflict for MMLTP resolved using rule 13 (expr -> - expr .)
  ! reduce/reduce conflict for MDIV resolved using rule 13 (expr -> - expr .)
  ! reduce/reduce conflict for EQ resolved using rule 13 (expr -> - expr .)
  ! reduce/reduce conflict for NEQ resolved using rule 13 (expr -> - expr .)
  ! reduce/reduce conflict for GTEQ resolved using rule 13 (expr -> - expr .)
  ! reduce/reduce conflict for LTEQ resolved using rule 13 (expr -> - expr .)
  ! reduce/reduce conflict for > resolved using rule 13 (expr -> - expr .)
  ! reduce/reduce conflict for < resolved using rule 13 (expr -> - expr .)
    {               reduce using rule 37 (expr -> expr - expr .)
    INTNUM          reduce using rule 37 (expr -> expr - expr .)
    FLOATNUM        reduce using rule 37 (expr -> expr - expr .)
    STRING          reduce using rule 37 (expr -> expr - expr .)
    ID              reduce using rule 37 (expr -> expr - expr .)
    (               reduce using rule 37 (expr -> expr - expr .)
    [               reduce using rule 37 (expr -> expr - expr .)
    BREAK           reduce using rule 37 (expr -> expr - expr .)
    CONTINUE        reduce using rule 37 (expr -> expr - expr .)
    RETURN          reduce using rule 37 (expr -> expr - expr .)
    PRINT           reduce using rule 37 (expr -> expr - expr .)
    IF              reduce using rule 37 (expr -> expr - expr .)
    WHILE           reduce using rule 37 (expr -> expr - expr .)
    FOR             reduce using rule 37 (expr -> expr - expr .)
    ;               reduce using rule 13 (expr -> - expr .)
    +               reduce using rule 13 (expr -> - expr .)
    -               reduce using rule 13 (expr -> - expr .)
    MPLUS           reduce using rule 13 (expr -> - expr .)
    MMINUS          reduce using rule 13 (expr -> - expr .)
    EQ              reduce using rule 13 (expr -> - expr .)
    NEQ             reduce using rule 13 (expr -> - expr .)
    GTEQ            reduce using rule 13 (expr -> - expr .)
    LTEQ            reduce using rule 13 (expr -> - expr .)
    >               reduce using rule 13 (expr -> - expr .)
    <               reduce using rule 13 (expr -> - expr .)
    '               shift and go to state 28
    *               shift and go to state 31
    /               shift and go to state 32
    MMLTP           shift and go to state 35
    MDIV            shift and go to state 36

  ! '               [ reduce using rule 37 (expr -> expr - expr .) ]
  ! +               [ reduce using rule 37 (expr -> expr - expr .) ]
  ! -               [ reduce using rule 37 (expr -> expr - expr .) ]
  ! *               [ reduce using rule 37 (expr -> expr - expr .) ]
  ! /               [ reduce using rule 37 (expr -> expr - expr .) ]
  ! MPLUS           [ reduce using rule 37 (expr -> expr - expr .) ]
  ! MMINUS          [ reduce using rule 37 (expr -> expr - expr .) ]
  ! MMLTP           [ reduce using rule 37 (expr -> expr - expr .) ]
  ! MDIV            [ reduce using rule 37 (expr -> expr - expr .) ]
  ! EQ              [ reduce using rule 37 (expr -> expr - expr .) ]
  ! NEQ             [ reduce using rule 37 (expr -> expr - expr .) ]
  ! GTEQ            [ reduce using rule 37 (expr -> expr - expr .) ]
  ! LTEQ            [ reduce using rule 37 (expr -> expr - expr .) ]
  ! >               [ reduce using rule 37 (expr -> expr - expr .) ]
  ! <               [ reduce using rule 37 (expr -> expr - expr .) ]
  ! '               [ reduce using rule 13 (expr -> - expr .) ]
  ! *               [ reduce using rule 13 (expr -> - expr .) ]
  ! /               [ reduce using rule 13 (expr -> - expr .) ]
  ! MMLTP           [ reduce using rule 13 (expr -> - expr .) ]
  ! MDIV            [ reduce using rule 13 (expr -> - expr .) ]
  ! +               [ shift and go to state 29 ]
  ! -               [ shift and go to state 30 ]
  ! MPLUS           [ shift and go to state 33 ]
  ! MMINUS          [ shift and go to state 34 ]
  ! EQ              [ shift and go to state 37 ]
  ! NEQ             [ shift and go to state 38 ]
  ! GTEQ            [ shift and go to state 39 ]
  ! LTEQ            [ shift and go to state 40 ]
  ! >               [ shift and go to state 41 ]
  ! <               [ shift and go to state 42 ]

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for [ in state 10 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 14 resolved as shift
WARNING: shift/reduce conflict for ' in state 71 resolved as shift
WARNING: shift/reduce conflict for + in state 71 resolved as shift
WARNING: shift/reduce conflict for - in state 71 resolved as shift
WARNING: shift/reduce conflict for * in state 71 resolved as shift
WARNING: shift/reduce conflict for / in state 71 resolved as shift
WARNING: shift/reduce conflict for MPLUS in state 71 resolved as shift
WARNING: shift/reduce conflict for MMINUS in state 71 resolved as shift
WARNING: shift/reduce conflict for MMLTP in state 71 resolved as shift
WARNING: shift/reduce conflict for MDIV in state 71 resolved as shift
WARNING: shift/reduce conflict for EQ in state 71 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 71 resolved as shift
WARNING: shift/reduce conflict for GTEQ in state 71 resolved as shift
WARNING: shift/reduce conflict for LTEQ in state 71 resolved as shift
WARNING: shift/reduce conflict for > in state 71 resolved as shift
WARNING: shift/reduce conflict for < in state 71 resolved as shift
WARNING: shift/reduce conflict for ' in state 72 resolved as shift
WARNING: shift/reduce conflict for + in state 72 resolved as shift
WARNING: shift/reduce conflict for - in state 72 resolved as shift
WARNING: shift/reduce conflict for * in state 72 resolved as shift
WARNING: shift/reduce conflict for / in state 72 resolved as shift
WARNING: shift/reduce conflict for MPLUS in state 72 resolved as shift
WARNING: shift/reduce conflict for MMINUS in state 72 resolved as shift
WARNING: shift/reduce conflict for MMLTP in state 72 resolved as shift
WARNING: shift/reduce conflict for MDIV in state 72 resolved as shift
WARNING: shift/reduce conflict for EQ in state 72 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 72 resolved as shift
WARNING: shift/reduce conflict for GTEQ in state 72 resolved as shift
WARNING: shift/reduce conflict for LTEQ in state 72 resolved as shift
WARNING: shift/reduce conflict for > in state 72 resolved as shift
WARNING: shift/reduce conflict for < in state 72 resolved as shift
WARNING: shift/reduce conflict for ' in state 73 resolved as shift
WARNING: shift/reduce conflict for + in state 73 resolved as shift
WARNING: shift/reduce conflict for - in state 73 resolved as shift
WARNING: shift/reduce conflict for * in state 73 resolved as shift
WARNING: shift/reduce conflict for / in state 73 resolved as shift
WARNING: shift/reduce conflict for MPLUS in state 73 resolved as shift
WARNING: shift/reduce conflict for MMINUS in state 73 resolved as shift
WARNING: shift/reduce conflict for MMLTP in state 73 resolved as shift
WARNING: shift/reduce conflict for MDIV in state 73 resolved as shift
WARNING: shift/reduce conflict for EQ in state 73 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 73 resolved as shift
WARNING: shift/reduce conflict for GTEQ in state 73 resolved as shift
WARNING: shift/reduce conflict for LTEQ in state 73 resolved as shift
WARNING: shift/reduce conflict for > in state 73 resolved as shift
WARNING: shift/reduce conflict for < in state 73 resolved as shift
WARNING: shift/reduce conflict for ' in state 74 resolved as shift
WARNING: shift/reduce conflict for + in state 74 resolved as shift
WARNING: shift/reduce conflict for - in state 74 resolved as shift
WARNING: shift/reduce conflict for * in state 74 resolved as shift
WARNING: shift/reduce conflict for / in state 74 resolved as shift
WARNING: shift/reduce conflict for MPLUS in state 74 resolved as shift
WARNING: shift/reduce conflict for MMINUS in state 74 resolved as shift
WARNING: shift/reduce conflict for MMLTP in state 74 resolved as shift
WARNING: shift/reduce conflict for MDIV in state 74 resolved as shift
WARNING: shift/reduce conflict for EQ in state 74 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 74 resolved as shift
WARNING: shift/reduce conflict for GTEQ in state 74 resolved as shift
WARNING: shift/reduce conflict for LTEQ in state 74 resolved as shift
WARNING: shift/reduce conflict for > in state 74 resolved as shift
WARNING: shift/reduce conflict for < in state 74 resolved as shift
WARNING: shift/reduce conflict for ' in state 75 resolved as shift
WARNING: shift/reduce conflict for + in state 75 resolved as shift
WARNING: shift/reduce conflict for - in state 75 resolved as shift
WARNING: shift/reduce conflict for * in state 75 resolved as shift
WARNING: shift/reduce conflict for / in state 75 resolved as shift
WARNING: shift/reduce conflict for MPLUS in state 75 resolved as shift
WARNING: shift/reduce conflict for MMINUS in state 75 resolved as shift
WARNING: shift/reduce conflict for MMLTP in state 75 resolved as shift
WARNING: shift/reduce conflict for MDIV in state 75 resolved as shift
WARNING: shift/reduce conflict for EQ in state 75 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 75 resolved as shift
WARNING: shift/reduce conflict for GTEQ in state 75 resolved as shift
WARNING: shift/reduce conflict for LTEQ in state 75 resolved as shift
WARNING: shift/reduce conflict for > in state 75 resolved as shift
WARNING: shift/reduce conflict for < in state 75 resolved as shift
WARNING: shift/reduce conflict for ' in state 76 resolved as shift
WARNING: shift/reduce conflict for + in state 76 resolved as shift
WARNING: shift/reduce conflict for - in state 76 resolved as shift
WARNING: shift/reduce conflict for * in state 76 resolved as shift
WARNING: shift/reduce conflict for / in state 76 resolved as shift
WARNING: shift/reduce conflict for MPLUS in state 76 resolved as shift
WARNING: shift/reduce conflict for MMINUS in state 76 resolved as shift
WARNING: shift/reduce conflict for MMLTP in state 76 resolved as shift
WARNING: shift/reduce conflict for MDIV in state 76 resolved as shift
WARNING: shift/reduce conflict for EQ in state 76 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 76 resolved as shift
WARNING: shift/reduce conflict for GTEQ in state 76 resolved as shift
WARNING: shift/reduce conflict for LTEQ in state 76 resolved as shift
WARNING: shift/reduce conflict for > in state 76 resolved as shift
WARNING: shift/reduce conflict for < in state 76 resolved as shift
WARNING: reduce/reduce conflict in state 143 resolved using rule (expr -> - expr)
WARNING: rejected rule (expr -> expr - expr) in state 143
